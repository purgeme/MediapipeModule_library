// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/core/flow_limiter_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fcore_2fflow_5flimiter_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fcore_2fflow_5flimiter_5fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2fcore_2fflow_5flimiter_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2fcore_2fflow_5flimiter_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fcore_2fflow_5flimiter_5fcalculator_2eproto;
namespace mediapipe {
class FlowLimiterCalculatorOptions;
struct FlowLimiterCalculatorOptionsDefaultTypeInternal;
extern FlowLimiterCalculatorOptionsDefaultTypeInternal _FlowLimiterCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::FlowLimiterCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::FlowLimiterCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class FlowLimiterCalculatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.FlowLimiterCalculatorOptions) */ {
 public:
  inline FlowLimiterCalculatorOptions() : FlowLimiterCalculatorOptions(nullptr) {}
  ~FlowLimiterCalculatorOptions() override;
  explicit constexpr FlowLimiterCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlowLimiterCalculatorOptions(const FlowLimiterCalculatorOptions& from);
  FlowLimiterCalculatorOptions(FlowLimiterCalculatorOptions&& from) noexcept
    : FlowLimiterCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline FlowLimiterCalculatorOptions& operator=(const FlowLimiterCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowLimiterCalculatorOptions& operator=(FlowLimiterCalculatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowLimiterCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowLimiterCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const FlowLimiterCalculatorOptions*>(
               &_FlowLimiterCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlowLimiterCalculatorOptions& a, FlowLimiterCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowLimiterCalculatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowLimiterCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlowLimiterCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlowLimiterCalculatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlowLimiterCalculatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FlowLimiterCalculatorOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowLimiterCalculatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.FlowLimiterCalculatorOptions";
  }
  protected:
  explicit FlowLimiterCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxInQueueFieldNumber = 2,
    kMaxInFlightFieldNumber = 1,
    kInFlightTimeoutFieldNumber = 3,
  };
  // optional int32 max_in_queue = 2 [default = 0];
  bool has_max_in_queue() const;
  private:
  bool _internal_has_max_in_queue() const;
  public:
  void clear_max_in_queue();
  int32_t max_in_queue() const;
  void set_max_in_queue(int32_t value);
  private:
  int32_t _internal_max_in_queue() const;
  void _internal_set_max_in_queue(int32_t value);
  public:

  // optional int32 max_in_flight = 1 [default = 1];
  bool has_max_in_flight() const;
  private:
  bool _internal_has_max_in_flight() const;
  public:
  void clear_max_in_flight();
  int32_t max_in_flight() const;
  void set_max_in_flight(int32_t value);
  private:
  int32_t _internal_max_in_flight() const;
  void _internal_set_max_in_flight(int32_t value);
  public:

  // optional int64 in_flight_timeout = 3 [default = 1000000];
  bool has_in_flight_timeout() const;
  private:
  bool _internal_has_in_flight_timeout() const;
  public:
  void clear_in_flight_timeout();
  int64_t in_flight_timeout() const;
  void set_in_flight_timeout(int64_t value);
  private:
  int64_t _internal_in_flight_timeout() const;
  void _internal_set_in_flight_timeout(int64_t value);
  public:

  static const int kExtFieldNumber = 326963320;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::FlowLimiterCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.FlowLimiterCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t max_in_queue_;
  int32_t max_in_flight_;
  int64_t in_flight_timeout_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2fcore_2fflow_5flimiter_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlowLimiterCalculatorOptions

// optional int32 max_in_flight = 1 [default = 1];
inline bool FlowLimiterCalculatorOptions::_internal_has_max_in_flight() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FlowLimiterCalculatorOptions::has_max_in_flight() const {
  return _internal_has_max_in_flight();
}
inline void FlowLimiterCalculatorOptions::clear_max_in_flight() {
  max_in_flight_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t FlowLimiterCalculatorOptions::_internal_max_in_flight() const {
  return max_in_flight_;
}
inline int32_t FlowLimiterCalculatorOptions::max_in_flight() const {
  // @@protoc_insertion_point(field_get:mediapipe.FlowLimiterCalculatorOptions.max_in_flight)
  return _internal_max_in_flight();
}
inline void FlowLimiterCalculatorOptions::_internal_set_max_in_flight(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  max_in_flight_ = value;
}
inline void FlowLimiterCalculatorOptions::set_max_in_flight(int32_t value) {
  _internal_set_max_in_flight(value);
  // @@protoc_insertion_point(field_set:mediapipe.FlowLimiterCalculatorOptions.max_in_flight)
}

// optional int32 max_in_queue = 2 [default = 0];
inline bool FlowLimiterCalculatorOptions::_internal_has_max_in_queue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FlowLimiterCalculatorOptions::has_max_in_queue() const {
  return _internal_has_max_in_queue();
}
inline void FlowLimiterCalculatorOptions::clear_max_in_queue() {
  max_in_queue_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t FlowLimiterCalculatorOptions::_internal_max_in_queue() const {
  return max_in_queue_;
}
inline int32_t FlowLimiterCalculatorOptions::max_in_queue() const {
  // @@protoc_insertion_point(field_get:mediapipe.FlowLimiterCalculatorOptions.max_in_queue)
  return _internal_max_in_queue();
}
inline void FlowLimiterCalculatorOptions::_internal_set_max_in_queue(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  max_in_queue_ = value;
}
inline void FlowLimiterCalculatorOptions::set_max_in_queue(int32_t value) {
  _internal_set_max_in_queue(value);
  // @@protoc_insertion_point(field_set:mediapipe.FlowLimiterCalculatorOptions.max_in_queue)
}

// optional int64 in_flight_timeout = 3 [default = 1000000];
inline bool FlowLimiterCalculatorOptions::_internal_has_in_flight_timeout() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FlowLimiterCalculatorOptions::has_in_flight_timeout() const {
  return _internal_has_in_flight_timeout();
}
inline void FlowLimiterCalculatorOptions::clear_in_flight_timeout() {
  in_flight_timeout_ = int64_t{1000000};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t FlowLimiterCalculatorOptions::_internal_in_flight_timeout() const {
  return in_flight_timeout_;
}
inline int64_t FlowLimiterCalculatorOptions::in_flight_timeout() const {
  // @@protoc_insertion_point(field_get:mediapipe.FlowLimiterCalculatorOptions.in_flight_timeout)
  return _internal_in_flight_timeout();
}
inline void FlowLimiterCalculatorOptions::_internal_set_in_flight_timeout(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  in_flight_timeout_ = value;
}
inline void FlowLimiterCalculatorOptions::set_in_flight_timeout(int64_t value) {
  _internal_set_in_flight_timeout(value);
  // @@protoc_insertion_point(field_set:mediapipe.FlowLimiterCalculatorOptions.in_flight_timeout)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fcore_2fflow_5flimiter_5fcalculator_2eproto
