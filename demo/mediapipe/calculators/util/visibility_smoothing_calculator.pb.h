// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/util/visibility_smoothing_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto;
namespace mediapipe {
class VisibilitySmoothingCalculatorOptions;
struct VisibilitySmoothingCalculatorOptionsDefaultTypeInternal;
extern VisibilitySmoothingCalculatorOptionsDefaultTypeInternal _VisibilitySmoothingCalculatorOptions_default_instance_;
class VisibilitySmoothingCalculatorOptions_LowPassFilter;
struct VisibilitySmoothingCalculatorOptions_LowPassFilterDefaultTypeInternal;
extern VisibilitySmoothingCalculatorOptions_LowPassFilterDefaultTypeInternal _VisibilitySmoothingCalculatorOptions_LowPassFilter_default_instance_;
class VisibilitySmoothingCalculatorOptions_NoFilter;
struct VisibilitySmoothingCalculatorOptions_NoFilterDefaultTypeInternal;
extern VisibilitySmoothingCalculatorOptions_NoFilterDefaultTypeInternal _VisibilitySmoothingCalculatorOptions_NoFilter_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::VisibilitySmoothingCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::VisibilitySmoothingCalculatorOptions>(Arena*);
template<> ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* Arena::CreateMaybeMessage<::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter>(Arena*);
template<> ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* Arena::CreateMaybeMessage<::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class VisibilitySmoothingCalculatorOptions_NoFilter final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mediapipe.VisibilitySmoothingCalculatorOptions.NoFilter) */ {
 public:
  inline VisibilitySmoothingCalculatorOptions_NoFilter() : VisibilitySmoothingCalculatorOptions_NoFilter(nullptr) {}
  explicit constexpr VisibilitySmoothingCalculatorOptions_NoFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisibilitySmoothingCalculatorOptions_NoFilter(const VisibilitySmoothingCalculatorOptions_NoFilter& from);
  VisibilitySmoothingCalculatorOptions_NoFilter(VisibilitySmoothingCalculatorOptions_NoFilter&& from) noexcept
    : VisibilitySmoothingCalculatorOptions_NoFilter() {
    *this = ::std::move(from);
  }

  inline VisibilitySmoothingCalculatorOptions_NoFilter& operator=(const VisibilitySmoothingCalculatorOptions_NoFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisibilitySmoothingCalculatorOptions_NoFilter& operator=(VisibilitySmoothingCalculatorOptions_NoFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisibilitySmoothingCalculatorOptions_NoFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisibilitySmoothingCalculatorOptions_NoFilter* internal_default_instance() {
    return reinterpret_cast<const VisibilitySmoothingCalculatorOptions_NoFilter*>(
               &_VisibilitySmoothingCalculatorOptions_NoFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VisibilitySmoothingCalculatorOptions_NoFilter& a, VisibilitySmoothingCalculatorOptions_NoFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(VisibilitySmoothingCalculatorOptions_NoFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisibilitySmoothingCalculatorOptions_NoFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisibilitySmoothingCalculatorOptions_NoFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisibilitySmoothingCalculatorOptions_NoFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VisibilitySmoothingCalculatorOptions_NoFilter& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VisibilitySmoothingCalculatorOptions_NoFilter& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.VisibilitySmoothingCalculatorOptions.NoFilter";
  }
  protected:
  explicit VisibilitySmoothingCalculatorOptions_NoFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mediapipe.VisibilitySmoothingCalculatorOptions.NoFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class VisibilitySmoothingCalculatorOptions_LowPassFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter) */ {
 public:
  inline VisibilitySmoothingCalculatorOptions_LowPassFilter() : VisibilitySmoothingCalculatorOptions_LowPassFilter(nullptr) {}
  ~VisibilitySmoothingCalculatorOptions_LowPassFilter() override;
  explicit constexpr VisibilitySmoothingCalculatorOptions_LowPassFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisibilitySmoothingCalculatorOptions_LowPassFilter(const VisibilitySmoothingCalculatorOptions_LowPassFilter& from);
  VisibilitySmoothingCalculatorOptions_LowPassFilter(VisibilitySmoothingCalculatorOptions_LowPassFilter&& from) noexcept
    : VisibilitySmoothingCalculatorOptions_LowPassFilter() {
    *this = ::std::move(from);
  }

  inline VisibilitySmoothingCalculatorOptions_LowPassFilter& operator=(const VisibilitySmoothingCalculatorOptions_LowPassFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisibilitySmoothingCalculatorOptions_LowPassFilter& operator=(VisibilitySmoothingCalculatorOptions_LowPassFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisibilitySmoothingCalculatorOptions_LowPassFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisibilitySmoothingCalculatorOptions_LowPassFilter* internal_default_instance() {
    return reinterpret_cast<const VisibilitySmoothingCalculatorOptions_LowPassFilter*>(
               &_VisibilitySmoothingCalculatorOptions_LowPassFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VisibilitySmoothingCalculatorOptions_LowPassFilter& a, VisibilitySmoothingCalculatorOptions_LowPassFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(VisibilitySmoothingCalculatorOptions_LowPassFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisibilitySmoothingCalculatorOptions_LowPassFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisibilitySmoothingCalculatorOptions_LowPassFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisibilitySmoothingCalculatorOptions_LowPassFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VisibilitySmoothingCalculatorOptions_LowPassFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VisibilitySmoothingCalculatorOptions_LowPassFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisibilitySmoothingCalculatorOptions_LowPassFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter";
  }
  protected:
  explicit VisibilitySmoothingCalculatorOptions_LowPassFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
  };
  // optional float alpha = 1 [default = 0.1];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float alpha_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class VisibilitySmoothingCalculatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.VisibilitySmoothingCalculatorOptions) */ {
 public:
  inline VisibilitySmoothingCalculatorOptions() : VisibilitySmoothingCalculatorOptions(nullptr) {}
  ~VisibilitySmoothingCalculatorOptions() override;
  explicit constexpr VisibilitySmoothingCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisibilitySmoothingCalculatorOptions(const VisibilitySmoothingCalculatorOptions& from);
  VisibilitySmoothingCalculatorOptions(VisibilitySmoothingCalculatorOptions&& from) noexcept
    : VisibilitySmoothingCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline VisibilitySmoothingCalculatorOptions& operator=(const VisibilitySmoothingCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisibilitySmoothingCalculatorOptions& operator=(VisibilitySmoothingCalculatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisibilitySmoothingCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  enum FilterOptionsCase {
    kNoFilter = 1,
    kLowPassFilter = 2,
    FILTER_OPTIONS_NOT_SET = 0,
  };

  static inline const VisibilitySmoothingCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const VisibilitySmoothingCalculatorOptions*>(
               &_VisibilitySmoothingCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VisibilitySmoothingCalculatorOptions& a, VisibilitySmoothingCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(VisibilitySmoothingCalculatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisibilitySmoothingCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisibilitySmoothingCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisibilitySmoothingCalculatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VisibilitySmoothingCalculatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VisibilitySmoothingCalculatorOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisibilitySmoothingCalculatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.VisibilitySmoothingCalculatorOptions";
  }
  protected:
  explicit VisibilitySmoothingCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VisibilitySmoothingCalculatorOptions_NoFilter NoFilter;
  typedef VisibilitySmoothingCalculatorOptions_LowPassFilter LowPassFilter;

  // accessors -------------------------------------------------------

  enum : int {
    kNoFilterFieldNumber = 1,
    kLowPassFilterFieldNumber = 2,
  };
  // .mediapipe.VisibilitySmoothingCalculatorOptions.NoFilter no_filter = 1;
  bool has_no_filter() const;
  private:
  bool _internal_has_no_filter() const;
  public:
  void clear_no_filter();
  const ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter& no_filter() const;
  PROTOBUF_NODISCARD ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* release_no_filter();
  ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* mutable_no_filter();
  void set_allocated_no_filter(::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* no_filter);
  private:
  const ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter& _internal_no_filter() const;
  ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* _internal_mutable_no_filter();
  public:
  void unsafe_arena_set_allocated_no_filter(
      ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* no_filter);
  ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* unsafe_arena_release_no_filter();

  // .mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter low_pass_filter = 2;
  bool has_low_pass_filter() const;
  private:
  bool _internal_has_low_pass_filter() const;
  public:
  void clear_low_pass_filter();
  const ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter& low_pass_filter() const;
  PROTOBUF_NODISCARD ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* release_low_pass_filter();
  ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* mutable_low_pass_filter();
  void set_allocated_low_pass_filter(::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* low_pass_filter);
  private:
  const ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter& _internal_low_pass_filter() const;
  ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* _internal_mutable_low_pass_filter();
  public:
  void unsafe_arena_set_allocated_low_pass_filter(
      ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* low_pass_filter);
  ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* unsafe_arena_release_low_pass_filter();

  void clear_filter_options();
  FilterOptionsCase filter_options_case() const;
  static const int kExtFieldNumber = 360207350;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::VisibilitySmoothingCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.VisibilitySmoothingCalculatorOptions)
 private:
  class _Internal;
  void set_has_no_filter();
  void set_has_low_pass_filter();

  inline bool has_filter_options() const;
  inline void clear_has_filter_options();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FilterOptionsUnion {
    constexpr FilterOptionsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* no_filter_;
    ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* low_pass_filter_;
  } filter_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VisibilitySmoothingCalculatorOptions_NoFilter

// -------------------------------------------------------------------

// VisibilitySmoothingCalculatorOptions_LowPassFilter

// optional float alpha = 1 [default = 0.1];
inline bool VisibilitySmoothingCalculatorOptions_LowPassFilter::_internal_has_alpha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VisibilitySmoothingCalculatorOptions_LowPassFilter::has_alpha() const {
  return _internal_has_alpha();
}
inline void VisibilitySmoothingCalculatorOptions_LowPassFilter::clear_alpha() {
  alpha_ = 0.1f;
  _has_bits_[0] &= ~0x00000001u;
}
inline float VisibilitySmoothingCalculatorOptions_LowPassFilter::_internal_alpha() const {
  return alpha_;
}
inline float VisibilitySmoothingCalculatorOptions_LowPassFilter::alpha() const {
  // @@protoc_insertion_point(field_get:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter.alpha)
  return _internal_alpha();
}
inline void VisibilitySmoothingCalculatorOptions_LowPassFilter::_internal_set_alpha(float value) {
  _has_bits_[0] |= 0x00000001u;
  alpha_ = value;
}
inline void VisibilitySmoothingCalculatorOptions_LowPassFilter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter.alpha)
}

// -------------------------------------------------------------------

// VisibilitySmoothingCalculatorOptions

// .mediapipe.VisibilitySmoothingCalculatorOptions.NoFilter no_filter = 1;
inline bool VisibilitySmoothingCalculatorOptions::_internal_has_no_filter() const {
  return filter_options_case() == kNoFilter;
}
inline bool VisibilitySmoothingCalculatorOptions::has_no_filter() const {
  return _internal_has_no_filter();
}
inline void VisibilitySmoothingCalculatorOptions::set_has_no_filter() {
  _oneof_case_[0] = kNoFilter;
}
inline void VisibilitySmoothingCalculatorOptions::clear_no_filter() {
  if (_internal_has_no_filter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete filter_options_.no_filter_;
    }
    clear_has_filter_options();
  }
}
inline ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* VisibilitySmoothingCalculatorOptions::release_no_filter() {
  // @@protoc_insertion_point(field_release:mediapipe.VisibilitySmoothingCalculatorOptions.no_filter)
  if (_internal_has_no_filter()) {
    clear_has_filter_options();
      ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* temp = filter_options_.no_filter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_options_.no_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter& VisibilitySmoothingCalculatorOptions::_internal_no_filter() const {
  return _internal_has_no_filter()
      ? *filter_options_.no_filter_
      : reinterpret_cast< ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter&>(::mediapipe::_VisibilitySmoothingCalculatorOptions_NoFilter_default_instance_);
}
inline const ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter& VisibilitySmoothingCalculatorOptions::no_filter() const {
  // @@protoc_insertion_point(field_get:mediapipe.VisibilitySmoothingCalculatorOptions.no_filter)
  return _internal_no_filter();
}
inline ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* VisibilitySmoothingCalculatorOptions::unsafe_arena_release_no_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.VisibilitySmoothingCalculatorOptions.no_filter)
  if (_internal_has_no_filter()) {
    clear_has_filter_options();
    ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* temp = filter_options_.no_filter_;
    filter_options_.no_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VisibilitySmoothingCalculatorOptions::unsafe_arena_set_allocated_no_filter(::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* no_filter) {
  clear_filter_options();
  if (no_filter) {
    set_has_no_filter();
    filter_options_.no_filter_ = no_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.VisibilitySmoothingCalculatorOptions.no_filter)
}
inline ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* VisibilitySmoothingCalculatorOptions::_internal_mutable_no_filter() {
  if (!_internal_has_no_filter()) {
    clear_filter_options();
    set_has_no_filter();
    filter_options_.no_filter_ = CreateMaybeMessage< ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter >(GetArenaForAllocation());
  }
  return filter_options_.no_filter_;
}
inline ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* VisibilitySmoothingCalculatorOptions::mutable_no_filter() {
  ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* _msg = _internal_mutable_no_filter();
  // @@protoc_insertion_point(field_mutable:mediapipe.VisibilitySmoothingCalculatorOptions.no_filter)
  return _msg;
}

// .mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter low_pass_filter = 2;
inline bool VisibilitySmoothingCalculatorOptions::_internal_has_low_pass_filter() const {
  return filter_options_case() == kLowPassFilter;
}
inline bool VisibilitySmoothingCalculatorOptions::has_low_pass_filter() const {
  return _internal_has_low_pass_filter();
}
inline void VisibilitySmoothingCalculatorOptions::set_has_low_pass_filter() {
  _oneof_case_[0] = kLowPassFilter;
}
inline void VisibilitySmoothingCalculatorOptions::clear_low_pass_filter() {
  if (_internal_has_low_pass_filter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete filter_options_.low_pass_filter_;
    }
    clear_has_filter_options();
  }
}
inline ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* VisibilitySmoothingCalculatorOptions::release_low_pass_filter() {
  // @@protoc_insertion_point(field_release:mediapipe.VisibilitySmoothingCalculatorOptions.low_pass_filter)
  if (_internal_has_low_pass_filter()) {
    clear_has_filter_options();
      ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* temp = filter_options_.low_pass_filter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_options_.low_pass_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter& VisibilitySmoothingCalculatorOptions::_internal_low_pass_filter() const {
  return _internal_has_low_pass_filter()
      ? *filter_options_.low_pass_filter_
      : reinterpret_cast< ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter&>(::mediapipe::_VisibilitySmoothingCalculatorOptions_LowPassFilter_default_instance_);
}
inline const ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter& VisibilitySmoothingCalculatorOptions::low_pass_filter() const {
  // @@protoc_insertion_point(field_get:mediapipe.VisibilitySmoothingCalculatorOptions.low_pass_filter)
  return _internal_low_pass_filter();
}
inline ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* VisibilitySmoothingCalculatorOptions::unsafe_arena_release_low_pass_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.VisibilitySmoothingCalculatorOptions.low_pass_filter)
  if (_internal_has_low_pass_filter()) {
    clear_has_filter_options();
    ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* temp = filter_options_.low_pass_filter_;
    filter_options_.low_pass_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VisibilitySmoothingCalculatorOptions::unsafe_arena_set_allocated_low_pass_filter(::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* low_pass_filter) {
  clear_filter_options();
  if (low_pass_filter) {
    set_has_low_pass_filter();
    filter_options_.low_pass_filter_ = low_pass_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.VisibilitySmoothingCalculatorOptions.low_pass_filter)
}
inline ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* VisibilitySmoothingCalculatorOptions::_internal_mutable_low_pass_filter() {
  if (!_internal_has_low_pass_filter()) {
    clear_filter_options();
    set_has_low_pass_filter();
    filter_options_.low_pass_filter_ = CreateMaybeMessage< ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter >(GetArenaForAllocation());
  }
  return filter_options_.low_pass_filter_;
}
inline ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* VisibilitySmoothingCalculatorOptions::mutable_low_pass_filter() {
  ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* _msg = _internal_mutable_low_pass_filter();
  // @@protoc_insertion_point(field_mutable:mediapipe.VisibilitySmoothingCalculatorOptions.low_pass_filter)
  return _msg;
}

inline bool VisibilitySmoothingCalculatorOptions::has_filter_options() const {
  return filter_options_case() != FILTER_OPTIONS_NOT_SET;
}
inline void VisibilitySmoothingCalculatorOptions::clear_has_filter_options() {
  _oneof_case_[0] = FILTER_OPTIONS_NOT_SET;
}
inline VisibilitySmoothingCalculatorOptions::FilterOptionsCase VisibilitySmoothingCalculatorOptions::filter_options_case() const {
  return VisibilitySmoothingCalculatorOptions::FilterOptionsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto
