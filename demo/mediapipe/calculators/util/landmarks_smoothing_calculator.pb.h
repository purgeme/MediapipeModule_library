// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/util/landmarks_smoothing_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto;
namespace mediapipe {
class LandmarksSmoothingCalculatorOptions;
struct LandmarksSmoothingCalculatorOptionsDefaultTypeInternal;
extern LandmarksSmoothingCalculatorOptionsDefaultTypeInternal _LandmarksSmoothingCalculatorOptions_default_instance_;
class LandmarksSmoothingCalculatorOptions_NoFilter;
struct LandmarksSmoothingCalculatorOptions_NoFilterDefaultTypeInternal;
extern LandmarksSmoothingCalculatorOptions_NoFilterDefaultTypeInternal _LandmarksSmoothingCalculatorOptions_NoFilter_default_instance_;
class LandmarksSmoothingCalculatorOptions_OneEuroFilter;
struct LandmarksSmoothingCalculatorOptions_OneEuroFilterDefaultTypeInternal;
extern LandmarksSmoothingCalculatorOptions_OneEuroFilterDefaultTypeInternal _LandmarksSmoothingCalculatorOptions_OneEuroFilter_default_instance_;
class LandmarksSmoothingCalculatorOptions_VelocityFilter;
struct LandmarksSmoothingCalculatorOptions_VelocityFilterDefaultTypeInternal;
extern LandmarksSmoothingCalculatorOptions_VelocityFilterDefaultTypeInternal _LandmarksSmoothingCalculatorOptions_VelocityFilter_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::LandmarksSmoothingCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::LandmarksSmoothingCalculatorOptions>(Arena*);
template<> ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* Arena::CreateMaybeMessage<::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter>(Arena*);
template<> ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* Arena::CreateMaybeMessage<::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter>(Arena*);
template<> ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* Arena::CreateMaybeMessage<::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class LandmarksSmoothingCalculatorOptions_NoFilter final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mediapipe.LandmarksSmoothingCalculatorOptions.NoFilter) */ {
 public:
  inline LandmarksSmoothingCalculatorOptions_NoFilter() : LandmarksSmoothingCalculatorOptions_NoFilter(nullptr) {}
  explicit constexpr LandmarksSmoothingCalculatorOptions_NoFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LandmarksSmoothingCalculatorOptions_NoFilter(const LandmarksSmoothingCalculatorOptions_NoFilter& from);
  LandmarksSmoothingCalculatorOptions_NoFilter(LandmarksSmoothingCalculatorOptions_NoFilter&& from) noexcept
    : LandmarksSmoothingCalculatorOptions_NoFilter() {
    *this = ::std::move(from);
  }

  inline LandmarksSmoothingCalculatorOptions_NoFilter& operator=(const LandmarksSmoothingCalculatorOptions_NoFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarksSmoothingCalculatorOptions_NoFilter& operator=(LandmarksSmoothingCalculatorOptions_NoFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LandmarksSmoothingCalculatorOptions_NoFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LandmarksSmoothingCalculatorOptions_NoFilter* internal_default_instance() {
    return reinterpret_cast<const LandmarksSmoothingCalculatorOptions_NoFilter*>(
               &_LandmarksSmoothingCalculatorOptions_NoFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LandmarksSmoothingCalculatorOptions_NoFilter& a, LandmarksSmoothingCalculatorOptions_NoFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarksSmoothingCalculatorOptions_NoFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandmarksSmoothingCalculatorOptions_NoFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LandmarksSmoothingCalculatorOptions_NoFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LandmarksSmoothingCalculatorOptions_NoFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LandmarksSmoothingCalculatorOptions_NoFilter& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LandmarksSmoothingCalculatorOptions_NoFilter& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LandmarksSmoothingCalculatorOptions.NoFilter";
  }
  protected:
  explicit LandmarksSmoothingCalculatorOptions_NoFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mediapipe.LandmarksSmoothingCalculatorOptions.NoFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class LandmarksSmoothingCalculatorOptions_VelocityFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter) */ {
 public:
  inline LandmarksSmoothingCalculatorOptions_VelocityFilter() : LandmarksSmoothingCalculatorOptions_VelocityFilter(nullptr) {}
  ~LandmarksSmoothingCalculatorOptions_VelocityFilter() override;
  explicit constexpr LandmarksSmoothingCalculatorOptions_VelocityFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LandmarksSmoothingCalculatorOptions_VelocityFilter(const LandmarksSmoothingCalculatorOptions_VelocityFilter& from);
  LandmarksSmoothingCalculatorOptions_VelocityFilter(LandmarksSmoothingCalculatorOptions_VelocityFilter&& from) noexcept
    : LandmarksSmoothingCalculatorOptions_VelocityFilter() {
    *this = ::std::move(from);
  }

  inline LandmarksSmoothingCalculatorOptions_VelocityFilter& operator=(const LandmarksSmoothingCalculatorOptions_VelocityFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarksSmoothingCalculatorOptions_VelocityFilter& operator=(LandmarksSmoothingCalculatorOptions_VelocityFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LandmarksSmoothingCalculatorOptions_VelocityFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LandmarksSmoothingCalculatorOptions_VelocityFilter* internal_default_instance() {
    return reinterpret_cast<const LandmarksSmoothingCalculatorOptions_VelocityFilter*>(
               &_LandmarksSmoothingCalculatorOptions_VelocityFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LandmarksSmoothingCalculatorOptions_VelocityFilter& a, LandmarksSmoothingCalculatorOptions_VelocityFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarksSmoothingCalculatorOptions_VelocityFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandmarksSmoothingCalculatorOptions_VelocityFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LandmarksSmoothingCalculatorOptions_VelocityFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LandmarksSmoothingCalculatorOptions_VelocityFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LandmarksSmoothingCalculatorOptions_VelocityFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LandmarksSmoothingCalculatorOptions_VelocityFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandmarksSmoothingCalculatorOptions_VelocityFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter";
  }
  protected:
  explicit LandmarksSmoothingCalculatorOptions_VelocityFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisableValueScalingFieldNumber = 4,
    kMinAllowedObjectScaleFieldNumber = 3,
    kWindowSizeFieldNumber = 1,
    kVelocityScaleFieldNumber = 2,
  };
  // optional bool disable_value_scaling = 4 [default = false];
  bool has_disable_value_scaling() const;
  private:
  bool _internal_has_disable_value_scaling() const;
  public:
  void clear_disable_value_scaling();
  bool disable_value_scaling() const;
  void set_disable_value_scaling(bool value);
  private:
  bool _internal_disable_value_scaling() const;
  void _internal_set_disable_value_scaling(bool value);
  public:

  // optional float min_allowed_object_scale = 3 [default = 1e-06];
  bool has_min_allowed_object_scale() const;
  private:
  bool _internal_has_min_allowed_object_scale() const;
  public:
  void clear_min_allowed_object_scale();
  float min_allowed_object_scale() const;
  void set_min_allowed_object_scale(float value);
  private:
  float _internal_min_allowed_object_scale() const;
  void _internal_set_min_allowed_object_scale(float value);
  public:

  // optional int32 window_size = 1 [default = 5];
  bool has_window_size() const;
  private:
  bool _internal_has_window_size() const;
  public:
  void clear_window_size();
  int32_t window_size() const;
  void set_window_size(int32_t value);
  private:
  int32_t _internal_window_size() const;
  void _internal_set_window_size(int32_t value);
  public:

  // optional float velocity_scale = 2 [default = 10];
  bool has_velocity_scale() const;
  private:
  bool _internal_has_velocity_scale() const;
  public:
  void clear_velocity_scale();
  float velocity_scale() const;
  void set_velocity_scale(float value);
  private:
  float _internal_velocity_scale() const;
  void _internal_set_velocity_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool disable_value_scaling_;
  float min_allowed_object_scale_;
  int32_t window_size_;
  float velocity_scale_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class LandmarksSmoothingCalculatorOptions_OneEuroFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter) */ {
 public:
  inline LandmarksSmoothingCalculatorOptions_OneEuroFilter() : LandmarksSmoothingCalculatorOptions_OneEuroFilter(nullptr) {}
  ~LandmarksSmoothingCalculatorOptions_OneEuroFilter() override;
  explicit constexpr LandmarksSmoothingCalculatorOptions_OneEuroFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LandmarksSmoothingCalculatorOptions_OneEuroFilter(const LandmarksSmoothingCalculatorOptions_OneEuroFilter& from);
  LandmarksSmoothingCalculatorOptions_OneEuroFilter(LandmarksSmoothingCalculatorOptions_OneEuroFilter&& from) noexcept
    : LandmarksSmoothingCalculatorOptions_OneEuroFilter() {
    *this = ::std::move(from);
  }

  inline LandmarksSmoothingCalculatorOptions_OneEuroFilter& operator=(const LandmarksSmoothingCalculatorOptions_OneEuroFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarksSmoothingCalculatorOptions_OneEuroFilter& operator=(LandmarksSmoothingCalculatorOptions_OneEuroFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LandmarksSmoothingCalculatorOptions_OneEuroFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LandmarksSmoothingCalculatorOptions_OneEuroFilter* internal_default_instance() {
    return reinterpret_cast<const LandmarksSmoothingCalculatorOptions_OneEuroFilter*>(
               &_LandmarksSmoothingCalculatorOptions_OneEuroFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LandmarksSmoothingCalculatorOptions_OneEuroFilter& a, LandmarksSmoothingCalculatorOptions_OneEuroFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarksSmoothingCalculatorOptions_OneEuroFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandmarksSmoothingCalculatorOptions_OneEuroFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LandmarksSmoothingCalculatorOptions_OneEuroFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LandmarksSmoothingCalculatorOptions_OneEuroFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LandmarksSmoothingCalculatorOptions_OneEuroFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LandmarksSmoothingCalculatorOptions_OneEuroFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandmarksSmoothingCalculatorOptions_OneEuroFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter";
  }
  protected:
  explicit LandmarksSmoothingCalculatorOptions_OneEuroFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetaFieldNumber = 3,
    kDisableValueScalingFieldNumber = 6,
    kFrequencyFieldNumber = 1,
    kMinCutoffFieldNumber = 2,
    kDerivateCutoffFieldNumber = 4,
    kMinAllowedObjectScaleFieldNumber = 5,
  };
  // optional float beta = 3 [default = 0];
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // optional bool disable_value_scaling = 6 [default = false];
  bool has_disable_value_scaling() const;
  private:
  bool _internal_has_disable_value_scaling() const;
  public:
  void clear_disable_value_scaling();
  bool disable_value_scaling() const;
  void set_disable_value_scaling(bool value);
  private:
  bool _internal_disable_value_scaling() const;
  void _internal_set_disable_value_scaling(bool value);
  public:

  // optional float frequency = 1 [default = 30];
  bool has_frequency() const;
  private:
  bool _internal_has_frequency() const;
  public:
  void clear_frequency();
  float frequency() const;
  void set_frequency(float value);
  private:
  float _internal_frequency() const;
  void _internal_set_frequency(float value);
  public:

  // optional float min_cutoff = 2 [default = 1];
  bool has_min_cutoff() const;
  private:
  bool _internal_has_min_cutoff() const;
  public:
  void clear_min_cutoff();
  float min_cutoff() const;
  void set_min_cutoff(float value);
  private:
  float _internal_min_cutoff() const;
  void _internal_set_min_cutoff(float value);
  public:

  // optional float derivate_cutoff = 4 [default = 1];
  bool has_derivate_cutoff() const;
  private:
  bool _internal_has_derivate_cutoff() const;
  public:
  void clear_derivate_cutoff();
  float derivate_cutoff() const;
  void set_derivate_cutoff(float value);
  private:
  float _internal_derivate_cutoff() const;
  void _internal_set_derivate_cutoff(float value);
  public:

  // optional float min_allowed_object_scale = 5 [default = 1e-06];
  bool has_min_allowed_object_scale() const;
  private:
  bool _internal_has_min_allowed_object_scale() const;
  public:
  void clear_min_allowed_object_scale();
  float min_allowed_object_scale() const;
  void set_min_allowed_object_scale(float value);
  private:
  float _internal_min_allowed_object_scale() const;
  void _internal_set_min_allowed_object_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float beta_;
  bool disable_value_scaling_;
  float frequency_;
  float min_cutoff_;
  float derivate_cutoff_;
  float min_allowed_object_scale_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class LandmarksSmoothingCalculatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LandmarksSmoothingCalculatorOptions) */ {
 public:
  inline LandmarksSmoothingCalculatorOptions() : LandmarksSmoothingCalculatorOptions(nullptr) {}
  ~LandmarksSmoothingCalculatorOptions() override;
  explicit constexpr LandmarksSmoothingCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LandmarksSmoothingCalculatorOptions(const LandmarksSmoothingCalculatorOptions& from);
  LandmarksSmoothingCalculatorOptions(LandmarksSmoothingCalculatorOptions&& from) noexcept
    : LandmarksSmoothingCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline LandmarksSmoothingCalculatorOptions& operator=(const LandmarksSmoothingCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarksSmoothingCalculatorOptions& operator=(LandmarksSmoothingCalculatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LandmarksSmoothingCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  enum FilterOptionsCase {
    kNoFilter = 1,
    kVelocityFilter = 2,
    kOneEuroFilter = 3,
    FILTER_OPTIONS_NOT_SET = 0,
  };

  static inline const LandmarksSmoothingCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const LandmarksSmoothingCalculatorOptions*>(
               &_LandmarksSmoothingCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LandmarksSmoothingCalculatorOptions& a, LandmarksSmoothingCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarksSmoothingCalculatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandmarksSmoothingCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LandmarksSmoothingCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LandmarksSmoothingCalculatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LandmarksSmoothingCalculatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LandmarksSmoothingCalculatorOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandmarksSmoothingCalculatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LandmarksSmoothingCalculatorOptions";
  }
  protected:
  explicit LandmarksSmoothingCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LandmarksSmoothingCalculatorOptions_NoFilter NoFilter;
  typedef LandmarksSmoothingCalculatorOptions_VelocityFilter VelocityFilter;
  typedef LandmarksSmoothingCalculatorOptions_OneEuroFilter OneEuroFilter;

  // accessors -------------------------------------------------------

  enum : int {
    kNoFilterFieldNumber = 1,
    kVelocityFilterFieldNumber = 2,
    kOneEuroFilterFieldNumber = 3,
  };
  // .mediapipe.LandmarksSmoothingCalculatorOptions.NoFilter no_filter = 1;
  bool has_no_filter() const;
  private:
  bool _internal_has_no_filter() const;
  public:
  void clear_no_filter();
  const ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter& no_filter() const;
  PROTOBUF_NODISCARD ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* release_no_filter();
  ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* mutable_no_filter();
  void set_allocated_no_filter(::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* no_filter);
  private:
  const ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter& _internal_no_filter() const;
  ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* _internal_mutable_no_filter();
  public:
  void unsafe_arena_set_allocated_no_filter(
      ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* no_filter);
  ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* unsafe_arena_release_no_filter();

  // .mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter velocity_filter = 2;
  bool has_velocity_filter() const;
  private:
  bool _internal_has_velocity_filter() const;
  public:
  void clear_velocity_filter();
  const ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter& velocity_filter() const;
  PROTOBUF_NODISCARD ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* release_velocity_filter();
  ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* mutable_velocity_filter();
  void set_allocated_velocity_filter(::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* velocity_filter);
  private:
  const ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter& _internal_velocity_filter() const;
  ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* _internal_mutable_velocity_filter();
  public:
  void unsafe_arena_set_allocated_velocity_filter(
      ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* velocity_filter);
  ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* unsafe_arena_release_velocity_filter();

  // .mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter one_euro_filter = 3;
  bool has_one_euro_filter() const;
  private:
  bool _internal_has_one_euro_filter() const;
  public:
  void clear_one_euro_filter();
  const ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter& one_euro_filter() const;
  PROTOBUF_NODISCARD ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* release_one_euro_filter();
  ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* mutable_one_euro_filter();
  void set_allocated_one_euro_filter(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* one_euro_filter);
  private:
  const ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter& _internal_one_euro_filter() const;
  ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* _internal_mutable_one_euro_filter();
  public:
  void unsafe_arena_set_allocated_one_euro_filter(
      ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* one_euro_filter);
  ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* unsafe_arena_release_one_euro_filter();

  void clear_filter_options();
  FilterOptionsCase filter_options_case() const;
  static const int kExtFieldNumber = 325671429;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::LandmarksSmoothingCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.LandmarksSmoothingCalculatorOptions)
 private:
  class _Internal;
  void set_has_no_filter();
  void set_has_velocity_filter();
  void set_has_one_euro_filter();

  inline bool has_filter_options() const;
  inline void clear_has_filter_options();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FilterOptionsUnion {
    constexpr FilterOptionsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* no_filter_;
    ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* velocity_filter_;
    ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* one_euro_filter_;
  } filter_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LandmarksSmoothingCalculatorOptions_NoFilter

// -------------------------------------------------------------------

// LandmarksSmoothingCalculatorOptions_VelocityFilter

// optional int32 window_size = 1 [default = 5];
inline bool LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_has_window_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LandmarksSmoothingCalculatorOptions_VelocityFilter::has_window_size() const {
  return _internal_has_window_size();
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::clear_window_size() {
  window_size_ = 5;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_window_size() const {
  return window_size_;
}
inline int32_t LandmarksSmoothingCalculatorOptions_VelocityFilter::window_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter.window_size)
  return _internal_window_size();
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_set_window_size(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  window_size_ = value;
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::set_window_size(int32_t value) {
  _internal_set_window_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter.window_size)
}

// optional float velocity_scale = 2 [default = 10];
inline bool LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_has_velocity_scale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LandmarksSmoothingCalculatorOptions_VelocityFilter::has_velocity_scale() const {
  return _internal_has_velocity_scale();
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::clear_velocity_scale() {
  velocity_scale_ = 10;
  _has_bits_[0] &= ~0x00000008u;
}
inline float LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_velocity_scale() const {
  return velocity_scale_;
}
inline float LandmarksSmoothingCalculatorOptions_VelocityFilter::velocity_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter.velocity_scale)
  return _internal_velocity_scale();
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_set_velocity_scale(float value) {
  _has_bits_[0] |= 0x00000008u;
  velocity_scale_ = value;
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::set_velocity_scale(float value) {
  _internal_set_velocity_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter.velocity_scale)
}

// optional float min_allowed_object_scale = 3 [default = 1e-06];
inline bool LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_has_min_allowed_object_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LandmarksSmoothingCalculatorOptions_VelocityFilter::has_min_allowed_object_scale() const {
  return _internal_has_min_allowed_object_scale();
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::clear_min_allowed_object_scale() {
  min_allowed_object_scale_ = 1e-06f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_min_allowed_object_scale() const {
  return min_allowed_object_scale_;
}
inline float LandmarksSmoothingCalculatorOptions_VelocityFilter::min_allowed_object_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter.min_allowed_object_scale)
  return _internal_min_allowed_object_scale();
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_set_min_allowed_object_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  min_allowed_object_scale_ = value;
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::set_min_allowed_object_scale(float value) {
  _internal_set_min_allowed_object_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter.min_allowed_object_scale)
}

// optional bool disable_value_scaling = 4 [default = false];
inline bool LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_has_disable_value_scaling() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LandmarksSmoothingCalculatorOptions_VelocityFilter::has_disable_value_scaling() const {
  return _internal_has_disable_value_scaling();
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::clear_disable_value_scaling() {
  disable_value_scaling_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_disable_value_scaling() const {
  return disable_value_scaling_;
}
inline bool LandmarksSmoothingCalculatorOptions_VelocityFilter::disable_value_scaling() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter.disable_value_scaling)
  return _internal_disable_value_scaling();
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::_internal_set_disable_value_scaling(bool value) {
  _has_bits_[0] |= 0x00000001u;
  disable_value_scaling_ = value;
}
inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::set_disable_value_scaling(bool value) {
  _internal_set_disable_value_scaling(value);
  // @@protoc_insertion_point(field_set:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter.disable_value_scaling)
}

// -------------------------------------------------------------------

// LandmarksSmoothingCalculatorOptions_OneEuroFilter

// optional float frequency = 1 [default = 30];
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_has_frequency() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::has_frequency() const {
  return _internal_has_frequency();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::clear_frequency() {
  frequency_ = 30;
  _has_bits_[0] &= ~0x00000004u;
}
inline float LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_frequency() const {
  return frequency_;
}
inline float LandmarksSmoothingCalculatorOptions_OneEuroFilter::frequency() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.frequency)
  return _internal_frequency();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_set_frequency(float value) {
  _has_bits_[0] |= 0x00000004u;
  frequency_ = value;
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::set_frequency(float value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.frequency)
}

// optional float min_cutoff = 2 [default = 1];
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_has_min_cutoff() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::has_min_cutoff() const {
  return _internal_has_min_cutoff();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::clear_min_cutoff() {
  min_cutoff_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_min_cutoff() const {
  return min_cutoff_;
}
inline float LandmarksSmoothingCalculatorOptions_OneEuroFilter::min_cutoff() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.min_cutoff)
  return _internal_min_cutoff();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_set_min_cutoff(float value) {
  _has_bits_[0] |= 0x00000008u;
  min_cutoff_ = value;
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::set_min_cutoff(float value) {
  _internal_set_min_cutoff(value);
  // @@protoc_insertion_point(field_set:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.min_cutoff)
}

// optional float beta = 3 [default = 0];
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_has_beta() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::has_beta() const {
  return _internal_has_beta();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::clear_beta() {
  beta_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_beta() const {
  return beta_;
}
inline float LandmarksSmoothingCalculatorOptions_OneEuroFilter::beta() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.beta)
  return _internal_beta();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_set_beta(float value) {
  _has_bits_[0] |= 0x00000001u;
  beta_ = value;
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.beta)
}

// optional float derivate_cutoff = 4 [default = 1];
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_has_derivate_cutoff() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::has_derivate_cutoff() const {
  return _internal_has_derivate_cutoff();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::clear_derivate_cutoff() {
  derivate_cutoff_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline float LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_derivate_cutoff() const {
  return derivate_cutoff_;
}
inline float LandmarksSmoothingCalculatorOptions_OneEuroFilter::derivate_cutoff() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.derivate_cutoff)
  return _internal_derivate_cutoff();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_set_derivate_cutoff(float value) {
  _has_bits_[0] |= 0x00000010u;
  derivate_cutoff_ = value;
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::set_derivate_cutoff(float value) {
  _internal_set_derivate_cutoff(value);
  // @@protoc_insertion_point(field_set:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.derivate_cutoff)
}

// optional float min_allowed_object_scale = 5 [default = 1e-06];
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_has_min_allowed_object_scale() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::has_min_allowed_object_scale() const {
  return _internal_has_min_allowed_object_scale();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::clear_min_allowed_object_scale() {
  min_allowed_object_scale_ = 1e-06f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_min_allowed_object_scale() const {
  return min_allowed_object_scale_;
}
inline float LandmarksSmoothingCalculatorOptions_OneEuroFilter::min_allowed_object_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.min_allowed_object_scale)
  return _internal_min_allowed_object_scale();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_set_min_allowed_object_scale(float value) {
  _has_bits_[0] |= 0x00000020u;
  min_allowed_object_scale_ = value;
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::set_min_allowed_object_scale(float value) {
  _internal_set_min_allowed_object_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.min_allowed_object_scale)
}

// optional bool disable_value_scaling = 6 [default = false];
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_has_disable_value_scaling() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::has_disable_value_scaling() const {
  return _internal_has_disable_value_scaling();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::clear_disable_value_scaling() {
  disable_value_scaling_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_disable_value_scaling() const {
  return disable_value_scaling_;
}
inline bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::disable_value_scaling() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.disable_value_scaling)
  return _internal_disable_value_scaling();
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::_internal_set_disable_value_scaling(bool value) {
  _has_bits_[0] |= 0x00000002u;
  disable_value_scaling_ = value;
}
inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::set_disable_value_scaling(bool value) {
  _internal_set_disable_value_scaling(value);
  // @@protoc_insertion_point(field_set:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter.disable_value_scaling)
}

// -------------------------------------------------------------------

// LandmarksSmoothingCalculatorOptions

// .mediapipe.LandmarksSmoothingCalculatorOptions.NoFilter no_filter = 1;
inline bool LandmarksSmoothingCalculatorOptions::_internal_has_no_filter() const {
  return filter_options_case() == kNoFilter;
}
inline bool LandmarksSmoothingCalculatorOptions::has_no_filter() const {
  return _internal_has_no_filter();
}
inline void LandmarksSmoothingCalculatorOptions::set_has_no_filter() {
  _oneof_case_[0] = kNoFilter;
}
inline void LandmarksSmoothingCalculatorOptions::clear_no_filter() {
  if (_internal_has_no_filter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete filter_options_.no_filter_;
    }
    clear_has_filter_options();
  }
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* LandmarksSmoothingCalculatorOptions::release_no_filter() {
  // @@protoc_insertion_point(field_release:mediapipe.LandmarksSmoothingCalculatorOptions.no_filter)
  if (_internal_has_no_filter()) {
    clear_has_filter_options();
      ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* temp = filter_options_.no_filter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_options_.no_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter& LandmarksSmoothingCalculatorOptions::_internal_no_filter() const {
  return _internal_has_no_filter()
      ? *filter_options_.no_filter_
      : reinterpret_cast< ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter&>(::mediapipe::_LandmarksSmoothingCalculatorOptions_NoFilter_default_instance_);
}
inline const ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter& LandmarksSmoothingCalculatorOptions::no_filter() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.no_filter)
  return _internal_no_filter();
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* LandmarksSmoothingCalculatorOptions::unsafe_arena_release_no_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.LandmarksSmoothingCalculatorOptions.no_filter)
  if (_internal_has_no_filter()) {
    clear_has_filter_options();
    ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* temp = filter_options_.no_filter_;
    filter_options_.no_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LandmarksSmoothingCalculatorOptions::unsafe_arena_set_allocated_no_filter(::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* no_filter) {
  clear_filter_options();
  if (no_filter) {
    set_has_no_filter();
    filter_options_.no_filter_ = no_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.LandmarksSmoothingCalculatorOptions.no_filter)
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* LandmarksSmoothingCalculatorOptions::_internal_mutable_no_filter() {
  if (!_internal_has_no_filter()) {
    clear_filter_options();
    set_has_no_filter();
    filter_options_.no_filter_ = CreateMaybeMessage< ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter >(GetArenaForAllocation());
  }
  return filter_options_.no_filter_;
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* LandmarksSmoothingCalculatorOptions::mutable_no_filter() {
  ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* _msg = _internal_mutable_no_filter();
  // @@protoc_insertion_point(field_mutable:mediapipe.LandmarksSmoothingCalculatorOptions.no_filter)
  return _msg;
}

// .mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter velocity_filter = 2;
inline bool LandmarksSmoothingCalculatorOptions::_internal_has_velocity_filter() const {
  return filter_options_case() == kVelocityFilter;
}
inline bool LandmarksSmoothingCalculatorOptions::has_velocity_filter() const {
  return _internal_has_velocity_filter();
}
inline void LandmarksSmoothingCalculatorOptions::set_has_velocity_filter() {
  _oneof_case_[0] = kVelocityFilter;
}
inline void LandmarksSmoothingCalculatorOptions::clear_velocity_filter() {
  if (_internal_has_velocity_filter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete filter_options_.velocity_filter_;
    }
    clear_has_filter_options();
  }
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* LandmarksSmoothingCalculatorOptions::release_velocity_filter() {
  // @@protoc_insertion_point(field_release:mediapipe.LandmarksSmoothingCalculatorOptions.velocity_filter)
  if (_internal_has_velocity_filter()) {
    clear_has_filter_options();
      ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* temp = filter_options_.velocity_filter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_options_.velocity_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter& LandmarksSmoothingCalculatorOptions::_internal_velocity_filter() const {
  return _internal_has_velocity_filter()
      ? *filter_options_.velocity_filter_
      : reinterpret_cast< ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter&>(::mediapipe::_LandmarksSmoothingCalculatorOptions_VelocityFilter_default_instance_);
}
inline const ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter& LandmarksSmoothingCalculatorOptions::velocity_filter() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.velocity_filter)
  return _internal_velocity_filter();
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* LandmarksSmoothingCalculatorOptions::unsafe_arena_release_velocity_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.LandmarksSmoothingCalculatorOptions.velocity_filter)
  if (_internal_has_velocity_filter()) {
    clear_has_filter_options();
    ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* temp = filter_options_.velocity_filter_;
    filter_options_.velocity_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LandmarksSmoothingCalculatorOptions::unsafe_arena_set_allocated_velocity_filter(::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* velocity_filter) {
  clear_filter_options();
  if (velocity_filter) {
    set_has_velocity_filter();
    filter_options_.velocity_filter_ = velocity_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.LandmarksSmoothingCalculatorOptions.velocity_filter)
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* LandmarksSmoothingCalculatorOptions::_internal_mutable_velocity_filter() {
  if (!_internal_has_velocity_filter()) {
    clear_filter_options();
    set_has_velocity_filter();
    filter_options_.velocity_filter_ = CreateMaybeMessage< ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter >(GetArenaForAllocation());
  }
  return filter_options_.velocity_filter_;
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* LandmarksSmoothingCalculatorOptions::mutable_velocity_filter() {
  ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* _msg = _internal_mutable_velocity_filter();
  // @@protoc_insertion_point(field_mutable:mediapipe.LandmarksSmoothingCalculatorOptions.velocity_filter)
  return _msg;
}

// .mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter one_euro_filter = 3;
inline bool LandmarksSmoothingCalculatorOptions::_internal_has_one_euro_filter() const {
  return filter_options_case() == kOneEuroFilter;
}
inline bool LandmarksSmoothingCalculatorOptions::has_one_euro_filter() const {
  return _internal_has_one_euro_filter();
}
inline void LandmarksSmoothingCalculatorOptions::set_has_one_euro_filter() {
  _oneof_case_[0] = kOneEuroFilter;
}
inline void LandmarksSmoothingCalculatorOptions::clear_one_euro_filter() {
  if (_internal_has_one_euro_filter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete filter_options_.one_euro_filter_;
    }
    clear_has_filter_options();
  }
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* LandmarksSmoothingCalculatorOptions::release_one_euro_filter() {
  // @@protoc_insertion_point(field_release:mediapipe.LandmarksSmoothingCalculatorOptions.one_euro_filter)
  if (_internal_has_one_euro_filter()) {
    clear_has_filter_options();
      ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* temp = filter_options_.one_euro_filter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_options_.one_euro_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter& LandmarksSmoothingCalculatorOptions::_internal_one_euro_filter() const {
  return _internal_has_one_euro_filter()
      ? *filter_options_.one_euro_filter_
      : reinterpret_cast< ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter&>(::mediapipe::_LandmarksSmoothingCalculatorOptions_OneEuroFilter_default_instance_);
}
inline const ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter& LandmarksSmoothingCalculatorOptions::one_euro_filter() const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarksSmoothingCalculatorOptions.one_euro_filter)
  return _internal_one_euro_filter();
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* LandmarksSmoothingCalculatorOptions::unsafe_arena_release_one_euro_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.LandmarksSmoothingCalculatorOptions.one_euro_filter)
  if (_internal_has_one_euro_filter()) {
    clear_has_filter_options();
    ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* temp = filter_options_.one_euro_filter_;
    filter_options_.one_euro_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LandmarksSmoothingCalculatorOptions::unsafe_arena_set_allocated_one_euro_filter(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* one_euro_filter) {
  clear_filter_options();
  if (one_euro_filter) {
    set_has_one_euro_filter();
    filter_options_.one_euro_filter_ = one_euro_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.LandmarksSmoothingCalculatorOptions.one_euro_filter)
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* LandmarksSmoothingCalculatorOptions::_internal_mutable_one_euro_filter() {
  if (!_internal_has_one_euro_filter()) {
    clear_filter_options();
    set_has_one_euro_filter();
    filter_options_.one_euro_filter_ = CreateMaybeMessage< ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter >(GetArenaForAllocation());
  }
  return filter_options_.one_euro_filter_;
}
inline ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* LandmarksSmoothingCalculatorOptions::mutable_one_euro_filter() {
  ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* _msg = _internal_mutable_one_euro_filter();
  // @@protoc_insertion_point(field_mutable:mediapipe.LandmarksSmoothingCalculatorOptions.one_euro_filter)
  return _msg;
}

inline bool LandmarksSmoothingCalculatorOptions::has_filter_options() const {
  return filter_options_case() != FILTER_OPTIONS_NOT_SET;
}
inline void LandmarksSmoothingCalculatorOptions::clear_has_filter_options() {
  _oneof_case_[0] = FILTER_OPTIONS_NOT_SET;
}
inline LandmarksSmoothingCalculatorOptions::FilterOptionsCase LandmarksSmoothingCalculatorOptions::filter_options_case() const {
  return LandmarksSmoothingCalculatorOptions::FilterOptionsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto
