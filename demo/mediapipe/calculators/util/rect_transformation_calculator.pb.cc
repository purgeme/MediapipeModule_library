// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/util/rect_transformation_calculator.proto

#include "mediapipe/calculators/util/rect_transformation_calculator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr RectTransformationCalculatorOptions::RectTransformationCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rotation_(0)
  , rotation_degrees_(0)
  , shift_x_(0)
  , shift_y_(0)
  , square_long_(false)
  , square_short_(false)
  , scale_x_(1)
  , scale_y_(1){}
struct RectTransformationCalculatorOptionsDefaultTypeInternal {
  constexpr RectTransformationCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RectTransformationCalculatorOptionsDefaultTypeInternal() {}
  union {
    RectTransformationCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RectTransformationCalculatorOptionsDefaultTypeInternal _RectTransformationCalculatorOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto = nullptr;

const uint32_t TableStruct_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectTransformationCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectTransformationCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectTransformationCalculatorOptions, scale_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectTransformationCalculatorOptions, scale_y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectTransformationCalculatorOptions, rotation_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectTransformationCalculatorOptions, rotation_degrees_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectTransformationCalculatorOptions, shift_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectTransformationCalculatorOptions, shift_y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectTransformationCalculatorOptions, square_long_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectTransformationCalculatorOptions, square_short_),
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::mediapipe::RectTransformationCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RectTransformationCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\?mediapipe/calculators/util/rect_transf"
  "ormation_calculator.proto\022\tmediapipe\032$me"
  "diapipe/framework/calculator.proto\"\244\002\n#R"
  "ectTransformationCalculatorOptions\022\022\n\007sc"
  "ale_x\030\001 \001(\002:\0011\022\022\n\007scale_y\030\002 \001(\002:\0011\022\020\n\010ro"
  "tation\030\003 \001(\002\022\030\n\020rotation_degrees\030\004 \001(\005\022\017"
  "\n\007shift_x\030\005 \001(\002\022\017\n\007shift_y\030\006 \001(\002\022\023\n\013squa"
  "re_long\030\007 \001(\010\022\024\n\014square_short\030\010 \001(\0102\\\n\003e"
  "xt\022\034.mediapipe.CalculatorOptions\030\210\203\205} \001("
  "\0132..mediapipe.RectTransformationCalculat"
  "orOptions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto = {
  false, false, 409, descriptor_table_protodef_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto, "mediapipe/calculators/util/rect_transformation_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto);
namespace mediapipe {

// ===================================================================

class RectTransformationCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<RectTransformationCalculatorOptions>()._has_bits_);
  static void set_has_scale_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_scale_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rotation_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shift_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shift_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_square_long(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_square_short(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

RectTransformationCalculatorOptions::RectTransformationCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediapipe.RectTransformationCalculatorOptions)
}
RectTransformationCalculatorOptions::RectTransformationCalculatorOptions(const RectTransformationCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rotation_, &from.rotation_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_y_) -
    reinterpret_cast<char*>(&rotation_)) + sizeof(scale_y_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RectTransformationCalculatorOptions)
}

inline void RectTransformationCalculatorOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rotation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&square_short_) -
    reinterpret_cast<char*>(&rotation_)) + sizeof(square_short_));
scale_x_ = 1;
scale_y_ = 1;
}

RectTransformationCalculatorOptions::~RectTransformationCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.RectTransformationCalculatorOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RectTransformationCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RectTransformationCalculatorOptions::ArenaDtor(void* object) {
  RectTransformationCalculatorOptions* _this = reinterpret_cast< RectTransformationCalculatorOptions* >(object);
  (void)_this;
}
void RectTransformationCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RectTransformationCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RectTransformationCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RectTransformationCalculatorOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rotation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&square_short_) -
        reinterpret_cast<char*>(&rotation_)) + sizeof(square_short_));
    scale_x_ = 1;
    scale_y_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RectTransformationCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float scale_x = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_scale_x(&has_bits);
          scale_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float scale_y = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale_y(&has_bits);
          scale_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_rotation(&has_bits);
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rotation_degrees = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rotation_degrees(&has_bits);
          rotation_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float shift_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_shift_x(&has_bits);
          shift_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float shift_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_shift_y(&has_bits);
          shift_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool square_long = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_square_long(&has_bits);
          square_long_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool square_short = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_square_short(&has_bits);
          square_short_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RectTransformationCalculatorOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RectTransformationCalculatorOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale_x = 1 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_scale_x(), target);
  }

  // optional float scale_y = 2 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale_y(), target);
  }

  // optional float rotation = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_rotation(), target);
  }

  // optional int32 rotation_degrees = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rotation_degrees(), target);
  }

  // optional float shift_x = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_shift_x(), target);
  }

  // optional float shift_y = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_shift_y(), target);
  }

  // optional bool square_long = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_square_long(), target);
  }

  // optional bool square_short = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_square_short(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RectTransformationCalculatorOptions)
  return target;
}

size_t RectTransformationCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RectTransformationCalculatorOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float rotation = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 rotation_degrees = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rotation_degrees());
    }

    // optional float shift_x = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float shift_y = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool square_long = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool square_short = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float scale_x = 1 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float scale_y = 2 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RectTransformationCalculatorOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RectTransformationCalculatorOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RectTransformationCalculatorOptions::GetClassData() const { return &_class_data_; }

void RectTransformationCalculatorOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RectTransformationCalculatorOptions *>(to)->MergeFrom(
      static_cast<const RectTransformationCalculatorOptions &>(from));
}


void RectTransformationCalculatorOptions::MergeFrom(const RectTransformationCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RectTransformationCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rotation_ = from.rotation_;
    }
    if (cached_has_bits & 0x00000002u) {
      rotation_degrees_ = from.rotation_degrees_;
    }
    if (cached_has_bits & 0x00000004u) {
      shift_x_ = from.shift_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      shift_y_ = from.shift_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      square_long_ = from.square_long_;
    }
    if (cached_has_bits & 0x00000020u) {
      square_short_ = from.square_short_;
    }
    if (cached_has_bits & 0x00000040u) {
      scale_x_ = from.scale_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      scale_y_ = from.scale_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RectTransformationCalculatorOptions::CopyFrom(const RectTransformationCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RectTransformationCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectTransformationCalculatorOptions::IsInitialized() const {
  return true;
}

void RectTransformationCalculatorOptions::InternalSwap(RectTransformationCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectTransformationCalculatorOptions, square_short_)
      + sizeof(RectTransformationCalculatorOptions::square_short_)
      - PROTOBUF_FIELD_OFFSET(RectTransformationCalculatorOptions, rotation_)>(
          reinterpret_cast<char*>(&rotation_),
          reinterpret_cast<char*>(&other->rotation_));
  swap(scale_x_, other->scale_x_);
  swap(scale_y_, other->scale_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RectTransformationCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2futil_2frect_5ftransformation_5fcalculator_2eproto[0]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int RectTransformationCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::RectTransformationCalculatorOptions >, 11, false >
  RectTransformationCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::RectTransformationCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::RectTransformationCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::RectTransformationCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RectTransformationCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
