// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/util/annotation_overlay_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
#include "mediapipe/util/color.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto;
namespace mediapipe {
class AnnotationOverlayCalculatorOptions;
struct AnnotationOverlayCalculatorOptionsDefaultTypeInternal;
extern AnnotationOverlayCalculatorOptionsDefaultTypeInternal _AnnotationOverlayCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::AnnotationOverlayCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::AnnotationOverlayCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class AnnotationOverlayCalculatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.AnnotationOverlayCalculatorOptions) */ {
 public:
  inline AnnotationOverlayCalculatorOptions() : AnnotationOverlayCalculatorOptions(nullptr) {}
  ~AnnotationOverlayCalculatorOptions() override;
  explicit constexpr AnnotationOverlayCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnnotationOverlayCalculatorOptions(const AnnotationOverlayCalculatorOptions& from);
  AnnotationOverlayCalculatorOptions(AnnotationOverlayCalculatorOptions&& from) noexcept
    : AnnotationOverlayCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline AnnotationOverlayCalculatorOptions& operator=(const AnnotationOverlayCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotationOverlayCalculatorOptions& operator=(AnnotationOverlayCalculatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnnotationOverlayCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnnotationOverlayCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const AnnotationOverlayCalculatorOptions*>(
               &_AnnotationOverlayCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnnotationOverlayCalculatorOptions& a, AnnotationOverlayCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotationOverlayCalculatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotationOverlayCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnnotationOverlayCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnnotationOverlayCalculatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnnotationOverlayCalculatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnnotationOverlayCalculatorOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotationOverlayCalculatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.AnnotationOverlayCalculatorOptions";
  }
  protected:
  explicit AnnotationOverlayCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanvasColorFieldNumber = 4,
    kFlipTextVerticallyFieldNumber = 5,
    kCanvasWidthPxFieldNumber = 2,
    kCanvasHeightPxFieldNumber = 3,
    kGpuUsesTopLeftOriginFieldNumber = 6,
    kGpuScaleFactorFieldNumber = 7,
  };
  // optional .mediapipe.Color canvas_color = 4;
  bool has_canvas_color() const;
  private:
  bool _internal_has_canvas_color() const;
  public:
  void clear_canvas_color();
  const ::mediapipe::Color& canvas_color() const;
  PROTOBUF_NODISCARD ::mediapipe::Color* release_canvas_color();
  ::mediapipe::Color* mutable_canvas_color();
  void set_allocated_canvas_color(::mediapipe::Color* canvas_color);
  private:
  const ::mediapipe::Color& _internal_canvas_color() const;
  ::mediapipe::Color* _internal_mutable_canvas_color();
  public:
  void unsafe_arena_set_allocated_canvas_color(
      ::mediapipe::Color* canvas_color);
  ::mediapipe::Color* unsafe_arena_release_canvas_color();

  // optional bool flip_text_vertically = 5 [default = false];
  bool has_flip_text_vertically() const;
  private:
  bool _internal_has_flip_text_vertically() const;
  public:
  void clear_flip_text_vertically();
  bool flip_text_vertically() const;
  void set_flip_text_vertically(bool value);
  private:
  bool _internal_flip_text_vertically() const;
  void _internal_set_flip_text_vertically(bool value);
  public:

  // optional int32 canvas_width_px = 2 [default = 1920];
  bool has_canvas_width_px() const;
  private:
  bool _internal_has_canvas_width_px() const;
  public:
  void clear_canvas_width_px();
  int32_t canvas_width_px() const;
  void set_canvas_width_px(int32_t value);
  private:
  int32_t _internal_canvas_width_px() const;
  void _internal_set_canvas_width_px(int32_t value);
  public:

  // optional int32 canvas_height_px = 3 [default = 1080];
  bool has_canvas_height_px() const;
  private:
  bool _internal_has_canvas_height_px() const;
  public:
  void clear_canvas_height_px();
  int32_t canvas_height_px() const;
  void set_canvas_height_px(int32_t value);
  private:
  int32_t _internal_canvas_height_px() const;
  void _internal_set_canvas_height_px(int32_t value);
  public:

  // optional bool gpu_uses_top_left_origin = 6 [default = true];
  bool has_gpu_uses_top_left_origin() const;
  private:
  bool _internal_has_gpu_uses_top_left_origin() const;
  public:
  void clear_gpu_uses_top_left_origin();
  bool gpu_uses_top_left_origin() const;
  void set_gpu_uses_top_left_origin(bool value);
  private:
  bool _internal_gpu_uses_top_left_origin() const;
  void _internal_set_gpu_uses_top_left_origin(bool value);
  public:

  // optional float gpu_scale_factor = 7 [default = 1];
  bool has_gpu_scale_factor() const;
  private:
  bool _internal_has_gpu_scale_factor() const;
  public:
  void clear_gpu_scale_factor();
  float gpu_scale_factor() const;
  void set_gpu_scale_factor(float value);
  private:
  float _internal_gpu_scale_factor() const;
  void _internal_set_gpu_scale_factor(float value);
  public:

  static const int kExtFieldNumber = 250607623;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::AnnotationOverlayCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.AnnotationOverlayCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::Color* canvas_color_;
  bool flip_text_vertically_;
  int32_t canvas_width_px_;
  int32_t canvas_height_px_;
  bool gpu_uses_top_left_origin_;
  float gpu_scale_factor_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnnotationOverlayCalculatorOptions

// optional int32 canvas_width_px = 2 [default = 1920];
inline bool AnnotationOverlayCalculatorOptions::_internal_has_canvas_width_px() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AnnotationOverlayCalculatorOptions::has_canvas_width_px() const {
  return _internal_has_canvas_width_px();
}
inline void AnnotationOverlayCalculatorOptions::clear_canvas_width_px() {
  canvas_width_px_ = 1920;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t AnnotationOverlayCalculatorOptions::_internal_canvas_width_px() const {
  return canvas_width_px_;
}
inline int32_t AnnotationOverlayCalculatorOptions::canvas_width_px() const {
  // @@protoc_insertion_point(field_get:mediapipe.AnnotationOverlayCalculatorOptions.canvas_width_px)
  return _internal_canvas_width_px();
}
inline void AnnotationOverlayCalculatorOptions::_internal_set_canvas_width_px(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  canvas_width_px_ = value;
}
inline void AnnotationOverlayCalculatorOptions::set_canvas_width_px(int32_t value) {
  _internal_set_canvas_width_px(value);
  // @@protoc_insertion_point(field_set:mediapipe.AnnotationOverlayCalculatorOptions.canvas_width_px)
}

// optional int32 canvas_height_px = 3 [default = 1080];
inline bool AnnotationOverlayCalculatorOptions::_internal_has_canvas_height_px() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AnnotationOverlayCalculatorOptions::has_canvas_height_px() const {
  return _internal_has_canvas_height_px();
}
inline void AnnotationOverlayCalculatorOptions::clear_canvas_height_px() {
  canvas_height_px_ = 1080;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t AnnotationOverlayCalculatorOptions::_internal_canvas_height_px() const {
  return canvas_height_px_;
}
inline int32_t AnnotationOverlayCalculatorOptions::canvas_height_px() const {
  // @@protoc_insertion_point(field_get:mediapipe.AnnotationOverlayCalculatorOptions.canvas_height_px)
  return _internal_canvas_height_px();
}
inline void AnnotationOverlayCalculatorOptions::_internal_set_canvas_height_px(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  canvas_height_px_ = value;
}
inline void AnnotationOverlayCalculatorOptions::set_canvas_height_px(int32_t value) {
  _internal_set_canvas_height_px(value);
  // @@protoc_insertion_point(field_set:mediapipe.AnnotationOverlayCalculatorOptions.canvas_height_px)
}

// optional .mediapipe.Color canvas_color = 4;
inline bool AnnotationOverlayCalculatorOptions::_internal_has_canvas_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || canvas_color_ != nullptr);
  return value;
}
inline bool AnnotationOverlayCalculatorOptions::has_canvas_color() const {
  return _internal_has_canvas_color();
}
inline const ::mediapipe::Color& AnnotationOverlayCalculatorOptions::_internal_canvas_color() const {
  const ::mediapipe::Color* p = canvas_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::Color&>(
      ::mediapipe::_Color_default_instance_);
}
inline const ::mediapipe::Color& AnnotationOverlayCalculatorOptions::canvas_color() const {
  // @@protoc_insertion_point(field_get:mediapipe.AnnotationOverlayCalculatorOptions.canvas_color)
  return _internal_canvas_color();
}
inline void AnnotationOverlayCalculatorOptions::unsafe_arena_set_allocated_canvas_color(
    ::mediapipe::Color* canvas_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(canvas_color_);
  }
  canvas_color_ = canvas_color;
  if (canvas_color) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.AnnotationOverlayCalculatorOptions.canvas_color)
}
inline ::mediapipe::Color* AnnotationOverlayCalculatorOptions::release_canvas_color() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::Color* temp = canvas_color_;
  canvas_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::Color* AnnotationOverlayCalculatorOptions::unsafe_arena_release_canvas_color() {
  // @@protoc_insertion_point(field_release:mediapipe.AnnotationOverlayCalculatorOptions.canvas_color)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::Color* temp = canvas_color_;
  canvas_color_ = nullptr;
  return temp;
}
inline ::mediapipe::Color* AnnotationOverlayCalculatorOptions::_internal_mutable_canvas_color() {
  _has_bits_[0] |= 0x00000001u;
  if (canvas_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::Color>(GetArenaForAllocation());
    canvas_color_ = p;
  }
  return canvas_color_;
}
inline ::mediapipe::Color* AnnotationOverlayCalculatorOptions::mutable_canvas_color() {
  ::mediapipe::Color* _msg = _internal_mutable_canvas_color();
  // @@protoc_insertion_point(field_mutable:mediapipe.AnnotationOverlayCalculatorOptions.canvas_color)
  return _msg;
}
inline void AnnotationOverlayCalculatorOptions::set_allocated_canvas_color(::mediapipe::Color* canvas_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(canvas_color_);
  }
  if (canvas_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(canvas_color));
    if (message_arena != submessage_arena) {
      canvas_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, canvas_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  canvas_color_ = canvas_color;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.AnnotationOverlayCalculatorOptions.canvas_color)
}

// optional bool flip_text_vertically = 5 [default = false];
inline bool AnnotationOverlayCalculatorOptions::_internal_has_flip_text_vertically() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AnnotationOverlayCalculatorOptions::has_flip_text_vertically() const {
  return _internal_has_flip_text_vertically();
}
inline void AnnotationOverlayCalculatorOptions::clear_flip_text_vertically() {
  flip_text_vertically_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AnnotationOverlayCalculatorOptions::_internal_flip_text_vertically() const {
  return flip_text_vertically_;
}
inline bool AnnotationOverlayCalculatorOptions::flip_text_vertically() const {
  // @@protoc_insertion_point(field_get:mediapipe.AnnotationOverlayCalculatorOptions.flip_text_vertically)
  return _internal_flip_text_vertically();
}
inline void AnnotationOverlayCalculatorOptions::_internal_set_flip_text_vertically(bool value) {
  _has_bits_[0] |= 0x00000002u;
  flip_text_vertically_ = value;
}
inline void AnnotationOverlayCalculatorOptions::set_flip_text_vertically(bool value) {
  _internal_set_flip_text_vertically(value);
  // @@protoc_insertion_point(field_set:mediapipe.AnnotationOverlayCalculatorOptions.flip_text_vertically)
}

// optional bool gpu_uses_top_left_origin = 6 [default = true];
inline bool AnnotationOverlayCalculatorOptions::_internal_has_gpu_uses_top_left_origin() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AnnotationOverlayCalculatorOptions::has_gpu_uses_top_left_origin() const {
  return _internal_has_gpu_uses_top_left_origin();
}
inline void AnnotationOverlayCalculatorOptions::clear_gpu_uses_top_left_origin() {
  gpu_uses_top_left_origin_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool AnnotationOverlayCalculatorOptions::_internal_gpu_uses_top_left_origin() const {
  return gpu_uses_top_left_origin_;
}
inline bool AnnotationOverlayCalculatorOptions::gpu_uses_top_left_origin() const {
  // @@protoc_insertion_point(field_get:mediapipe.AnnotationOverlayCalculatorOptions.gpu_uses_top_left_origin)
  return _internal_gpu_uses_top_left_origin();
}
inline void AnnotationOverlayCalculatorOptions::_internal_set_gpu_uses_top_left_origin(bool value) {
  _has_bits_[0] |= 0x00000010u;
  gpu_uses_top_left_origin_ = value;
}
inline void AnnotationOverlayCalculatorOptions::set_gpu_uses_top_left_origin(bool value) {
  _internal_set_gpu_uses_top_left_origin(value);
  // @@protoc_insertion_point(field_set:mediapipe.AnnotationOverlayCalculatorOptions.gpu_uses_top_left_origin)
}

// optional float gpu_scale_factor = 7 [default = 1];
inline bool AnnotationOverlayCalculatorOptions::_internal_has_gpu_scale_factor() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AnnotationOverlayCalculatorOptions::has_gpu_scale_factor() const {
  return _internal_has_gpu_scale_factor();
}
inline void AnnotationOverlayCalculatorOptions::clear_gpu_scale_factor() {
  gpu_scale_factor_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float AnnotationOverlayCalculatorOptions::_internal_gpu_scale_factor() const {
  return gpu_scale_factor_;
}
inline float AnnotationOverlayCalculatorOptions::gpu_scale_factor() const {
  // @@protoc_insertion_point(field_get:mediapipe.AnnotationOverlayCalculatorOptions.gpu_scale_factor)
  return _internal_gpu_scale_factor();
}
inline void AnnotationOverlayCalculatorOptions::_internal_set_gpu_scale_factor(float value) {
  _has_bits_[0] |= 0x00000020u;
  gpu_scale_factor_ = value;
}
inline void AnnotationOverlayCalculatorOptions::set_gpu_scale_factor(float value) {
  _internal_set_gpu_scale_factor(value);
  // @@protoc_insertion_point(field_set:mediapipe.AnnotationOverlayCalculatorOptions.gpu_scale_factor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto
