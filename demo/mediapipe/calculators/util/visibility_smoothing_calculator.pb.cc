// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/util/visibility_smoothing_calculator.proto

#include "mediapipe/calculators/util/visibility_smoothing_calculator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr VisibilitySmoothingCalculatorOptions_NoFilter::VisibilitySmoothingCalculatorOptions_NoFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VisibilitySmoothingCalculatorOptions_NoFilterDefaultTypeInternal {
  constexpr VisibilitySmoothingCalculatorOptions_NoFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VisibilitySmoothingCalculatorOptions_NoFilterDefaultTypeInternal() {}
  union {
    VisibilitySmoothingCalculatorOptions_NoFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VisibilitySmoothingCalculatorOptions_NoFilterDefaultTypeInternal _VisibilitySmoothingCalculatorOptions_NoFilter_default_instance_;
constexpr VisibilitySmoothingCalculatorOptions_LowPassFilter::VisibilitySmoothingCalculatorOptions_LowPassFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alpha_(0.1f){}
struct VisibilitySmoothingCalculatorOptions_LowPassFilterDefaultTypeInternal {
  constexpr VisibilitySmoothingCalculatorOptions_LowPassFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VisibilitySmoothingCalculatorOptions_LowPassFilterDefaultTypeInternal() {}
  union {
    VisibilitySmoothingCalculatorOptions_LowPassFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VisibilitySmoothingCalculatorOptions_LowPassFilterDefaultTypeInternal _VisibilitySmoothingCalculatorOptions_LowPassFilter_default_instance_;
constexpr VisibilitySmoothingCalculatorOptions::VisibilitySmoothingCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct VisibilitySmoothingCalculatorOptionsDefaultTypeInternal {
  constexpr VisibilitySmoothingCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VisibilitySmoothingCalculatorOptionsDefaultTypeInternal() {}
  union {
    VisibilitySmoothingCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VisibilitySmoothingCalculatorOptionsDefaultTypeInternal _VisibilitySmoothingCalculatorOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto = nullptr;

const uint32_t TableStruct_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter, alpha_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::VisibilitySmoothingCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mediapipe::VisibilitySmoothingCalculatorOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mediapipe::VisibilitySmoothingCalculatorOptions, filter_options_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter)},
  { 6, 13, -1, sizeof(::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter)},
  { 14, -1, -1, sizeof(::mediapipe::VisibilitySmoothingCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_VisibilitySmoothingCalculatorOptions_NoFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_VisibilitySmoothingCalculatorOptions_LowPassFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_VisibilitySmoothingCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n@mediapipe/calculators/util/visibility_"
  "smoothing_calculator.proto\022\tmediapipe\032,m"
  "ediapipe/framework/calculator_options.pr"
  "oto\"\362\002\n$VisibilitySmoothingCalculatorOpt"
  "ions\022M\n\tno_filter\030\001 \001(\01328.mediapipe.Visi"
  "bilitySmoothingCalculatorOptions.NoFilte"
  "rH\000\022X\n\017low_pass_filter\030\002 \001(\0132=.mediapipe"
  ".VisibilitySmoothingCalculatorOptions.Lo"
  "wPassFilterH\000\032\n\n\010NoFilter\032#\n\rLowPassFilt"
  "er\022\022\n\005alpha\030\001 \001(\002:\0030.12^\n\003ext\022\034.mediapip"
  "e.CalculatorOptions\030\366\247\341\253\001 \001(\0132/.mediapip"
  "e.VisibilitySmoothingCalculatorOptionsB\020"
  "\n\016filter_options"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto = {
  false, false, 496, descriptor_table_protodef_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto, "mediapipe/calculators/util/visibility_smoothing_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto);
namespace mediapipe {

// ===================================================================

class VisibilitySmoothingCalculatorOptions_NoFilter::_Internal {
 public:
};

VisibilitySmoothingCalculatorOptions_NoFilter::VisibilitySmoothingCalculatorOptions_NoFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mediapipe.VisibilitySmoothingCalculatorOptions.NoFilter)
}
VisibilitySmoothingCalculatorOptions_NoFilter::VisibilitySmoothingCalculatorOptions_NoFilter(const VisibilitySmoothingCalculatorOptions_NoFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.VisibilitySmoothingCalculatorOptions.NoFilter)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisibilitySmoothingCalculatorOptions_NoFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisibilitySmoothingCalculatorOptions_NoFilter::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VisibilitySmoothingCalculatorOptions_NoFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto[0]);
}

// ===================================================================

class VisibilitySmoothingCalculatorOptions_LowPassFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<VisibilitySmoothingCalculatorOptions_LowPassFilter>()._has_bits_);
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VisibilitySmoothingCalculatorOptions_LowPassFilter::VisibilitySmoothingCalculatorOptions_LowPassFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter)
}
VisibilitySmoothingCalculatorOptions_LowPassFilter::VisibilitySmoothingCalculatorOptions_LowPassFilter(const VisibilitySmoothingCalculatorOptions_LowPassFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alpha_ = from.alpha_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter)
}

inline void VisibilitySmoothingCalculatorOptions_LowPassFilter::SharedCtor() {
alpha_ = 0.1f;
}

VisibilitySmoothingCalculatorOptions_LowPassFilter::~VisibilitySmoothingCalculatorOptions_LowPassFilter() {
  // @@protoc_insertion_point(destructor:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VisibilitySmoothingCalculatorOptions_LowPassFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VisibilitySmoothingCalculatorOptions_LowPassFilter::ArenaDtor(void* object) {
  VisibilitySmoothingCalculatorOptions_LowPassFilter* _this = reinterpret_cast< VisibilitySmoothingCalculatorOptions_LowPassFilter* >(object);
  (void)_this;
}
void VisibilitySmoothingCalculatorOptions_LowPassFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisibilitySmoothingCalculatorOptions_LowPassFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VisibilitySmoothingCalculatorOptions_LowPassFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alpha_ = 0.1f;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisibilitySmoothingCalculatorOptions_LowPassFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float alpha = 1 [default = 0.1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisibilitySmoothingCalculatorOptions_LowPassFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter)
  return target;
}

size_t VisibilitySmoothingCalculatorOptions_LowPassFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float alpha = 1 [default = 0.1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisibilitySmoothingCalculatorOptions_LowPassFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VisibilitySmoothingCalculatorOptions_LowPassFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisibilitySmoothingCalculatorOptions_LowPassFilter::GetClassData() const { return &_class_data_; }

void VisibilitySmoothingCalculatorOptions_LowPassFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VisibilitySmoothingCalculatorOptions_LowPassFilter *>(to)->MergeFrom(
      static_cast<const VisibilitySmoothingCalculatorOptions_LowPassFilter &>(from));
}


void VisibilitySmoothingCalculatorOptions_LowPassFilter::MergeFrom(const VisibilitySmoothingCalculatorOptions_LowPassFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_alpha()) {
    _internal_set_alpha(from._internal_alpha());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisibilitySmoothingCalculatorOptions_LowPassFilter::CopyFrom(const VisibilitySmoothingCalculatorOptions_LowPassFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisibilitySmoothingCalculatorOptions_LowPassFilter::IsInitialized() const {
  return true;
}

void VisibilitySmoothingCalculatorOptions_LowPassFilter::InternalSwap(VisibilitySmoothingCalculatorOptions_LowPassFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(alpha_, other->alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisibilitySmoothingCalculatorOptions_LowPassFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto[1]);
}

// ===================================================================

class VisibilitySmoothingCalculatorOptions::_Internal {
 public:
  static const ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter& no_filter(const VisibilitySmoothingCalculatorOptions* msg);
  static const ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter& low_pass_filter(const VisibilitySmoothingCalculatorOptions* msg);
};

const ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter&
VisibilitySmoothingCalculatorOptions::_Internal::no_filter(const VisibilitySmoothingCalculatorOptions* msg) {
  return *msg->filter_options_.no_filter_;
}
const ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter&
VisibilitySmoothingCalculatorOptions::_Internal::low_pass_filter(const VisibilitySmoothingCalculatorOptions* msg) {
  return *msg->filter_options_.low_pass_filter_;
}
void VisibilitySmoothingCalculatorOptions::set_allocated_no_filter(::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* no_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_filter_options();
  if (no_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter>::GetOwningArena(no_filter);
    if (message_arena != submessage_arena) {
      no_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_filter, submessage_arena);
    }
    set_has_no_filter();
    filter_options_.no_filter_ = no_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:mediapipe.VisibilitySmoothingCalculatorOptions.no_filter)
}
void VisibilitySmoothingCalculatorOptions::set_allocated_low_pass_filter(::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* low_pass_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_filter_options();
  if (low_pass_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter>::GetOwningArena(low_pass_filter);
    if (message_arena != submessage_arena) {
      low_pass_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_pass_filter, submessage_arena);
    }
    set_has_low_pass_filter();
    filter_options_.low_pass_filter_ = low_pass_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:mediapipe.VisibilitySmoothingCalculatorOptions.low_pass_filter)
}
VisibilitySmoothingCalculatorOptions::VisibilitySmoothingCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediapipe.VisibilitySmoothingCalculatorOptions)
}
VisibilitySmoothingCalculatorOptions::VisibilitySmoothingCalculatorOptions(const VisibilitySmoothingCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_filter_options();
  switch (from.filter_options_case()) {
    case kNoFilter: {
      _internal_mutable_no_filter()->::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter::MergeFrom(from._internal_no_filter());
      break;
    }
    case kLowPassFilter: {
      _internal_mutable_low_pass_filter()->::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter::MergeFrom(from._internal_low_pass_filter());
      break;
    }
    case FILTER_OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mediapipe.VisibilitySmoothingCalculatorOptions)
}

inline void VisibilitySmoothingCalculatorOptions::SharedCtor() {
clear_has_filter_options();
}

VisibilitySmoothingCalculatorOptions::~VisibilitySmoothingCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.VisibilitySmoothingCalculatorOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VisibilitySmoothingCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_filter_options()) {
    clear_filter_options();
  }
}

void VisibilitySmoothingCalculatorOptions::ArenaDtor(void* object) {
  VisibilitySmoothingCalculatorOptions* _this = reinterpret_cast< VisibilitySmoothingCalculatorOptions* >(object);
  (void)_this;
}
void VisibilitySmoothingCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisibilitySmoothingCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VisibilitySmoothingCalculatorOptions::clear_filter_options() {
// @@protoc_insertion_point(one_of_clear_start:mediapipe.VisibilitySmoothingCalculatorOptions)
  switch (filter_options_case()) {
    case kNoFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete filter_options_.no_filter_;
      }
      break;
    }
    case kLowPassFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete filter_options_.low_pass_filter_;
      }
      break;
    }
    case FILTER_OPTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_OPTIONS_NOT_SET;
}


void VisibilitySmoothingCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.VisibilitySmoothingCalculatorOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_filter_options();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisibilitySmoothingCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mediapipe.VisibilitySmoothingCalculatorOptions.NoFilter no_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter low_pass_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_low_pass_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisibilitySmoothingCalculatorOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.VisibilitySmoothingCalculatorOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (filter_options_case()) {
    case kNoFilter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::no_filter(this), target, stream);
      break;
    }
    case kLowPassFilter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::low_pass_filter(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.VisibilitySmoothingCalculatorOptions)
  return target;
}

size_t VisibilitySmoothingCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.VisibilitySmoothingCalculatorOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (filter_options_case()) {
    // .mediapipe.VisibilitySmoothingCalculatorOptions.NoFilter no_filter = 1;
    case kNoFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_options_.no_filter_);
      break;
    }
    // .mediapipe.VisibilitySmoothingCalculatorOptions.LowPassFilter low_pass_filter = 2;
    case kLowPassFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_options_.low_pass_filter_);
      break;
    }
    case FILTER_OPTIONS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisibilitySmoothingCalculatorOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VisibilitySmoothingCalculatorOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisibilitySmoothingCalculatorOptions::GetClassData() const { return &_class_data_; }

void VisibilitySmoothingCalculatorOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VisibilitySmoothingCalculatorOptions *>(to)->MergeFrom(
      static_cast<const VisibilitySmoothingCalculatorOptions &>(from));
}


void VisibilitySmoothingCalculatorOptions::MergeFrom(const VisibilitySmoothingCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.VisibilitySmoothingCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.filter_options_case()) {
    case kNoFilter: {
      _internal_mutable_no_filter()->::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter::MergeFrom(from._internal_no_filter());
      break;
    }
    case kLowPassFilter: {
      _internal_mutable_low_pass_filter()->::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter::MergeFrom(from._internal_low_pass_filter());
      break;
    }
    case FILTER_OPTIONS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisibilitySmoothingCalculatorOptions::CopyFrom(const VisibilitySmoothingCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.VisibilitySmoothingCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisibilitySmoothingCalculatorOptions::IsInitialized() const {
  return true;
}

void VisibilitySmoothingCalculatorOptions::InternalSwap(VisibilitySmoothingCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_options_, other->filter_options_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisibilitySmoothingCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2futil_2fvisibility_5fsmoothing_5fcalculator_2eproto[2]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int VisibilitySmoothingCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::VisibilitySmoothingCalculatorOptions >, 11, false >
  VisibilitySmoothingCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::VisibilitySmoothingCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter* Arena::CreateMaybeMessage< ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::VisibilitySmoothingCalculatorOptions_NoFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter* Arena::CreateMaybeMessage< ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::VisibilitySmoothingCalculatorOptions_LowPassFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::VisibilitySmoothingCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::VisibilitySmoothingCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::VisibilitySmoothingCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
