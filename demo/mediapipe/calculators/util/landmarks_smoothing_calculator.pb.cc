// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/util/landmarks_smoothing_calculator.proto

#include "mediapipe/calculators/util/landmarks_smoothing_calculator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr LandmarksSmoothingCalculatorOptions_NoFilter::LandmarksSmoothingCalculatorOptions_NoFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LandmarksSmoothingCalculatorOptions_NoFilterDefaultTypeInternal {
  constexpr LandmarksSmoothingCalculatorOptions_NoFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LandmarksSmoothingCalculatorOptions_NoFilterDefaultTypeInternal() {}
  union {
    LandmarksSmoothingCalculatorOptions_NoFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LandmarksSmoothingCalculatorOptions_NoFilterDefaultTypeInternal _LandmarksSmoothingCalculatorOptions_NoFilter_default_instance_;
constexpr LandmarksSmoothingCalculatorOptions_VelocityFilter::LandmarksSmoothingCalculatorOptions_VelocityFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disable_value_scaling_(false)
  , min_allowed_object_scale_(1e-06f)
  , window_size_(5)
  , velocity_scale_(10){}
struct LandmarksSmoothingCalculatorOptions_VelocityFilterDefaultTypeInternal {
  constexpr LandmarksSmoothingCalculatorOptions_VelocityFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LandmarksSmoothingCalculatorOptions_VelocityFilterDefaultTypeInternal() {}
  union {
    LandmarksSmoothingCalculatorOptions_VelocityFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LandmarksSmoothingCalculatorOptions_VelocityFilterDefaultTypeInternal _LandmarksSmoothingCalculatorOptions_VelocityFilter_default_instance_;
constexpr LandmarksSmoothingCalculatorOptions_OneEuroFilter::LandmarksSmoothingCalculatorOptions_OneEuroFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beta_(0)
  , disable_value_scaling_(false)
  , frequency_(30)
  , min_cutoff_(1)
  , derivate_cutoff_(1)
  , min_allowed_object_scale_(1e-06f){}
struct LandmarksSmoothingCalculatorOptions_OneEuroFilterDefaultTypeInternal {
  constexpr LandmarksSmoothingCalculatorOptions_OneEuroFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LandmarksSmoothingCalculatorOptions_OneEuroFilterDefaultTypeInternal() {}
  union {
    LandmarksSmoothingCalculatorOptions_OneEuroFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LandmarksSmoothingCalculatorOptions_OneEuroFilterDefaultTypeInternal _LandmarksSmoothingCalculatorOptions_OneEuroFilter_default_instance_;
constexpr LandmarksSmoothingCalculatorOptions::LandmarksSmoothingCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct LandmarksSmoothingCalculatorOptionsDefaultTypeInternal {
  constexpr LandmarksSmoothingCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LandmarksSmoothingCalculatorOptionsDefaultTypeInternal() {}
  union {
    LandmarksSmoothingCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LandmarksSmoothingCalculatorOptionsDefaultTypeInternal _LandmarksSmoothingCalculatorOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto = nullptr;

const uint32_t TableStruct_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter, window_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter, velocity_scale_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter, min_allowed_object_scale_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter, disable_value_scaling_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter, frequency_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter, min_cutoff_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter, beta_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter, derivate_cutoff_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter, min_allowed_object_scale_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter, disable_value_scaling_),
  2,
  3,
  0,
  4,
  5,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarksSmoothingCalculatorOptions, filter_options_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter)},
  { 6, 16, -1, sizeof(::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter)},
  { 20, 32, -1, sizeof(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter)},
  { 38, -1, -1, sizeof(::mediapipe::LandmarksSmoothingCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LandmarksSmoothingCalculatorOptions_NoFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LandmarksSmoothingCalculatorOptions_VelocityFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LandmarksSmoothingCalculatorOptions_OneEuroFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LandmarksSmoothingCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\?mediapipe/calculators/util/landmarks_s"
  "moothing_calculator.proto\022\tmediapipe\032,me"
  "diapipe/framework/calculator_options.pro"
  "to\"\365\005\n#LandmarksSmoothingCalculatorOptio"
  "ns\022L\n\tno_filter\030\001 \001(\01327.mediapipe.Landma"
  "rksSmoothingCalculatorOptions.NoFilterH\000"
  "\022X\n\017velocity_filter\030\002 \001(\0132=.mediapipe.La"
  "ndmarksSmoothingCalculatorOptions.Veloci"
  "tyFilterH\000\022W\n\017one_euro_filter\030\003 \001(\0132<.me"
  "diapipe.LandmarksSmoothingCalculatorOpti"
  "ons.OneEuroFilterH\000\032\n\n\010NoFilter\032\223\001\n\016Velo"
  "cityFilter\022\026\n\013window_size\030\001 \001(\005:\0015\022\032\n\016ve"
  "locity_scale\030\002 \001(\002:\00210\022\'\n\030min_allowed_ob"
  "ject_scale\030\003 \001(\002:\0051e-06\022$\n\025disable_value"
  "_scaling\030\004 \001(\010:\005false\032\271\001\n\rOneEuroFilter\022"
  "\025\n\tfrequency\030\001 \001(\002:\00230\022\025\n\nmin_cutoff\030\002 \001"
  "(\002:\0011\022\017\n\004beta\030\003 \001(\002:\0010\022\032\n\017derivate_cutof"
  "f\030\004 \001(\002:\0011\022\'\n\030min_allowed_object_scale\030\005"
  " \001(\002:\0051e-06\022$\n\025disable_value_scaling\030\006 \001"
  "(\010:\005false2]\n\003ext\022\034.mediapipe.CalculatorO"
  "ptions\030\205\264\245\233\001 \001(\0132..mediapipe.LandmarksSm"
  "oothingCalculatorOptionsB\020\n\016filter_optio"
  "ns"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto = {
  false, false, 882, descriptor_table_protodef_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto, "mediapipe/calculators/util/landmarks_smoothing_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto);
namespace mediapipe {

// ===================================================================

class LandmarksSmoothingCalculatorOptions_NoFilter::_Internal {
 public:
};

LandmarksSmoothingCalculatorOptions_NoFilter::LandmarksSmoothingCalculatorOptions_NoFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mediapipe.LandmarksSmoothingCalculatorOptions.NoFilter)
}
LandmarksSmoothingCalculatorOptions_NoFilter::LandmarksSmoothingCalculatorOptions_NoFilter(const LandmarksSmoothingCalculatorOptions_NoFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.LandmarksSmoothingCalculatorOptions.NoFilter)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LandmarksSmoothingCalculatorOptions_NoFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LandmarksSmoothingCalculatorOptions_NoFilter::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LandmarksSmoothingCalculatorOptions_NoFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto[0]);
}

// ===================================================================

class LandmarksSmoothingCalculatorOptions_VelocityFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<LandmarksSmoothingCalculatorOptions_VelocityFilter>()._has_bits_);
  static void set_has_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_velocity_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_allowed_object_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_disable_value_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LandmarksSmoothingCalculatorOptions_VelocityFilter::LandmarksSmoothingCalculatorOptions_VelocityFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter)
}
LandmarksSmoothingCalculatorOptions_VelocityFilter::LandmarksSmoothingCalculatorOptions_VelocityFilter(const LandmarksSmoothingCalculatorOptions_VelocityFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&disable_value_scaling_, &from.disable_value_scaling_,
    static_cast<size_t>(reinterpret_cast<char*>(&velocity_scale_) -
    reinterpret_cast<char*>(&disable_value_scaling_)) + sizeof(velocity_scale_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter)
}

inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::SharedCtor() {
disable_value_scaling_ = false;
min_allowed_object_scale_ = 1e-06f;
window_size_ = 5;
velocity_scale_ = 10;
}

LandmarksSmoothingCalculatorOptions_VelocityFilter::~LandmarksSmoothingCalculatorOptions_VelocityFilter() {
  // @@protoc_insertion_point(destructor:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LandmarksSmoothingCalculatorOptions_VelocityFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LandmarksSmoothingCalculatorOptions_VelocityFilter::ArenaDtor(void* object) {
  LandmarksSmoothingCalculatorOptions_VelocityFilter* _this = reinterpret_cast< LandmarksSmoothingCalculatorOptions_VelocityFilter* >(object);
  (void)_this;
}
void LandmarksSmoothingCalculatorOptions_VelocityFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandmarksSmoothingCalculatorOptions_VelocityFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LandmarksSmoothingCalculatorOptions_VelocityFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    disable_value_scaling_ = false;
    min_allowed_object_scale_ = 1e-06f;
    window_size_ = 5;
    velocity_scale_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandmarksSmoothingCalculatorOptions_VelocityFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 window_size = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_window_size(&has_bits);
          window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float velocity_scale = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_velocity_scale(&has_bits);
          velocity_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_allowed_object_scale = 3 [default = 1e-06];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_min_allowed_object_scale(&has_bits);
          min_allowed_object_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_value_scaling = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_disable_value_scaling(&has_bits);
          disable_value_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LandmarksSmoothingCalculatorOptions_VelocityFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 window_size = 1 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_window_size(), target);
  }

  // optional float velocity_scale = 2 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_velocity_scale(), target);
  }

  // optional float min_allowed_object_scale = 3 [default = 1e-06];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_allowed_object_scale(), target);
  }

  // optional bool disable_value_scaling = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_disable_value_scaling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter)
  return target;
}

size_t LandmarksSmoothingCalculatorOptions_VelocityFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool disable_value_scaling = 4 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float min_allowed_object_scale = 3 [default = 1e-06];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 window_size = 1 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_window_size());
    }

    // optional float velocity_scale = 2 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LandmarksSmoothingCalculatorOptions_VelocityFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LandmarksSmoothingCalculatorOptions_VelocityFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LandmarksSmoothingCalculatorOptions_VelocityFilter::GetClassData() const { return &_class_data_; }

void LandmarksSmoothingCalculatorOptions_VelocityFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LandmarksSmoothingCalculatorOptions_VelocityFilter *>(to)->MergeFrom(
      static_cast<const LandmarksSmoothingCalculatorOptions_VelocityFilter &>(from));
}


void LandmarksSmoothingCalculatorOptions_VelocityFilter::MergeFrom(const LandmarksSmoothingCalculatorOptions_VelocityFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      disable_value_scaling_ = from.disable_value_scaling_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_allowed_object_scale_ = from.min_allowed_object_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      window_size_ = from.window_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      velocity_scale_ = from.velocity_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LandmarksSmoothingCalculatorOptions_VelocityFilter::CopyFrom(const LandmarksSmoothingCalculatorOptions_VelocityFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarksSmoothingCalculatorOptions_VelocityFilter::IsInitialized() const {
  return true;
}

void LandmarksSmoothingCalculatorOptions_VelocityFilter::InternalSwap(LandmarksSmoothingCalculatorOptions_VelocityFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(disable_value_scaling_, other->disable_value_scaling_);
  swap(min_allowed_object_scale_, other->min_allowed_object_scale_);
  swap(window_size_, other->window_size_);
  swap(velocity_scale_, other->velocity_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarksSmoothingCalculatorOptions_VelocityFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto[1]);
}

// ===================================================================

class LandmarksSmoothingCalculatorOptions_OneEuroFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<LandmarksSmoothingCalculatorOptions_OneEuroFilter>()._has_bits_);
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_cutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_derivate_cutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_allowed_object_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_disable_value_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LandmarksSmoothingCalculatorOptions_OneEuroFilter::LandmarksSmoothingCalculatorOptions_OneEuroFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter)
}
LandmarksSmoothingCalculatorOptions_OneEuroFilter::LandmarksSmoothingCalculatorOptions_OneEuroFilter(const LandmarksSmoothingCalculatorOptions_OneEuroFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&beta_, &from.beta_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_allowed_object_scale_) -
    reinterpret_cast<char*>(&beta_)) + sizeof(min_allowed_object_scale_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter)
}

inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&beta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disable_value_scaling_) -
    reinterpret_cast<char*>(&beta_)) + sizeof(disable_value_scaling_));
frequency_ = 30;
min_cutoff_ = 1;
derivate_cutoff_ = 1;
min_allowed_object_scale_ = 1e-06f;
}

LandmarksSmoothingCalculatorOptions_OneEuroFilter::~LandmarksSmoothingCalculatorOptions_OneEuroFilter() {
  // @@protoc_insertion_point(destructor:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LandmarksSmoothingCalculatorOptions_OneEuroFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LandmarksSmoothingCalculatorOptions_OneEuroFilter::ArenaDtor(void* object) {
  LandmarksSmoothingCalculatorOptions_OneEuroFilter* _this = reinterpret_cast< LandmarksSmoothingCalculatorOptions_OneEuroFilter* >(object);
  (void)_this;
}
void LandmarksSmoothingCalculatorOptions_OneEuroFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandmarksSmoothingCalculatorOptions_OneEuroFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LandmarksSmoothingCalculatorOptions_OneEuroFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&beta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disable_value_scaling_) -
        reinterpret_cast<char*>(&beta_)) + sizeof(disable_value_scaling_));
    frequency_ = 30;
    min_cutoff_ = 1;
    derivate_cutoff_ = 1;
    min_allowed_object_scale_ = 1e-06f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandmarksSmoothingCalculatorOptions_OneEuroFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float frequency = 1 [default = 30];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_frequency(&has_bits);
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_cutoff = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_min_cutoff(&has_bits);
          min_cutoff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float beta = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_beta(&has_bits);
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float derivate_cutoff = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_derivate_cutoff(&has_bits);
          derivate_cutoff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_allowed_object_scale = 5 [default = 1e-06];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_min_allowed_object_scale(&has_bits);
          min_allowed_object_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_value_scaling = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_disable_value_scaling(&has_bits);
          disable_value_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LandmarksSmoothingCalculatorOptions_OneEuroFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float frequency = 1 [default = 30];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_frequency(), target);
  }

  // optional float min_cutoff = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_cutoff(), target);
  }

  // optional float beta = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_beta(), target);
  }

  // optional float derivate_cutoff = 4 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_derivate_cutoff(), target);
  }

  // optional float min_allowed_object_scale = 5 [default = 1e-06];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_min_allowed_object_scale(), target);
  }

  // optional bool disable_value_scaling = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_disable_value_scaling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter)
  return target;
}

size_t LandmarksSmoothingCalculatorOptions_OneEuroFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float beta = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool disable_value_scaling = 6 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float frequency = 1 [default = 30];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float min_cutoff = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float derivate_cutoff = 4 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float min_allowed_object_scale = 5 [default = 1e-06];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LandmarksSmoothingCalculatorOptions_OneEuroFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LandmarksSmoothingCalculatorOptions_OneEuroFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LandmarksSmoothingCalculatorOptions_OneEuroFilter::GetClassData() const { return &_class_data_; }

void LandmarksSmoothingCalculatorOptions_OneEuroFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LandmarksSmoothingCalculatorOptions_OneEuroFilter *>(to)->MergeFrom(
      static_cast<const LandmarksSmoothingCalculatorOptions_OneEuroFilter &>(from));
}


void LandmarksSmoothingCalculatorOptions_OneEuroFilter::MergeFrom(const LandmarksSmoothingCalculatorOptions_OneEuroFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      beta_ = from.beta_;
    }
    if (cached_has_bits & 0x00000002u) {
      disable_value_scaling_ = from.disable_value_scaling_;
    }
    if (cached_has_bits & 0x00000004u) {
      frequency_ = from.frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_cutoff_ = from.min_cutoff_;
    }
    if (cached_has_bits & 0x00000010u) {
      derivate_cutoff_ = from.derivate_cutoff_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_allowed_object_scale_ = from.min_allowed_object_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LandmarksSmoothingCalculatorOptions_OneEuroFilter::CopyFrom(const LandmarksSmoothingCalculatorOptions_OneEuroFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarksSmoothingCalculatorOptions_OneEuroFilter::IsInitialized() const {
  return true;
}

void LandmarksSmoothingCalculatorOptions_OneEuroFilter::InternalSwap(LandmarksSmoothingCalculatorOptions_OneEuroFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LandmarksSmoothingCalculatorOptions_OneEuroFilter, disable_value_scaling_)
      + sizeof(LandmarksSmoothingCalculatorOptions_OneEuroFilter::disable_value_scaling_)
      - PROTOBUF_FIELD_OFFSET(LandmarksSmoothingCalculatorOptions_OneEuroFilter, beta_)>(
          reinterpret_cast<char*>(&beta_),
          reinterpret_cast<char*>(&other->beta_));
  swap(frequency_, other->frequency_);
  swap(min_cutoff_, other->min_cutoff_);
  swap(derivate_cutoff_, other->derivate_cutoff_);
  swap(min_allowed_object_scale_, other->min_allowed_object_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarksSmoothingCalculatorOptions_OneEuroFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto[2]);
}

// ===================================================================

class LandmarksSmoothingCalculatorOptions::_Internal {
 public:
  static const ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter& no_filter(const LandmarksSmoothingCalculatorOptions* msg);
  static const ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter& velocity_filter(const LandmarksSmoothingCalculatorOptions* msg);
  static const ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter& one_euro_filter(const LandmarksSmoothingCalculatorOptions* msg);
};

const ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter&
LandmarksSmoothingCalculatorOptions::_Internal::no_filter(const LandmarksSmoothingCalculatorOptions* msg) {
  return *msg->filter_options_.no_filter_;
}
const ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter&
LandmarksSmoothingCalculatorOptions::_Internal::velocity_filter(const LandmarksSmoothingCalculatorOptions* msg) {
  return *msg->filter_options_.velocity_filter_;
}
const ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter&
LandmarksSmoothingCalculatorOptions::_Internal::one_euro_filter(const LandmarksSmoothingCalculatorOptions* msg) {
  return *msg->filter_options_.one_euro_filter_;
}
void LandmarksSmoothingCalculatorOptions::set_allocated_no_filter(::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* no_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_filter_options();
  if (no_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter>::GetOwningArena(no_filter);
    if (message_arena != submessage_arena) {
      no_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_filter, submessage_arena);
    }
    set_has_no_filter();
    filter_options_.no_filter_ = no_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:mediapipe.LandmarksSmoothingCalculatorOptions.no_filter)
}
void LandmarksSmoothingCalculatorOptions::set_allocated_velocity_filter(::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* velocity_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_filter_options();
  if (velocity_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter>::GetOwningArena(velocity_filter);
    if (message_arena != submessage_arena) {
      velocity_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_filter, submessage_arena);
    }
    set_has_velocity_filter();
    filter_options_.velocity_filter_ = velocity_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:mediapipe.LandmarksSmoothingCalculatorOptions.velocity_filter)
}
void LandmarksSmoothingCalculatorOptions::set_allocated_one_euro_filter(::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* one_euro_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_filter_options();
  if (one_euro_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter>::GetOwningArena(one_euro_filter);
    if (message_arena != submessage_arena) {
      one_euro_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one_euro_filter, submessage_arena);
    }
    set_has_one_euro_filter();
    filter_options_.one_euro_filter_ = one_euro_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:mediapipe.LandmarksSmoothingCalculatorOptions.one_euro_filter)
}
LandmarksSmoothingCalculatorOptions::LandmarksSmoothingCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediapipe.LandmarksSmoothingCalculatorOptions)
}
LandmarksSmoothingCalculatorOptions::LandmarksSmoothingCalculatorOptions(const LandmarksSmoothingCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_filter_options();
  switch (from.filter_options_case()) {
    case kNoFilter: {
      _internal_mutable_no_filter()->::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter::MergeFrom(from._internal_no_filter());
      break;
    }
    case kVelocityFilter: {
      _internal_mutable_velocity_filter()->::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter::MergeFrom(from._internal_velocity_filter());
      break;
    }
    case kOneEuroFilter: {
      _internal_mutable_one_euro_filter()->::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter::MergeFrom(from._internal_one_euro_filter());
      break;
    }
    case FILTER_OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mediapipe.LandmarksSmoothingCalculatorOptions)
}

inline void LandmarksSmoothingCalculatorOptions::SharedCtor() {
clear_has_filter_options();
}

LandmarksSmoothingCalculatorOptions::~LandmarksSmoothingCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.LandmarksSmoothingCalculatorOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LandmarksSmoothingCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_filter_options()) {
    clear_filter_options();
  }
}

void LandmarksSmoothingCalculatorOptions::ArenaDtor(void* object) {
  LandmarksSmoothingCalculatorOptions* _this = reinterpret_cast< LandmarksSmoothingCalculatorOptions* >(object);
  (void)_this;
}
void LandmarksSmoothingCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandmarksSmoothingCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LandmarksSmoothingCalculatorOptions::clear_filter_options() {
// @@protoc_insertion_point(one_of_clear_start:mediapipe.LandmarksSmoothingCalculatorOptions)
  switch (filter_options_case()) {
    case kNoFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete filter_options_.no_filter_;
      }
      break;
    }
    case kVelocityFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete filter_options_.velocity_filter_;
      }
      break;
    }
    case kOneEuroFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete filter_options_.one_euro_filter_;
      }
      break;
    }
    case FILTER_OPTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_OPTIONS_NOT_SET;
}


void LandmarksSmoothingCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LandmarksSmoothingCalculatorOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_filter_options();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandmarksSmoothingCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mediapipe.LandmarksSmoothingCalculatorOptions.NoFilter no_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter velocity_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter one_euro_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_one_euro_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LandmarksSmoothingCalculatorOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LandmarksSmoothingCalculatorOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (filter_options_case()) {
    case kNoFilter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::no_filter(this), target, stream);
      break;
    }
    case kVelocityFilter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::velocity_filter(this), target, stream);
      break;
    }
    case kOneEuroFilter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::one_euro_filter(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LandmarksSmoothingCalculatorOptions)
  return target;
}

size_t LandmarksSmoothingCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LandmarksSmoothingCalculatorOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (filter_options_case()) {
    // .mediapipe.LandmarksSmoothingCalculatorOptions.NoFilter no_filter = 1;
    case kNoFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_options_.no_filter_);
      break;
    }
    // .mediapipe.LandmarksSmoothingCalculatorOptions.VelocityFilter velocity_filter = 2;
    case kVelocityFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_options_.velocity_filter_);
      break;
    }
    // .mediapipe.LandmarksSmoothingCalculatorOptions.OneEuroFilter one_euro_filter = 3;
    case kOneEuroFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_options_.one_euro_filter_);
      break;
    }
    case FILTER_OPTIONS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LandmarksSmoothingCalculatorOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LandmarksSmoothingCalculatorOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LandmarksSmoothingCalculatorOptions::GetClassData() const { return &_class_data_; }

void LandmarksSmoothingCalculatorOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LandmarksSmoothingCalculatorOptions *>(to)->MergeFrom(
      static_cast<const LandmarksSmoothingCalculatorOptions &>(from));
}


void LandmarksSmoothingCalculatorOptions::MergeFrom(const LandmarksSmoothingCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LandmarksSmoothingCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.filter_options_case()) {
    case kNoFilter: {
      _internal_mutable_no_filter()->::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter::MergeFrom(from._internal_no_filter());
      break;
    }
    case kVelocityFilter: {
      _internal_mutable_velocity_filter()->::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter::MergeFrom(from._internal_velocity_filter());
      break;
    }
    case kOneEuroFilter: {
      _internal_mutable_one_euro_filter()->::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter::MergeFrom(from._internal_one_euro_filter());
      break;
    }
    case FILTER_OPTIONS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LandmarksSmoothingCalculatorOptions::CopyFrom(const LandmarksSmoothingCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LandmarksSmoothingCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarksSmoothingCalculatorOptions::IsInitialized() const {
  return true;
}

void LandmarksSmoothingCalculatorOptions::InternalSwap(LandmarksSmoothingCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_options_, other->filter_options_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarksSmoothingCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2futil_2flandmarks_5fsmoothing_5fcalculator_2eproto[3]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int LandmarksSmoothingCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::LandmarksSmoothingCalculatorOptions >, 11, false >
  LandmarksSmoothingCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::LandmarksSmoothingCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter* Arena::CreateMaybeMessage< ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::LandmarksSmoothingCalculatorOptions_NoFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter* Arena::CreateMaybeMessage< ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::LandmarksSmoothingCalculatorOptions_VelocityFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter* Arena::CreateMaybeMessage< ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::LandmarksSmoothingCalculatorOptions_OneEuroFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::LandmarksSmoothingCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::LandmarksSmoothingCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::LandmarksSmoothingCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
