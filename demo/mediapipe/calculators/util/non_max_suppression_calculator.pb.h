// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/util/non_max_suppression_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fnon_5fmax_5fsuppression_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fnon_5fmax_5fsuppression_5fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2futil_2fnon_5fmax_5fsuppression_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2futil_2fnon_5fmax_5fsuppression_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2futil_2fnon_5fmax_5fsuppression_5fcalculator_2eproto;
namespace mediapipe {
class NonMaxSuppressionCalculatorOptions;
struct NonMaxSuppressionCalculatorOptionsDefaultTypeInternal;
extern NonMaxSuppressionCalculatorOptionsDefaultTypeInternal _NonMaxSuppressionCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::NonMaxSuppressionCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::NonMaxSuppressionCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum NonMaxSuppressionCalculatorOptions_OverlapType : int {
  NonMaxSuppressionCalculatorOptions_OverlapType_UNSPECIFIED_OVERLAP_TYPE = 0,
  NonMaxSuppressionCalculatorOptions_OverlapType_JACCARD = 1,
  NonMaxSuppressionCalculatorOptions_OverlapType_MODIFIED_JACCARD = 2,
  NonMaxSuppressionCalculatorOptions_OverlapType_INTERSECTION_OVER_UNION = 3
};
bool NonMaxSuppressionCalculatorOptions_OverlapType_IsValid(int value);
constexpr NonMaxSuppressionCalculatorOptions_OverlapType NonMaxSuppressionCalculatorOptions_OverlapType_OverlapType_MIN = NonMaxSuppressionCalculatorOptions_OverlapType_UNSPECIFIED_OVERLAP_TYPE;
constexpr NonMaxSuppressionCalculatorOptions_OverlapType NonMaxSuppressionCalculatorOptions_OverlapType_OverlapType_MAX = NonMaxSuppressionCalculatorOptions_OverlapType_INTERSECTION_OVER_UNION;
constexpr int NonMaxSuppressionCalculatorOptions_OverlapType_OverlapType_ARRAYSIZE = NonMaxSuppressionCalculatorOptions_OverlapType_OverlapType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NonMaxSuppressionCalculatorOptions_OverlapType_descriptor();
template<typename T>
inline const std::string& NonMaxSuppressionCalculatorOptions_OverlapType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NonMaxSuppressionCalculatorOptions_OverlapType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NonMaxSuppressionCalculatorOptions_OverlapType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NonMaxSuppressionCalculatorOptions_OverlapType_descriptor(), enum_t_value);
}
inline bool NonMaxSuppressionCalculatorOptions_OverlapType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NonMaxSuppressionCalculatorOptions_OverlapType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NonMaxSuppressionCalculatorOptions_OverlapType>(
    NonMaxSuppressionCalculatorOptions_OverlapType_descriptor(), name, value);
}
enum NonMaxSuppressionCalculatorOptions_NmsAlgorithm : int {
  NonMaxSuppressionCalculatorOptions_NmsAlgorithm_DEFAULT = 0,
  NonMaxSuppressionCalculatorOptions_NmsAlgorithm_WEIGHTED = 1
};
bool NonMaxSuppressionCalculatorOptions_NmsAlgorithm_IsValid(int value);
constexpr NonMaxSuppressionCalculatorOptions_NmsAlgorithm NonMaxSuppressionCalculatorOptions_NmsAlgorithm_NmsAlgorithm_MIN = NonMaxSuppressionCalculatorOptions_NmsAlgorithm_DEFAULT;
constexpr NonMaxSuppressionCalculatorOptions_NmsAlgorithm NonMaxSuppressionCalculatorOptions_NmsAlgorithm_NmsAlgorithm_MAX = NonMaxSuppressionCalculatorOptions_NmsAlgorithm_WEIGHTED;
constexpr int NonMaxSuppressionCalculatorOptions_NmsAlgorithm_NmsAlgorithm_ARRAYSIZE = NonMaxSuppressionCalculatorOptions_NmsAlgorithm_NmsAlgorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NonMaxSuppressionCalculatorOptions_NmsAlgorithm_descriptor();
template<typename T>
inline const std::string& NonMaxSuppressionCalculatorOptions_NmsAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NonMaxSuppressionCalculatorOptions_NmsAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NonMaxSuppressionCalculatorOptions_NmsAlgorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NonMaxSuppressionCalculatorOptions_NmsAlgorithm_descriptor(), enum_t_value);
}
inline bool NonMaxSuppressionCalculatorOptions_NmsAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NonMaxSuppressionCalculatorOptions_NmsAlgorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NonMaxSuppressionCalculatorOptions_NmsAlgorithm>(
    NonMaxSuppressionCalculatorOptions_NmsAlgorithm_descriptor(), name, value);
}
// ===================================================================

class NonMaxSuppressionCalculatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.NonMaxSuppressionCalculatorOptions) */ {
 public:
  inline NonMaxSuppressionCalculatorOptions() : NonMaxSuppressionCalculatorOptions(nullptr) {}
  ~NonMaxSuppressionCalculatorOptions() override;
  explicit constexpr NonMaxSuppressionCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NonMaxSuppressionCalculatorOptions(const NonMaxSuppressionCalculatorOptions& from);
  NonMaxSuppressionCalculatorOptions(NonMaxSuppressionCalculatorOptions&& from) noexcept
    : NonMaxSuppressionCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline NonMaxSuppressionCalculatorOptions& operator=(const NonMaxSuppressionCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonMaxSuppressionCalculatorOptions& operator=(NonMaxSuppressionCalculatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NonMaxSuppressionCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const NonMaxSuppressionCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const NonMaxSuppressionCalculatorOptions*>(
               &_NonMaxSuppressionCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NonMaxSuppressionCalculatorOptions& a, NonMaxSuppressionCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(NonMaxSuppressionCalculatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonMaxSuppressionCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NonMaxSuppressionCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NonMaxSuppressionCalculatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NonMaxSuppressionCalculatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NonMaxSuppressionCalculatorOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NonMaxSuppressionCalculatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.NonMaxSuppressionCalculatorOptions";
  }
  protected:
  explicit NonMaxSuppressionCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NonMaxSuppressionCalculatorOptions_OverlapType OverlapType;
  static constexpr OverlapType UNSPECIFIED_OVERLAP_TYPE =
    NonMaxSuppressionCalculatorOptions_OverlapType_UNSPECIFIED_OVERLAP_TYPE;
  static constexpr OverlapType JACCARD =
    NonMaxSuppressionCalculatorOptions_OverlapType_JACCARD;
  static constexpr OverlapType MODIFIED_JACCARD =
    NonMaxSuppressionCalculatorOptions_OverlapType_MODIFIED_JACCARD;
  static constexpr OverlapType INTERSECTION_OVER_UNION =
    NonMaxSuppressionCalculatorOptions_OverlapType_INTERSECTION_OVER_UNION;
  static inline bool OverlapType_IsValid(int value) {
    return NonMaxSuppressionCalculatorOptions_OverlapType_IsValid(value);
  }
  static constexpr OverlapType OverlapType_MIN =
    NonMaxSuppressionCalculatorOptions_OverlapType_OverlapType_MIN;
  static constexpr OverlapType OverlapType_MAX =
    NonMaxSuppressionCalculatorOptions_OverlapType_OverlapType_MAX;
  static constexpr int OverlapType_ARRAYSIZE =
    NonMaxSuppressionCalculatorOptions_OverlapType_OverlapType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OverlapType_descriptor() {
    return NonMaxSuppressionCalculatorOptions_OverlapType_descriptor();
  }
  template<typename T>
  static inline const std::string& OverlapType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OverlapType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OverlapType_Name.");
    return NonMaxSuppressionCalculatorOptions_OverlapType_Name(enum_t_value);
  }
  static inline bool OverlapType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OverlapType* value) {
    return NonMaxSuppressionCalculatorOptions_OverlapType_Parse(name, value);
  }

  typedef NonMaxSuppressionCalculatorOptions_NmsAlgorithm NmsAlgorithm;
  static constexpr NmsAlgorithm DEFAULT =
    NonMaxSuppressionCalculatorOptions_NmsAlgorithm_DEFAULT;
  static constexpr NmsAlgorithm WEIGHTED =
    NonMaxSuppressionCalculatorOptions_NmsAlgorithm_WEIGHTED;
  static inline bool NmsAlgorithm_IsValid(int value) {
    return NonMaxSuppressionCalculatorOptions_NmsAlgorithm_IsValid(value);
  }
  static constexpr NmsAlgorithm NmsAlgorithm_MIN =
    NonMaxSuppressionCalculatorOptions_NmsAlgorithm_NmsAlgorithm_MIN;
  static constexpr NmsAlgorithm NmsAlgorithm_MAX =
    NonMaxSuppressionCalculatorOptions_NmsAlgorithm_NmsAlgorithm_MAX;
  static constexpr int NmsAlgorithm_ARRAYSIZE =
    NonMaxSuppressionCalculatorOptions_NmsAlgorithm_NmsAlgorithm_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NmsAlgorithm_descriptor() {
    return NonMaxSuppressionCalculatorOptions_NmsAlgorithm_descriptor();
  }
  template<typename T>
  static inline const std::string& NmsAlgorithm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NmsAlgorithm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NmsAlgorithm_Name.");
    return NonMaxSuppressionCalculatorOptions_NmsAlgorithm_Name(enum_t_value);
  }
  static inline bool NmsAlgorithm_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NmsAlgorithm* value) {
    return NonMaxSuppressionCalculatorOptions_NmsAlgorithm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReturnEmptyDetectionsFieldNumber = 5,
    kAlgorithmFieldNumber = 7,
    kMinScoreThresholdFieldNumber = 6,
    kNumDetectionStreamsFieldNumber = 1,
    kMaxNumDetectionsFieldNumber = 2,
    kMinSuppressionThresholdFieldNumber = 3,
    kOverlapTypeFieldNumber = 4,
  };
  // optional bool return_empty_detections = 5;
  bool has_return_empty_detections() const;
  private:
  bool _internal_has_return_empty_detections() const;
  public:
  void clear_return_empty_detections();
  bool return_empty_detections() const;
  void set_return_empty_detections(bool value);
  private:
  bool _internal_return_empty_detections() const;
  void _internal_set_return_empty_detections(bool value);
  public:

  // optional .mediapipe.NonMaxSuppressionCalculatorOptions.NmsAlgorithm algorithm = 7 [default = DEFAULT];
  bool has_algorithm() const;
  private:
  bool _internal_has_algorithm() const;
  public:
  void clear_algorithm();
  ::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm algorithm() const;
  void set_algorithm(::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm value);
  private:
  ::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm _internal_algorithm() const;
  void _internal_set_algorithm(::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm value);
  public:

  // optional float min_score_threshold = 6 [default = -1];
  bool has_min_score_threshold() const;
  private:
  bool _internal_has_min_score_threshold() const;
  public:
  void clear_min_score_threshold();
  float min_score_threshold() const;
  void set_min_score_threshold(float value);
  private:
  float _internal_min_score_threshold() const;
  void _internal_set_min_score_threshold(float value);
  public:

  // optional int32 num_detection_streams = 1 [default = 1];
  bool has_num_detection_streams() const;
  private:
  bool _internal_has_num_detection_streams() const;
  public:
  void clear_num_detection_streams();
  int32_t num_detection_streams() const;
  void set_num_detection_streams(int32_t value);
  private:
  int32_t _internal_num_detection_streams() const;
  void _internal_set_num_detection_streams(int32_t value);
  public:

  // optional int32 max_num_detections = 2 [default = -1];
  bool has_max_num_detections() const;
  private:
  bool _internal_has_max_num_detections() const;
  public:
  void clear_max_num_detections();
  int32_t max_num_detections() const;
  void set_max_num_detections(int32_t value);
  private:
  int32_t _internal_max_num_detections() const;
  void _internal_set_max_num_detections(int32_t value);
  public:

  // optional float min_suppression_threshold = 3 [default = 1];
  bool has_min_suppression_threshold() const;
  private:
  bool _internal_has_min_suppression_threshold() const;
  public:
  void clear_min_suppression_threshold();
  float min_suppression_threshold() const;
  void set_min_suppression_threshold(float value);
  private:
  float _internal_min_suppression_threshold() const;
  void _internal_set_min_suppression_threshold(float value);
  public:

  // optional .mediapipe.NonMaxSuppressionCalculatorOptions.OverlapType overlap_type = 4 [default = JACCARD];
  bool has_overlap_type() const;
  private:
  bool _internal_has_overlap_type() const;
  public:
  void clear_overlap_type();
  ::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType overlap_type() const;
  void set_overlap_type(::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType value);
  private:
  ::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType _internal_overlap_type() const;
  void _internal_set_overlap_type(::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType value);
  public:

  static const int kExtFieldNumber = 55383100;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::NonMaxSuppressionCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.NonMaxSuppressionCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool return_empty_detections_;
  int algorithm_;
  float min_score_threshold_;
  int32_t num_detection_streams_;
  int32_t max_num_detections_;
  float min_suppression_threshold_;
  int overlap_type_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2futil_2fnon_5fmax_5fsuppression_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NonMaxSuppressionCalculatorOptions

// optional int32 num_detection_streams = 1 [default = 1];
inline bool NonMaxSuppressionCalculatorOptions::_internal_has_num_detection_streams() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NonMaxSuppressionCalculatorOptions::has_num_detection_streams() const {
  return _internal_has_num_detection_streams();
}
inline void NonMaxSuppressionCalculatorOptions::clear_num_detection_streams() {
  num_detection_streams_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t NonMaxSuppressionCalculatorOptions::_internal_num_detection_streams() const {
  return num_detection_streams_;
}
inline int32_t NonMaxSuppressionCalculatorOptions::num_detection_streams() const {
  // @@protoc_insertion_point(field_get:mediapipe.NonMaxSuppressionCalculatorOptions.num_detection_streams)
  return _internal_num_detection_streams();
}
inline void NonMaxSuppressionCalculatorOptions::_internal_set_num_detection_streams(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  num_detection_streams_ = value;
}
inline void NonMaxSuppressionCalculatorOptions::set_num_detection_streams(int32_t value) {
  _internal_set_num_detection_streams(value);
  // @@protoc_insertion_point(field_set:mediapipe.NonMaxSuppressionCalculatorOptions.num_detection_streams)
}

// optional int32 max_num_detections = 2 [default = -1];
inline bool NonMaxSuppressionCalculatorOptions::_internal_has_max_num_detections() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NonMaxSuppressionCalculatorOptions::has_max_num_detections() const {
  return _internal_has_max_num_detections();
}
inline void NonMaxSuppressionCalculatorOptions::clear_max_num_detections() {
  max_num_detections_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t NonMaxSuppressionCalculatorOptions::_internal_max_num_detections() const {
  return max_num_detections_;
}
inline int32_t NonMaxSuppressionCalculatorOptions::max_num_detections() const {
  // @@protoc_insertion_point(field_get:mediapipe.NonMaxSuppressionCalculatorOptions.max_num_detections)
  return _internal_max_num_detections();
}
inline void NonMaxSuppressionCalculatorOptions::_internal_set_max_num_detections(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  max_num_detections_ = value;
}
inline void NonMaxSuppressionCalculatorOptions::set_max_num_detections(int32_t value) {
  _internal_set_max_num_detections(value);
  // @@protoc_insertion_point(field_set:mediapipe.NonMaxSuppressionCalculatorOptions.max_num_detections)
}

// optional float min_score_threshold = 6 [default = -1];
inline bool NonMaxSuppressionCalculatorOptions::_internal_has_min_score_threshold() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NonMaxSuppressionCalculatorOptions::has_min_score_threshold() const {
  return _internal_has_min_score_threshold();
}
inline void NonMaxSuppressionCalculatorOptions::clear_min_score_threshold() {
  min_score_threshold_ = -1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float NonMaxSuppressionCalculatorOptions::_internal_min_score_threshold() const {
  return min_score_threshold_;
}
inline float NonMaxSuppressionCalculatorOptions::min_score_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.NonMaxSuppressionCalculatorOptions.min_score_threshold)
  return _internal_min_score_threshold();
}
inline void NonMaxSuppressionCalculatorOptions::_internal_set_min_score_threshold(float value) {
  _has_bits_[0] |= 0x00000004u;
  min_score_threshold_ = value;
}
inline void NonMaxSuppressionCalculatorOptions::set_min_score_threshold(float value) {
  _internal_set_min_score_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.NonMaxSuppressionCalculatorOptions.min_score_threshold)
}

// optional float min_suppression_threshold = 3 [default = 1];
inline bool NonMaxSuppressionCalculatorOptions::_internal_has_min_suppression_threshold() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NonMaxSuppressionCalculatorOptions::has_min_suppression_threshold() const {
  return _internal_has_min_suppression_threshold();
}
inline void NonMaxSuppressionCalculatorOptions::clear_min_suppression_threshold() {
  min_suppression_threshold_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float NonMaxSuppressionCalculatorOptions::_internal_min_suppression_threshold() const {
  return min_suppression_threshold_;
}
inline float NonMaxSuppressionCalculatorOptions::min_suppression_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.NonMaxSuppressionCalculatorOptions.min_suppression_threshold)
  return _internal_min_suppression_threshold();
}
inline void NonMaxSuppressionCalculatorOptions::_internal_set_min_suppression_threshold(float value) {
  _has_bits_[0] |= 0x00000020u;
  min_suppression_threshold_ = value;
}
inline void NonMaxSuppressionCalculatorOptions::set_min_suppression_threshold(float value) {
  _internal_set_min_suppression_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.NonMaxSuppressionCalculatorOptions.min_suppression_threshold)
}

// optional .mediapipe.NonMaxSuppressionCalculatorOptions.OverlapType overlap_type = 4 [default = JACCARD];
inline bool NonMaxSuppressionCalculatorOptions::_internal_has_overlap_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NonMaxSuppressionCalculatorOptions::has_overlap_type() const {
  return _internal_has_overlap_type();
}
inline void NonMaxSuppressionCalculatorOptions::clear_overlap_type() {
  overlap_type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType NonMaxSuppressionCalculatorOptions::_internal_overlap_type() const {
  return static_cast< ::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType >(overlap_type_);
}
inline ::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType NonMaxSuppressionCalculatorOptions::overlap_type() const {
  // @@protoc_insertion_point(field_get:mediapipe.NonMaxSuppressionCalculatorOptions.overlap_type)
  return _internal_overlap_type();
}
inline void NonMaxSuppressionCalculatorOptions::_internal_set_overlap_type(::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType value) {
  assert(::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  overlap_type_ = value;
}
inline void NonMaxSuppressionCalculatorOptions::set_overlap_type(::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType value) {
  _internal_set_overlap_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.NonMaxSuppressionCalculatorOptions.overlap_type)
}

// optional bool return_empty_detections = 5;
inline bool NonMaxSuppressionCalculatorOptions::_internal_has_return_empty_detections() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NonMaxSuppressionCalculatorOptions::has_return_empty_detections() const {
  return _internal_has_return_empty_detections();
}
inline void NonMaxSuppressionCalculatorOptions::clear_return_empty_detections() {
  return_empty_detections_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool NonMaxSuppressionCalculatorOptions::_internal_return_empty_detections() const {
  return return_empty_detections_;
}
inline bool NonMaxSuppressionCalculatorOptions::return_empty_detections() const {
  // @@protoc_insertion_point(field_get:mediapipe.NonMaxSuppressionCalculatorOptions.return_empty_detections)
  return _internal_return_empty_detections();
}
inline void NonMaxSuppressionCalculatorOptions::_internal_set_return_empty_detections(bool value) {
  _has_bits_[0] |= 0x00000001u;
  return_empty_detections_ = value;
}
inline void NonMaxSuppressionCalculatorOptions::set_return_empty_detections(bool value) {
  _internal_set_return_empty_detections(value);
  // @@protoc_insertion_point(field_set:mediapipe.NonMaxSuppressionCalculatorOptions.return_empty_detections)
}

// optional .mediapipe.NonMaxSuppressionCalculatorOptions.NmsAlgorithm algorithm = 7 [default = DEFAULT];
inline bool NonMaxSuppressionCalculatorOptions::_internal_has_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NonMaxSuppressionCalculatorOptions::has_algorithm() const {
  return _internal_has_algorithm();
}
inline void NonMaxSuppressionCalculatorOptions::clear_algorithm() {
  algorithm_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm NonMaxSuppressionCalculatorOptions::_internal_algorithm() const {
  return static_cast< ::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm >(algorithm_);
}
inline ::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm NonMaxSuppressionCalculatorOptions::algorithm() const {
  // @@protoc_insertion_point(field_get:mediapipe.NonMaxSuppressionCalculatorOptions.algorithm)
  return _internal_algorithm();
}
inline void NonMaxSuppressionCalculatorOptions::_internal_set_algorithm(::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm value) {
  assert(::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  algorithm_ = value;
}
inline void NonMaxSuppressionCalculatorOptions::set_algorithm(::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:mediapipe.NonMaxSuppressionCalculatorOptions.algorithm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType>() {
  return ::mediapipe::NonMaxSuppressionCalculatorOptions_OverlapType_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm>() {
  return ::mediapipe::NonMaxSuppressionCalculatorOptions_NmsAlgorithm_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fnon_5fmax_5fsuppression_5fcalculator_2eproto
