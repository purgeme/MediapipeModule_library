"\n\267\001\n,mediapipe/framework/calculator_options.proto\022\tmediapipe\"F\n"
"\021CalculatorOptions\022%\n\014merge_fields\030\001 \001(\010B\002\030\001R"
"\013mergeFields*\n\010\240\234\001\020\200\200\200\200\002B4\n\032com.google.m"
"ediapipe.protoB\026CalculatorOptionsProto\n\215\001\n+mediapipe/framework/medi"
"apipe_options.proto\022\tmediapipe\"\036\n\020MediaPipeOptions*\n\010\240\234"
"\001\020\200\200\200\200\002B3\n\032com.google.mediapipe.protoB\025MediaPipeOp"
"tionsProto\n\372\002\n(mediapipe/framework/packet_factory.proto\022\tmediapipe"
"\"\"\n\024PacketFactoryOptions*\n\010\240\234\001\020\200\200\200\200\002\""
"\317\001\n\023PacketFactoryConfig\022%\n\016packet_factory\030\001 \001(\tR\rp"
"acketFactory\022,\n\022output_side_packet\030\002 \001(\tR\020outputSidePacket"
"\022(\n\017external_output\030\352\007 \001(\tR\016externalOutput\0229\n\007op"
"tions\030\003 \001(\0132\037.mediapipe.PacketFactoryOptionsR\007options\"M\n"
"\023PacketManagerConfig\0226\n\006packet\030\001 \003(\0132\036.mediapipe.Pack"
"etFactoryConfigR\006packet\n\213\003\n*mediapipe/framework/packet_generator.pr"
"oto\022\tmediapipe\"$\n\026PacketGeneratorOptions*\n\010\240\234\001\020\200"
"\200\200\200\002\"\253\002\n\025PacketGeneratorConfig\022)\n\020packet_generat"
"or\030\001 \001(\tR\017packetGenerator\022*\n\021input_side_packet\030\002 "
"\003(\tR\017inputSidePacket\022&\n\016external_input\030\352\007 \003(\tR\rext"
"ernalInput\022,\n\022output_side_packet\030\003 \003(\tR\020outputSidePacket"
"\022(\n\017external_output\030\353\007 \003(\tR\016externalOutput\022;\n\007op"
"tions\030\004 \001(\0132!.mediapipe.PacketGeneratorOptionsR\007options\n\254"
"\002\n(mediapipe/framework/status_handler.proto\022\tmediapipe\032+mediapipe/f"
"ramework/mediapipe_options.proto\"\307\001\n\023StatusHandlerConfig\022%\n\016"
"status_handler\030\001 \001(\tR\rstatusHandler\022*\n\021input_side_packet\030"
"\002 \003(\tR\017inputSidePacket\022&\n\016external_input\030\352\007 \003(\tR"
"\rexternalInput\0225\n\007options\030\003 \001(\0132\033.mediapipe.MediaPipeOp"
"tionsR\007options\n\222\004\n(mediapipe/framework/stream_handler.proto\022\tme"
"diapipe\032+mediapipe/framework/mediapipe_options.proto\"\236\001\n\030InputSt"
"reamHandlerConfig\022K\n\024input_stream_handler\030\001 \001(\t:\031DefaultIn"
"putStreamHandlerR\022inputStreamHandler\0225\n\007options\030\003 \001(\0132"
"\033.mediapipe.MediaPipeOptionsR\007options\"\316\001\n\031OutputStreamHandler"
"Config\022N\n\025output_stream_handler\030\001 \001(\t:\032InOrderOutputStream"
"HandlerR\023outputStreamHandler\022*\n\021input_side_packet\030\002 \003(\tR"
"\017inputSidePacket\0225\n\007options\030\003 \001(\0132\033.mediapipe.MediaPi"
"peOptionsR\007optionsB<\n\032com.google.mediapipe.protoB\022StreamHandlerProto"
"\242\002\tMediaPipe\n\344\001\n\031google/protobuf/any.proto\022\017google.pro"
"tobuf\"6\n\003Any\022\031\n\010type_url\030\001 \001(\tR\007typeUrl\022\024\n"
"\005value\030\002 \001(\014R\005valueBv\n\023com.google.protobufB\010AnyProtoP"
"\001Z,google.golang.org/protobuf/types/known/anypb\242\002\003GPB\252\002\036G"
"oogle.Protobuf.WellKnownTypesb\006proto3\n\301\036\n$mediapipe/framework/calcu"
"lator.proto\022\tmediapipe\032,mediapipe/framework/calculator_options.proto"
"\032\031google/protobuf/any.proto\032+mediapipe/framework/mediapipe_options.pr"
"oto\032(mediapipe/framework/packet_factory.proto\032*mediapipe/framework/packe"
"t_generator.proto\032(mediapipe/framework/status_handler.proto\032(mediapipe/f"
"ramework/stream_handler.proto\"o\n\016ExecutorConfig\022\022\n\004name\030\001"
" \001(\tR\004name\022\022\n\004type\030\002 \001(\tR\004type\0225\n\007options"
"\030\003 \001(\0132\033.mediapipe.MediaPipeOptionsR\007options\"\317\002\n\017"
"InputCollection\022\022\n\004name\030\001 \001(\tR\004name\022(\n\020side_pack"
"et_name\030\002 \003(\tR\016sidePacketName\022/\n\023external_input_name\030"
"\352\007 \003(\tR\021externalInputName\022C\n\ninput_type\030\003 \001(\0162$."
"mediapipe.InputCollection.InputTypeR\tinputType\022\033\n\tfile_name\030\004 "
"\001(\tR\010fileName\"k\n\tInputType\022\013\n\007UNKNOWN\020\000\022\014\n"
"\010RECORDIO\020\001\022\024\n\020FOREIGN_RECORDIO\020\002\022\024\n\020FOREIG"
"N_CSV_TEXT\020\003\022\027\n\023INVALID_UPPER_BOUND\020\004\"[\n\022InputColle"
"ctionSet\022E\n\020input_collection\030\001 \003(\0132\032.mediapipe.InputColl"
"ectionR\017inputCollection\"K\n\017InputStreamInfo\022\033\n\ttag_index\030"
"\001 \001(\tR\010tagIndex\022\033\n\tback_edge\030\002 \001(\010R\010backEdge"
"\"\316\007\n\016ProfilerConfig\022?\n\034histogram_interval_size_usec\030\001 "
"\001(\003R\031histogramIntervalSizeUsec\0226\n\027num_histogram_intervals\030"
"\002 \001(\003R\025numHistogramIntervals\022A\n\033enable_input_output_latency"
"\030\003 \001(\010B\002\030\001R\030enableInputOutputLatency\022\'\n\017enable"
"_profiler\030\004 \001(\010R\016enableProfiler\0222\n\025enable_stream_latency"
"\030\005 \001(\010R\023enableStreamLatency\022O\n%use_packet_timestamp_for_add"
"ed_packet\030\006 \001(\010R usePacketTimestampForAddedPacket\022,\n\022trace_"
"log_capacity\030\007 \001(\003R\020traceLogCapacity\022;\n\032trace_event_type"
"s_disabled\030\010 \003(\005R\027traceEventTypesDisabled\022$\n\016trace_log_p"
"ath\030\t \001(\tR\014traceLogPath\022&\n\017trace_log_count\030\n \001(\005R"
"\rtraceLogCount\0225\n\027trace_log_interval_usec\030\013 \001(\003R\024traceL"
"ogIntervalUsec\0221\n\025trace_log_margin_usec\030\014 \001(\003R\022traceLogM"
"arginUsec\022=\n\031trace_log_duration_events\030\r \001(\010B\002\030\001R"
"\026traceLogDurationEvents\0227\n\030trace_log_interval_count\030\016 \001("
"\005R\025traceLogIntervalCount\022,\n\022trace_log_disabled\030\017 \001(\010R"
"\020traceLogDisabled\022#\n\rtrace_enabled\030\020 \001(\010R\014traceEnabled"
"\0227\n\030trace_log_instant_events\030\021 \001(\010R\025traceLogInstantEvent"
"s\022+\n\021calculator_filter\030\022 \001(\tR\020calculatorFilter\"\366\016\n"
"\025CalculatorGraphConfig\0229\n\004node\030\001 \003(\0132%.mediapipe.Calcula"
"torGraphConfig.NodeR\004node\022E\n\016packet_factory\030\006 \003(\0132\036.m"
"ediapipe.PacketFactoryConfigR\rpacketFactory\022K\n\020packet_generator\030"
"\007 \003(\0132 .mediapipe.PacketGeneratorConfigR\017packetGenerator\022\037\n"
"\013num_threads\030\010 \001(\005R\nnumThreads\022E\n\016status_handler\030\t "
"\003(\0132\036.mediapipe.StatusHandlerConfigR\rstatusHandler\022!\n\014input_s"
"tream\030\n \003(\tR\013inputStream\022#\n\routput_stream\030\017 \003(\tR\014"
"outputStream\022*\n\021input_side_packet\030\020 \003(\tR\017inputSidePacket"
"\022,\n\022output_side_packet\030\021 \003(\tR\020outputSidePacket\022$\n\016m"
"ax_queue_size\030\013 \001(\005R\014maxQueueSize\022\'\n\017report_deadlock"
"\030\025 \001(\010R\016reportDeadlock\022U\n\024input_stream_handler\030\014 "
"\001(\0132#.mediapipe.InputStreamHandlerConfigR\022inputStreamHandler\022X\n"
"\025output_stream_handler\030\r \001(\0132$.mediapipe.OutputStreamHandlerConfi"
"gR\023outputStreamHandler\0225\n\010executor\030\016 \003(\0132\031.mediapipe."
"ExecutorConfigR\010executor\022B\n\017profiler_config\030\022 \001(\0132\031.m"
"ediapipe.ProfilerConfigR\016profilerConfig\022\030\n\007package\030\023 \001("
"\tR\007package\022\022\n\004type\030\024 \001(\tR\004type\0226\n\007options"
"\030\351\007 \001(\0132\033.mediapipe.MediaPipeOptionsR\007options\022:\n\rgra"
"ph_options\030\352\007 \003(\0132\024.google.protobuf.AnyR\014graphOptions\032"
"\346\006\n\004Node\022\022\n\004name\030\001 \001(\tR\004name\022\036\n\ncalcu"
"lator\030\002 \001(\tR\ncalculator\022!\n\014input_stream\030\003 \003(\tR\013"
"inputStream\022#\n\routput_stream\030\004 \003(\tR\014outputStream\022*\n\021i"
"nput_side_packet\030\005 \003(\tR\017inputSidePacket\022,\n\022output_side_pac"
"ket\030\006 \003(\tR\020outputSidePacket\0226\n\007options\030\007 \001(\0132"
"\034.mediapipe.CalculatorOptionsR\007options\0227\n\014node_options\030\010 "
"\003(\0132\024.google.protobuf.AnyR\013nodeOptions\022!\n\014source_layer\030"
"\t \001(\005R\013sourceLayer\022(\n\020buffer_size_hint\030\n \001(\005R\016bu"
"fferSizeHint\022U\n\024input_stream_handler\030\013 \001(\0132#.mediapipe.Inpu"
"tStreamHandlerConfigR\022inputStreamHandler\022X\n\025output_stream_handler"
"\030\014 \001(\0132$.mediapipe.OutputStreamHandlerConfigR\023outputStreamHandl"
"er\022F\n\021input_stream_info\030\r \003(\0132\032.mediapipe.InputStreamInfoR"
"\017inputStreamInfo\022\032\n\010executor\030\016 \001(\tR\010executor\022F\n"
"\017profiler_config\030\017 \001(\0132\031.mediapipe.ProfilerConfigB\002\030"
"\001R\016profilerConfig\022\"\n\rmax_in_flight\030\020 \001(\005R\013maxInFlig"
"ht\022!\n\014option_value\030\021 \003(\tR\013optionValue\022&\n\016external_i"
"nput\030\355\007 \003(\tR\rexternalInputB-\n\032com.google.mediapipe.protoB"
"\017CalculatorProtoP\000b\006proto3\n\262\014\n7mediapipe/calculators/tensor/i"
"nference_calculator.proto\022\tmediapipe\032$mediapipe/framework/calculator.pr"
"oto\"\202\013\n\032InferenceCalculatorOptions\022\035\n\nmodel_path\030\001 "
"\001(\tR\tmodelPath\022\"\n\007use_gpu\030\002 \001(\010:\005falseB\002\030"
"\001R\006useGpu\022&\n\tuse_nnapi\030\003 \001(\010:\005falseB\002\030\001R"
"\010useNnapi\022(\n\016cpu_num_thread\030\004 \001(\005:\002-1R\014cpuNumThrea"
"d\022J\n\010delegate\030\005 \001(\0132..mediapipe.InferenceCalculatorOptions."
"DelegateR\010delegate\032\247\010\n\010Delegate\022O\n\006tflite\030\001 \001("
"\01325.mediapipe.InferenceCalculatorOptions.Delegate.TfLiteH\000R\006tflite"
"\022F\n\003gpu\030\002 \001(\01322.mediapipe.InferenceCalculatorOptions.Delega"
"te.GpuH\000R\003gpu\022L\n\005nnapi\030\003 \001(\01324.mediapipe.InferenceCal"
"culatorOptions.Delegate.NnapiH\000R\005nnapi\022R\n\007xnnpack\030\004 \001("
"\01326.mediapipe.InferenceCalculatorOptions.Delegate.XnnpackH\000R\007xnnpack"
"\032\010\n\006TfLite\032\247\004\n\003Gpu\0226\n\024use_advanced_gpu_api\030"
"\001 \001(\010:\005falseR\021useAdvancedGpuApi\022M\n\003api\030\004 \001(\016"
"26.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api:\003ANYR\003api\0226"
"\n\024allow_precision_loss\030\003 \001(\010:\004trueR\022allowPrecisionLoss"
"\022,\n\022cached_kernel_path\030\002 \001(\tR\020cachedKernelPath\0220\n\024s"
"erialized_model_dir\030\007 \001(\tR\022serializedModelDir\022\037\n\013model_"
"token\030\010 \001(\tR\nmodelToken\022h\n\005usage\030\005 \001(\0162A.mediapi"
"pe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage:\017SUSTAINED_SPEEDR"
"\005usage\"&\n\003Api\022\007\n\003ANY\020\000\022\n\n\006OPENGL\020\001\022\n"
"\n\006OPENCL\020\002\"N\n\016InferenceUsage\022\017\n\013UNSPECIFIED\020\000"
"\022\026\n\022FAST_SINGLE_ANSWER\020\001\022\023\n\017SUSTAINED_SPEED\020\002"
"\032p\n\005Nnapi\022\033\n\tcache_dir\030\001 \001(\tR\010cacheDir\022\037\n"
"\013model_token\030\002 \001(\tR\nmodelToken\022)\n\020accelerator_name\030"
"\003 \001(\tR\017acceleratorName\032.\n\007Xnnpack\022#\n\013num_threads\030"
"\001 \001(\005:\002-1R\nnumThreadsB\n\n\010delegate2Y\n\003ext\022\034.mediapi"
"pe.CalculatorOptions\030\367\323\313\240\001 \001(\0132%.mediapipe.InferenceCa"
"lculatorOptionsR\003extBA\n%com.google.mediapipe.calculator.protoB\030Inferenc"
"eCalculatorProto"
