// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/tensor/tensors_to_detections_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fdetections_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fdetections_5fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fdetections_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fdetections_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fdetections_5fcalculator_2eproto;
namespace mediapipe {
class TensorsToDetectionsCalculatorOptions;
struct TensorsToDetectionsCalculatorOptionsDefaultTypeInternal;
extern TensorsToDetectionsCalculatorOptionsDefaultTypeInternal _TensorsToDetectionsCalculatorOptions_default_instance_;
class TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices;
struct TensorsToDetectionsCalculatorOptions_BoxBoundariesIndicesDefaultTypeInternal;
extern TensorsToDetectionsCalculatorOptions_BoxBoundariesIndicesDefaultTypeInternal _TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices_default_instance_;
class TensorsToDetectionsCalculatorOptions_TensorMapping;
struct TensorsToDetectionsCalculatorOptions_TensorMappingDefaultTypeInternal;
extern TensorsToDetectionsCalculatorOptions_TensorMappingDefaultTypeInternal _TensorsToDetectionsCalculatorOptions_TensorMapping_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::TensorsToDetectionsCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::TensorsToDetectionsCalculatorOptions>(Arena*);
template<> ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* Arena::CreateMaybeMessage<::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices>(Arena*);
template<> ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* Arena::CreateMaybeMessage<::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class TensorsToDetectionsCalculatorOptions_TensorMapping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping) */ {
 public:
  inline TensorsToDetectionsCalculatorOptions_TensorMapping() : TensorsToDetectionsCalculatorOptions_TensorMapping(nullptr) {}
  ~TensorsToDetectionsCalculatorOptions_TensorMapping() override;
  explicit constexpr TensorsToDetectionsCalculatorOptions_TensorMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TensorsToDetectionsCalculatorOptions_TensorMapping(const TensorsToDetectionsCalculatorOptions_TensorMapping& from);
  TensorsToDetectionsCalculatorOptions_TensorMapping(TensorsToDetectionsCalculatorOptions_TensorMapping&& from) noexcept
    : TensorsToDetectionsCalculatorOptions_TensorMapping() {
    *this = ::std::move(from);
  }

  inline TensorsToDetectionsCalculatorOptions_TensorMapping& operator=(const TensorsToDetectionsCalculatorOptions_TensorMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorsToDetectionsCalculatorOptions_TensorMapping& operator=(TensorsToDetectionsCalculatorOptions_TensorMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TensorsToDetectionsCalculatorOptions_TensorMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorsToDetectionsCalculatorOptions_TensorMapping* internal_default_instance() {
    return reinterpret_cast<const TensorsToDetectionsCalculatorOptions_TensorMapping*>(
               &_TensorsToDetectionsCalculatorOptions_TensorMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TensorsToDetectionsCalculatorOptions_TensorMapping& a, TensorsToDetectionsCalculatorOptions_TensorMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorsToDetectionsCalculatorOptions_TensorMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorsToDetectionsCalculatorOptions_TensorMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TensorsToDetectionsCalculatorOptions_TensorMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TensorsToDetectionsCalculatorOptions_TensorMapping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TensorsToDetectionsCalculatorOptions_TensorMapping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TensorsToDetectionsCalculatorOptions_TensorMapping& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorsToDetectionsCalculatorOptions_TensorMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping";
  }
  protected:
  explicit TensorsToDetectionsCalculatorOptions_TensorMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionsTensorIndexFieldNumber = 1,
    kClassesTensorIndexFieldNumber = 2,
    kScoresTensorIndexFieldNumber = 3,
    kNumDetectionsTensorIndexFieldNumber = 4,
    kAnchorsTensorIndexFieldNumber = 5,
  };
  // optional int32 detections_tensor_index = 1;
  bool has_detections_tensor_index() const;
  private:
  bool _internal_has_detections_tensor_index() const;
  public:
  void clear_detections_tensor_index();
  int32_t detections_tensor_index() const;
  void set_detections_tensor_index(int32_t value);
  private:
  int32_t _internal_detections_tensor_index() const;
  void _internal_set_detections_tensor_index(int32_t value);
  public:

  // optional int32 classes_tensor_index = 2;
  bool has_classes_tensor_index() const;
  private:
  bool _internal_has_classes_tensor_index() const;
  public:
  void clear_classes_tensor_index();
  int32_t classes_tensor_index() const;
  void set_classes_tensor_index(int32_t value);
  private:
  int32_t _internal_classes_tensor_index() const;
  void _internal_set_classes_tensor_index(int32_t value);
  public:

  // optional int32 scores_tensor_index = 3;
  bool has_scores_tensor_index() const;
  private:
  bool _internal_has_scores_tensor_index() const;
  public:
  void clear_scores_tensor_index();
  int32_t scores_tensor_index() const;
  void set_scores_tensor_index(int32_t value);
  private:
  int32_t _internal_scores_tensor_index() const;
  void _internal_set_scores_tensor_index(int32_t value);
  public:

  // optional int32 num_detections_tensor_index = 4;
  bool has_num_detections_tensor_index() const;
  private:
  bool _internal_has_num_detections_tensor_index() const;
  public:
  void clear_num_detections_tensor_index();
  int32_t num_detections_tensor_index() const;
  void set_num_detections_tensor_index(int32_t value);
  private:
  int32_t _internal_num_detections_tensor_index() const;
  void _internal_set_num_detections_tensor_index(int32_t value);
  public:

  // optional int32 anchors_tensor_index = 5;
  bool has_anchors_tensor_index() const;
  private:
  bool _internal_has_anchors_tensor_index() const;
  public:
  void clear_anchors_tensor_index();
  int32_t anchors_tensor_index() const;
  void set_anchors_tensor_index(int32_t value);
  private:
  int32_t _internal_anchors_tensor_index() const;
  void _internal_set_anchors_tensor_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t detections_tensor_index_;
  int32_t classes_tensor_index_;
  int32_t scores_tensor_index_;
  int32_t num_detections_tensor_index_;
  int32_t anchors_tensor_index_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fdetections_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices) */ {
 public:
  inline TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices() : TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices(nullptr) {}
  ~TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices() override;
  explicit constexpr TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices(const TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& from);
  TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices(TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices&& from) noexcept
    : TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices() {
    *this = ::std::move(from);
  }

  inline TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& operator=(const TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& operator=(TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* internal_default_instance() {
    return reinterpret_cast<const TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices*>(
               &_TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& a, TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices";
  }
  protected:
  explicit TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYminFieldNumber = 1,
    kXmaxFieldNumber = 4,
    kXminFieldNumber = 2,
    kYmaxFieldNumber = 3,
  };
  // optional int32 ymin = 1 [default = 0];
  bool has_ymin() const;
  private:
  bool _internal_has_ymin() const;
  public:
  void clear_ymin();
  int32_t ymin() const;
  void set_ymin(int32_t value);
  private:
  int32_t _internal_ymin() const;
  void _internal_set_ymin(int32_t value);
  public:

  // optional int32 xmax = 4 [default = 3];
  bool has_xmax() const;
  private:
  bool _internal_has_xmax() const;
  public:
  void clear_xmax();
  int32_t xmax() const;
  void set_xmax(int32_t value);
  private:
  int32_t _internal_xmax() const;
  void _internal_set_xmax(int32_t value);
  public:

  // optional int32 xmin = 2 [default = 1];
  bool has_xmin() const;
  private:
  bool _internal_has_xmin() const;
  public:
  void clear_xmin();
  int32_t xmin() const;
  void set_xmin(int32_t value);
  private:
  int32_t _internal_xmin() const;
  void _internal_set_xmin(int32_t value);
  public:

  // optional int32 ymax = 3 [default = 2];
  bool has_ymax() const;
  private:
  bool _internal_has_ymax() const;
  public:
  void clear_ymax();
  int32_t ymax() const;
  void set_ymax(int32_t value);
  private:
  int32_t _internal_ymax() const;
  void _internal_set_ymax(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ymin_;
  int32_t xmax_;
  int32_t xmin_;
  int32_t ymax_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fdetections_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class TensorsToDetectionsCalculatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TensorsToDetectionsCalculatorOptions) */ {
 public:
  inline TensorsToDetectionsCalculatorOptions() : TensorsToDetectionsCalculatorOptions(nullptr) {}
  ~TensorsToDetectionsCalculatorOptions() override;
  explicit constexpr TensorsToDetectionsCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TensorsToDetectionsCalculatorOptions(const TensorsToDetectionsCalculatorOptions& from);
  TensorsToDetectionsCalculatorOptions(TensorsToDetectionsCalculatorOptions&& from) noexcept
    : TensorsToDetectionsCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline TensorsToDetectionsCalculatorOptions& operator=(const TensorsToDetectionsCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorsToDetectionsCalculatorOptions& operator=(TensorsToDetectionsCalculatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TensorsToDetectionsCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  enum BoxIndicesCase {
    kBoxBoundariesIndices = 23,
    BOX_INDICES_NOT_SET = 0,
  };

  static inline const TensorsToDetectionsCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const TensorsToDetectionsCalculatorOptions*>(
               &_TensorsToDetectionsCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TensorsToDetectionsCalculatorOptions& a, TensorsToDetectionsCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorsToDetectionsCalculatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorsToDetectionsCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TensorsToDetectionsCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TensorsToDetectionsCalculatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TensorsToDetectionsCalculatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TensorsToDetectionsCalculatorOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorsToDetectionsCalculatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TensorsToDetectionsCalculatorOptions";
  }
  protected:
  explicit TensorsToDetectionsCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TensorsToDetectionsCalculatorOptions_TensorMapping TensorMapping;
  typedef TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices BoxBoundariesIndices;

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreClassesFieldNumber = 8,
    kAllowClassesFieldNumber = 21,
    kTensorMappingFieldNumber = 22,
    kNumClassesFieldNumber = 1,
    kNumBoxesFieldNumber = 2,
    kNumCoordsFieldNumber = 3,
    kXScaleFieldNumber = 4,
    kYScaleFieldNumber = 5,
    kWScaleFieldNumber = 6,
    kHScaleFieldNumber = 7,
    kKeypointCoordOffsetFieldNumber = 9,
    kNumKeypointsFieldNumber = 10,
    kBoxCoordOffsetFieldNumber = 12,
    kApplyExponentialOnBoxSizeFieldNumber = 13,
    kReverseOutputOrderFieldNumber = 14,
    kSigmoidScoreFieldNumber = 15,
    kFlipVerticallyFieldNumber = 18,
    kScoreClippingThreshFieldNumber = 16,
    kMinScoreThreshFieldNumber = 19,
    kNumValuesPerKeypointFieldNumber = 11,
    kMaxResultsFieldNumber = 20,
    kBoxBoundariesIndicesFieldNumber = 23,
  };
  // repeated int32 ignore_classes = 8;
  int ignore_classes_size() const;
  private:
  int _internal_ignore_classes_size() const;
  public:
  void clear_ignore_classes();
  private:
  int32_t _internal_ignore_classes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ignore_classes() const;
  void _internal_add_ignore_classes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ignore_classes();
  public:
  int32_t ignore_classes(int index) const;
  void set_ignore_classes(int index, int32_t value);
  void add_ignore_classes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ignore_classes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ignore_classes();

  // repeated int32 allow_classes = 21 [packed = true];
  int allow_classes_size() const;
  private:
  int _internal_allow_classes_size() const;
  public:
  void clear_allow_classes();
  private:
  int32_t _internal_allow_classes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_allow_classes() const;
  void _internal_add_allow_classes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_allow_classes();
  public:
  int32_t allow_classes(int index) const;
  void set_allow_classes(int index, int32_t value);
  void add_allow_classes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      allow_classes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_allow_classes();

  // optional .mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping tensor_mapping = 22;
  bool has_tensor_mapping() const;
  private:
  bool _internal_has_tensor_mapping() const;
  public:
  void clear_tensor_mapping();
  const ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping& tensor_mapping() const;
  PROTOBUF_NODISCARD ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* release_tensor_mapping();
  ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* mutable_tensor_mapping();
  void set_allocated_tensor_mapping(::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* tensor_mapping);
  private:
  const ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping& _internal_tensor_mapping() const;
  ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* _internal_mutable_tensor_mapping();
  public:
  void unsafe_arena_set_allocated_tensor_mapping(
      ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* tensor_mapping);
  ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* unsafe_arena_release_tensor_mapping();

  // optional int32 num_classes = 1;
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  int32_t num_classes() const;
  void set_num_classes(int32_t value);
  private:
  int32_t _internal_num_classes() const;
  void _internal_set_num_classes(int32_t value);
  public:

  // optional int32 num_boxes = 2;
  bool has_num_boxes() const;
  private:
  bool _internal_has_num_boxes() const;
  public:
  void clear_num_boxes();
  int32_t num_boxes() const;
  void set_num_boxes(int32_t value);
  private:
  int32_t _internal_num_boxes() const;
  void _internal_set_num_boxes(int32_t value);
  public:

  // optional int32 num_coords = 3;
  bool has_num_coords() const;
  private:
  bool _internal_has_num_coords() const;
  public:
  void clear_num_coords();
  int32_t num_coords() const;
  void set_num_coords(int32_t value);
  private:
  int32_t _internal_num_coords() const;
  void _internal_set_num_coords(int32_t value);
  public:

  // optional float x_scale = 4 [default = 0];
  bool has_x_scale() const;
  private:
  bool _internal_has_x_scale() const;
  public:
  void clear_x_scale();
  float x_scale() const;
  void set_x_scale(float value);
  private:
  float _internal_x_scale() const;
  void _internal_set_x_scale(float value);
  public:

  // optional float y_scale = 5 [default = 0];
  bool has_y_scale() const;
  private:
  bool _internal_has_y_scale() const;
  public:
  void clear_y_scale();
  float y_scale() const;
  void set_y_scale(float value);
  private:
  float _internal_y_scale() const;
  void _internal_set_y_scale(float value);
  public:

  // optional float w_scale = 6 [default = 0];
  bool has_w_scale() const;
  private:
  bool _internal_has_w_scale() const;
  public:
  void clear_w_scale();
  float w_scale() const;
  void set_w_scale(float value);
  private:
  float _internal_w_scale() const;
  void _internal_set_w_scale(float value);
  public:

  // optional float h_scale = 7 [default = 0];
  bool has_h_scale() const;
  private:
  bool _internal_has_h_scale() const;
  public:
  void clear_h_scale();
  float h_scale() const;
  void set_h_scale(float value);
  private:
  float _internal_h_scale() const;
  void _internal_set_h_scale(float value);
  public:

  // optional int32 keypoint_coord_offset = 9;
  bool has_keypoint_coord_offset() const;
  private:
  bool _internal_has_keypoint_coord_offset() const;
  public:
  void clear_keypoint_coord_offset();
  int32_t keypoint_coord_offset() const;
  void set_keypoint_coord_offset(int32_t value);
  private:
  int32_t _internal_keypoint_coord_offset() const;
  void _internal_set_keypoint_coord_offset(int32_t value);
  public:

  // optional int32 num_keypoints = 10 [default = 0];
  bool has_num_keypoints() const;
  private:
  bool _internal_has_num_keypoints() const;
  public:
  void clear_num_keypoints();
  int32_t num_keypoints() const;
  void set_num_keypoints(int32_t value);
  private:
  int32_t _internal_num_keypoints() const;
  void _internal_set_num_keypoints(int32_t value);
  public:

  // optional int32 box_coord_offset = 12 [default = 0];
  bool has_box_coord_offset() const;
  private:
  bool _internal_has_box_coord_offset() const;
  public:
  void clear_box_coord_offset();
  int32_t box_coord_offset() const;
  void set_box_coord_offset(int32_t value);
  private:
  int32_t _internal_box_coord_offset() const;
  void _internal_set_box_coord_offset(int32_t value);
  public:

  // optional bool apply_exponential_on_box_size = 13 [default = false];
  bool has_apply_exponential_on_box_size() const;
  private:
  bool _internal_has_apply_exponential_on_box_size() const;
  public:
  void clear_apply_exponential_on_box_size();
  bool apply_exponential_on_box_size() const;
  void set_apply_exponential_on_box_size(bool value);
  private:
  bool _internal_apply_exponential_on_box_size() const;
  void _internal_set_apply_exponential_on_box_size(bool value);
  public:

  // optional bool reverse_output_order = 14 [default = false];
  bool has_reverse_output_order() const;
  private:
  bool _internal_has_reverse_output_order() const;
  public:
  void clear_reverse_output_order();
  bool reverse_output_order() const;
  void set_reverse_output_order(bool value);
  private:
  bool _internal_reverse_output_order() const;
  void _internal_set_reverse_output_order(bool value);
  public:

  // optional bool sigmoid_score = 15 [default = false];
  bool has_sigmoid_score() const;
  private:
  bool _internal_has_sigmoid_score() const;
  public:
  void clear_sigmoid_score();
  bool sigmoid_score() const;
  void set_sigmoid_score(bool value);
  private:
  bool _internal_sigmoid_score() const;
  void _internal_set_sigmoid_score(bool value);
  public:

  // optional bool flip_vertically = 18 [default = false];
  bool has_flip_vertically() const;
  private:
  bool _internal_has_flip_vertically() const;
  public:
  void clear_flip_vertically();
  bool flip_vertically() const;
  void set_flip_vertically(bool value);
  private:
  bool _internal_flip_vertically() const;
  void _internal_set_flip_vertically(bool value);
  public:

  // optional float score_clipping_thresh = 16;
  bool has_score_clipping_thresh() const;
  private:
  bool _internal_has_score_clipping_thresh() const;
  public:
  void clear_score_clipping_thresh();
  float score_clipping_thresh() const;
  void set_score_clipping_thresh(float value);
  private:
  float _internal_score_clipping_thresh() const;
  void _internal_set_score_clipping_thresh(float value);
  public:

  // optional float min_score_thresh = 19;
  bool has_min_score_thresh() const;
  private:
  bool _internal_has_min_score_thresh() const;
  public:
  void clear_min_score_thresh();
  float min_score_thresh() const;
  void set_min_score_thresh(float value);
  private:
  float _internal_min_score_thresh() const;
  void _internal_set_min_score_thresh(float value);
  public:

  // optional int32 num_values_per_keypoint = 11 [default = 2];
  bool has_num_values_per_keypoint() const;
  private:
  bool _internal_has_num_values_per_keypoint() const;
  public:
  void clear_num_values_per_keypoint();
  int32_t num_values_per_keypoint() const;
  void set_num_values_per_keypoint(int32_t value);
  private:
  int32_t _internal_num_values_per_keypoint() const;
  void _internal_set_num_values_per_keypoint(int32_t value);
  public:

  // optional int32 max_results = 20 [default = -1];
  bool has_max_results() const;
  private:
  bool _internal_has_max_results() const;
  public:
  void clear_max_results();
  int32_t max_results() const;
  void set_max_results(int32_t value);
  private:
  int32_t _internal_max_results() const;
  void _internal_set_max_results(int32_t value);
  public:

  // .mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices box_boundaries_indices = 23;
  bool has_box_boundaries_indices() const;
  private:
  bool _internal_has_box_boundaries_indices() const;
  public:
  void clear_box_boundaries_indices();
  const ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& box_boundaries_indices() const;
  PROTOBUF_NODISCARD ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* release_box_boundaries_indices();
  ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* mutable_box_boundaries_indices();
  void set_allocated_box_boundaries_indices(::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* box_boundaries_indices);
  private:
  const ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& _internal_box_boundaries_indices() const;
  ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* _internal_mutable_box_boundaries_indices();
  public:
  void unsafe_arena_set_allocated_box_boundaries_indices(
      ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* box_boundaries_indices);
  ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* unsafe_arena_release_box_boundaries_indices();

  void clear_box_indices();
  BoxIndicesCase box_indices_case() const;
  static const int kExtFieldNumber = 335742639;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::TensorsToDetectionsCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.TensorsToDetectionsCalculatorOptions)
 private:
  class _Internal;
  void set_has_box_boundaries_indices();

  inline bool has_box_indices() const;
  inline void clear_has_box_indices();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ignore_classes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > allow_classes_;
  mutable std::atomic<int> _allow_classes_cached_byte_size_;
  ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* tensor_mapping_;
  int32_t num_classes_;
  int32_t num_boxes_;
  int32_t num_coords_;
  float x_scale_;
  float y_scale_;
  float w_scale_;
  float h_scale_;
  int32_t keypoint_coord_offset_;
  int32_t num_keypoints_;
  int32_t box_coord_offset_;
  bool apply_exponential_on_box_size_;
  bool reverse_output_order_;
  bool sigmoid_score_;
  bool flip_vertically_;
  float score_clipping_thresh_;
  float min_score_thresh_;
  int32_t num_values_per_keypoint_;
  int32_t max_results_;
  union BoxIndicesUnion {
    constexpr BoxIndicesUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* box_boundaries_indices_;
  } box_indices_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fdetections_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorsToDetectionsCalculatorOptions_TensorMapping

// optional int32 detections_tensor_index = 1;
inline bool TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_has_detections_tensor_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions_TensorMapping::has_detections_tensor_index() const {
  return _internal_has_detections_tensor_index();
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::clear_detections_tensor_index() {
  detections_tensor_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_detections_tensor_index() const {
  return detections_tensor_index_;
}
inline int32_t TensorsToDetectionsCalculatorOptions_TensorMapping::detections_tensor_index() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping.detections_tensor_index)
  return _internal_detections_tensor_index();
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_set_detections_tensor_index(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  detections_tensor_index_ = value;
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::set_detections_tensor_index(int32_t value) {
  _internal_set_detections_tensor_index(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping.detections_tensor_index)
}

// optional int32 classes_tensor_index = 2;
inline bool TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_has_classes_tensor_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions_TensorMapping::has_classes_tensor_index() const {
  return _internal_has_classes_tensor_index();
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::clear_classes_tensor_index() {
  classes_tensor_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_classes_tensor_index() const {
  return classes_tensor_index_;
}
inline int32_t TensorsToDetectionsCalculatorOptions_TensorMapping::classes_tensor_index() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping.classes_tensor_index)
  return _internal_classes_tensor_index();
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_set_classes_tensor_index(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  classes_tensor_index_ = value;
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::set_classes_tensor_index(int32_t value) {
  _internal_set_classes_tensor_index(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping.classes_tensor_index)
}

// optional int32 scores_tensor_index = 3;
inline bool TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_has_scores_tensor_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions_TensorMapping::has_scores_tensor_index() const {
  return _internal_has_scores_tensor_index();
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::clear_scores_tensor_index() {
  scores_tensor_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_scores_tensor_index() const {
  return scores_tensor_index_;
}
inline int32_t TensorsToDetectionsCalculatorOptions_TensorMapping::scores_tensor_index() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping.scores_tensor_index)
  return _internal_scores_tensor_index();
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_set_scores_tensor_index(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  scores_tensor_index_ = value;
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::set_scores_tensor_index(int32_t value) {
  _internal_set_scores_tensor_index(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping.scores_tensor_index)
}

// optional int32 num_detections_tensor_index = 4;
inline bool TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_has_num_detections_tensor_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions_TensorMapping::has_num_detections_tensor_index() const {
  return _internal_has_num_detections_tensor_index();
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::clear_num_detections_tensor_index() {
  num_detections_tensor_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_num_detections_tensor_index() const {
  return num_detections_tensor_index_;
}
inline int32_t TensorsToDetectionsCalculatorOptions_TensorMapping::num_detections_tensor_index() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping.num_detections_tensor_index)
  return _internal_num_detections_tensor_index();
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_set_num_detections_tensor_index(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  num_detections_tensor_index_ = value;
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::set_num_detections_tensor_index(int32_t value) {
  _internal_set_num_detections_tensor_index(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping.num_detections_tensor_index)
}

// optional int32 anchors_tensor_index = 5;
inline bool TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_has_anchors_tensor_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions_TensorMapping::has_anchors_tensor_index() const {
  return _internal_has_anchors_tensor_index();
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::clear_anchors_tensor_index() {
  anchors_tensor_index_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_anchors_tensor_index() const {
  return anchors_tensor_index_;
}
inline int32_t TensorsToDetectionsCalculatorOptions_TensorMapping::anchors_tensor_index() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping.anchors_tensor_index)
  return _internal_anchors_tensor_index();
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::_internal_set_anchors_tensor_index(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  anchors_tensor_index_ = value;
}
inline void TensorsToDetectionsCalculatorOptions_TensorMapping::set_anchors_tensor_index(int32_t value) {
  _internal_set_anchors_tensor_index(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping.anchors_tensor_index)
}

// -------------------------------------------------------------------

// TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices

// optional int32 ymin = 1 [default = 0];
inline bool TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_has_ymin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::has_ymin() const {
  return _internal_has_ymin();
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::clear_ymin() {
  ymin_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_ymin() const {
  return ymin_;
}
inline int32_t TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::ymin() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices.ymin)
  return _internal_ymin();
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_set_ymin(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ymin_ = value;
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::set_ymin(int32_t value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices.ymin)
}

// optional int32 xmin = 2 [default = 1];
inline bool TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_has_xmin() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::has_xmin() const {
  return _internal_has_xmin();
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::clear_xmin() {
  xmin_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_xmin() const {
  return xmin_;
}
inline int32_t TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::xmin() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices.xmin)
  return _internal_xmin();
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_set_xmin(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  xmin_ = value;
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::set_xmin(int32_t value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices.xmin)
}

// optional int32 ymax = 3 [default = 2];
inline bool TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_has_ymax() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::has_ymax() const {
  return _internal_has_ymax();
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::clear_ymax() {
  ymax_ = 2;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_ymax() const {
  return ymax_;
}
inline int32_t TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::ymax() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices.ymax)
  return _internal_ymax();
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_set_ymax(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  ymax_ = value;
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::set_ymax(int32_t value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices.ymax)
}

// optional int32 xmax = 4 [default = 3];
inline bool TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_has_xmax() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::has_xmax() const {
  return _internal_has_xmax();
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::clear_xmax() {
  xmax_ = 3;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_xmax() const {
  return xmax_;
}
inline int32_t TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::xmax() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices.xmax)
  return _internal_xmax();
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::_internal_set_xmax(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  xmax_ = value;
}
inline void TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices::set_xmax(int32_t value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices.xmax)
}

// -------------------------------------------------------------------

// TensorsToDetectionsCalculatorOptions

// optional int32 num_classes = 1;
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_num_classes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void TensorsToDetectionsCalculatorOptions::clear_num_classes() {
  num_classes_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TensorsToDetectionsCalculatorOptions::_internal_num_classes() const {
  return num_classes_;
}
inline int32_t TensorsToDetectionsCalculatorOptions::num_classes() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.num_classes)
  return _internal_num_classes();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_num_classes(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_classes_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_num_classes(int32_t value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.num_classes)
}

// optional int32 num_boxes = 2;
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_num_boxes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_num_boxes() const {
  return _internal_has_num_boxes();
}
inline void TensorsToDetectionsCalculatorOptions::clear_num_boxes() {
  num_boxes_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TensorsToDetectionsCalculatorOptions::_internal_num_boxes() const {
  return num_boxes_;
}
inline int32_t TensorsToDetectionsCalculatorOptions::num_boxes() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.num_boxes)
  return _internal_num_boxes();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_num_boxes(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  num_boxes_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_num_boxes(int32_t value) {
  _internal_set_num_boxes(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.num_boxes)
}

// optional int32 num_coords = 3;
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_num_coords() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_num_coords() const {
  return _internal_has_num_coords();
}
inline void TensorsToDetectionsCalculatorOptions::clear_num_coords() {
  num_coords_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t TensorsToDetectionsCalculatorOptions::_internal_num_coords() const {
  return num_coords_;
}
inline int32_t TensorsToDetectionsCalculatorOptions::num_coords() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.num_coords)
  return _internal_num_coords();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_num_coords(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  num_coords_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_num_coords(int32_t value) {
  _internal_set_num_coords(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.num_coords)
}

// optional int32 keypoint_coord_offset = 9;
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_keypoint_coord_offset() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_keypoint_coord_offset() const {
  return _internal_has_keypoint_coord_offset();
}
inline void TensorsToDetectionsCalculatorOptions::clear_keypoint_coord_offset() {
  keypoint_coord_offset_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t TensorsToDetectionsCalculatorOptions::_internal_keypoint_coord_offset() const {
  return keypoint_coord_offset_;
}
inline int32_t TensorsToDetectionsCalculatorOptions::keypoint_coord_offset() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.keypoint_coord_offset)
  return _internal_keypoint_coord_offset();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_keypoint_coord_offset(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  keypoint_coord_offset_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_keypoint_coord_offset(int32_t value) {
  _internal_set_keypoint_coord_offset(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.keypoint_coord_offset)
}

// optional int32 num_keypoints = 10 [default = 0];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_num_keypoints() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_num_keypoints() const {
  return _internal_has_num_keypoints();
}
inline void TensorsToDetectionsCalculatorOptions::clear_num_keypoints() {
  num_keypoints_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t TensorsToDetectionsCalculatorOptions::_internal_num_keypoints() const {
  return num_keypoints_;
}
inline int32_t TensorsToDetectionsCalculatorOptions::num_keypoints() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.num_keypoints)
  return _internal_num_keypoints();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_num_keypoints(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  num_keypoints_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_num_keypoints(int32_t value) {
  _internal_set_num_keypoints(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.num_keypoints)
}

// optional int32 num_values_per_keypoint = 11 [default = 2];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_num_values_per_keypoint() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_num_values_per_keypoint() const {
  return _internal_has_num_values_per_keypoint();
}
inline void TensorsToDetectionsCalculatorOptions::clear_num_values_per_keypoint() {
  num_values_per_keypoint_ = 2;
  _has_bits_[0] &= ~0x00020000u;
}
inline int32_t TensorsToDetectionsCalculatorOptions::_internal_num_values_per_keypoint() const {
  return num_values_per_keypoint_;
}
inline int32_t TensorsToDetectionsCalculatorOptions::num_values_per_keypoint() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.num_values_per_keypoint)
  return _internal_num_values_per_keypoint();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_num_values_per_keypoint(int32_t value) {
  _has_bits_[0] |= 0x00020000u;
  num_values_per_keypoint_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_num_values_per_keypoint(int32_t value) {
  _internal_set_num_values_per_keypoint(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.num_values_per_keypoint)
}

// optional int32 box_coord_offset = 12 [default = 0];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_box_coord_offset() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_box_coord_offset() const {
  return _internal_has_box_coord_offset();
}
inline void TensorsToDetectionsCalculatorOptions::clear_box_coord_offset() {
  box_coord_offset_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t TensorsToDetectionsCalculatorOptions::_internal_box_coord_offset() const {
  return box_coord_offset_;
}
inline int32_t TensorsToDetectionsCalculatorOptions::box_coord_offset() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.box_coord_offset)
  return _internal_box_coord_offset();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_box_coord_offset(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  box_coord_offset_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_box_coord_offset(int32_t value) {
  _internal_set_box_coord_offset(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.box_coord_offset)
}

// optional float x_scale = 4 [default = 0];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_x_scale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_x_scale() const {
  return _internal_has_x_scale();
}
inline void TensorsToDetectionsCalculatorOptions::clear_x_scale() {
  x_scale_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TensorsToDetectionsCalculatorOptions::_internal_x_scale() const {
  return x_scale_;
}
inline float TensorsToDetectionsCalculatorOptions::x_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.x_scale)
  return _internal_x_scale();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_x_scale(float value) {
  _has_bits_[0] |= 0x00000010u;
  x_scale_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_x_scale(float value) {
  _internal_set_x_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.x_scale)
}

// optional float y_scale = 5 [default = 0];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_y_scale() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_y_scale() const {
  return _internal_has_y_scale();
}
inline void TensorsToDetectionsCalculatorOptions::clear_y_scale() {
  y_scale_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TensorsToDetectionsCalculatorOptions::_internal_y_scale() const {
  return y_scale_;
}
inline float TensorsToDetectionsCalculatorOptions::y_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.y_scale)
  return _internal_y_scale();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_y_scale(float value) {
  _has_bits_[0] |= 0x00000020u;
  y_scale_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_y_scale(float value) {
  _internal_set_y_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.y_scale)
}

// optional float w_scale = 6 [default = 0];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_w_scale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_w_scale() const {
  return _internal_has_w_scale();
}
inline void TensorsToDetectionsCalculatorOptions::clear_w_scale() {
  w_scale_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TensorsToDetectionsCalculatorOptions::_internal_w_scale() const {
  return w_scale_;
}
inline float TensorsToDetectionsCalculatorOptions::w_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.w_scale)
  return _internal_w_scale();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_w_scale(float value) {
  _has_bits_[0] |= 0x00000040u;
  w_scale_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_w_scale(float value) {
  _internal_set_w_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.w_scale)
}

// optional float h_scale = 7 [default = 0];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_h_scale() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_h_scale() const {
  return _internal_has_h_scale();
}
inline void TensorsToDetectionsCalculatorOptions::clear_h_scale() {
  h_scale_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TensorsToDetectionsCalculatorOptions::_internal_h_scale() const {
  return h_scale_;
}
inline float TensorsToDetectionsCalculatorOptions::h_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.h_scale)
  return _internal_h_scale();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_h_scale(float value) {
  _has_bits_[0] |= 0x00000080u;
  h_scale_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_h_scale(float value) {
  _internal_set_h_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.h_scale)
}

// optional bool apply_exponential_on_box_size = 13 [default = false];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_apply_exponential_on_box_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_apply_exponential_on_box_size() const {
  return _internal_has_apply_exponential_on_box_size();
}
inline void TensorsToDetectionsCalculatorOptions::clear_apply_exponential_on_box_size() {
  apply_exponential_on_box_size_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TensorsToDetectionsCalculatorOptions::_internal_apply_exponential_on_box_size() const {
  return apply_exponential_on_box_size_;
}
inline bool TensorsToDetectionsCalculatorOptions::apply_exponential_on_box_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.apply_exponential_on_box_size)
  return _internal_apply_exponential_on_box_size();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_apply_exponential_on_box_size(bool value) {
  _has_bits_[0] |= 0x00000800u;
  apply_exponential_on_box_size_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_apply_exponential_on_box_size(bool value) {
  _internal_set_apply_exponential_on_box_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.apply_exponential_on_box_size)
}

// optional bool reverse_output_order = 14 [default = false];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_reverse_output_order() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_reverse_output_order() const {
  return _internal_has_reverse_output_order();
}
inline void TensorsToDetectionsCalculatorOptions::clear_reverse_output_order() {
  reverse_output_order_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool TensorsToDetectionsCalculatorOptions::_internal_reverse_output_order() const {
  return reverse_output_order_;
}
inline bool TensorsToDetectionsCalculatorOptions::reverse_output_order() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.reverse_output_order)
  return _internal_reverse_output_order();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_reverse_output_order(bool value) {
  _has_bits_[0] |= 0x00001000u;
  reverse_output_order_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_reverse_output_order(bool value) {
  _internal_set_reverse_output_order(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.reverse_output_order)
}

// repeated int32 ignore_classes = 8;
inline int TensorsToDetectionsCalculatorOptions::_internal_ignore_classes_size() const {
  return ignore_classes_.size();
}
inline int TensorsToDetectionsCalculatorOptions::ignore_classes_size() const {
  return _internal_ignore_classes_size();
}
inline void TensorsToDetectionsCalculatorOptions::clear_ignore_classes() {
  ignore_classes_.Clear();
}
inline int32_t TensorsToDetectionsCalculatorOptions::_internal_ignore_classes(int index) const {
  return ignore_classes_.Get(index);
}
inline int32_t TensorsToDetectionsCalculatorOptions::ignore_classes(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.ignore_classes)
  return _internal_ignore_classes(index);
}
inline void TensorsToDetectionsCalculatorOptions::set_ignore_classes(int index, int32_t value) {
  ignore_classes_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.ignore_classes)
}
inline void TensorsToDetectionsCalculatorOptions::_internal_add_ignore_classes(int32_t value) {
  ignore_classes_.Add(value);
}
inline void TensorsToDetectionsCalculatorOptions::add_ignore_classes(int32_t value) {
  _internal_add_ignore_classes(value);
  // @@protoc_insertion_point(field_add:mediapipe.TensorsToDetectionsCalculatorOptions.ignore_classes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TensorsToDetectionsCalculatorOptions::_internal_ignore_classes() const {
  return ignore_classes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TensorsToDetectionsCalculatorOptions::ignore_classes() const {
  // @@protoc_insertion_point(field_list:mediapipe.TensorsToDetectionsCalculatorOptions.ignore_classes)
  return _internal_ignore_classes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TensorsToDetectionsCalculatorOptions::_internal_mutable_ignore_classes() {
  return &ignore_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TensorsToDetectionsCalculatorOptions::mutable_ignore_classes() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TensorsToDetectionsCalculatorOptions.ignore_classes)
  return _internal_mutable_ignore_classes();
}

// repeated int32 allow_classes = 21 [packed = true];
inline int TensorsToDetectionsCalculatorOptions::_internal_allow_classes_size() const {
  return allow_classes_.size();
}
inline int TensorsToDetectionsCalculatorOptions::allow_classes_size() const {
  return _internal_allow_classes_size();
}
inline void TensorsToDetectionsCalculatorOptions::clear_allow_classes() {
  allow_classes_.Clear();
}
inline int32_t TensorsToDetectionsCalculatorOptions::_internal_allow_classes(int index) const {
  return allow_classes_.Get(index);
}
inline int32_t TensorsToDetectionsCalculatorOptions::allow_classes(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.allow_classes)
  return _internal_allow_classes(index);
}
inline void TensorsToDetectionsCalculatorOptions::set_allow_classes(int index, int32_t value) {
  allow_classes_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.allow_classes)
}
inline void TensorsToDetectionsCalculatorOptions::_internal_add_allow_classes(int32_t value) {
  allow_classes_.Add(value);
}
inline void TensorsToDetectionsCalculatorOptions::add_allow_classes(int32_t value) {
  _internal_add_allow_classes(value);
  // @@protoc_insertion_point(field_add:mediapipe.TensorsToDetectionsCalculatorOptions.allow_classes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TensorsToDetectionsCalculatorOptions::_internal_allow_classes() const {
  return allow_classes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TensorsToDetectionsCalculatorOptions::allow_classes() const {
  // @@protoc_insertion_point(field_list:mediapipe.TensorsToDetectionsCalculatorOptions.allow_classes)
  return _internal_allow_classes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TensorsToDetectionsCalculatorOptions::_internal_mutable_allow_classes() {
  return &allow_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TensorsToDetectionsCalculatorOptions::mutable_allow_classes() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TensorsToDetectionsCalculatorOptions.allow_classes)
  return _internal_mutable_allow_classes();
}

// optional bool sigmoid_score = 15 [default = false];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_sigmoid_score() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_sigmoid_score() const {
  return _internal_has_sigmoid_score();
}
inline void TensorsToDetectionsCalculatorOptions::clear_sigmoid_score() {
  sigmoid_score_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool TensorsToDetectionsCalculatorOptions::_internal_sigmoid_score() const {
  return sigmoid_score_;
}
inline bool TensorsToDetectionsCalculatorOptions::sigmoid_score() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.sigmoid_score)
  return _internal_sigmoid_score();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_sigmoid_score(bool value) {
  _has_bits_[0] |= 0x00002000u;
  sigmoid_score_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_sigmoid_score(bool value) {
  _internal_set_sigmoid_score(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.sigmoid_score)
}

// optional float score_clipping_thresh = 16;
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_score_clipping_thresh() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_score_clipping_thresh() const {
  return _internal_has_score_clipping_thresh();
}
inline void TensorsToDetectionsCalculatorOptions::clear_score_clipping_thresh() {
  score_clipping_thresh_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float TensorsToDetectionsCalculatorOptions::_internal_score_clipping_thresh() const {
  return score_clipping_thresh_;
}
inline float TensorsToDetectionsCalculatorOptions::score_clipping_thresh() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.score_clipping_thresh)
  return _internal_score_clipping_thresh();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_score_clipping_thresh(float value) {
  _has_bits_[0] |= 0x00008000u;
  score_clipping_thresh_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_score_clipping_thresh(float value) {
  _internal_set_score_clipping_thresh(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.score_clipping_thresh)
}

// optional bool flip_vertically = 18 [default = false];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_flip_vertically() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_flip_vertically() const {
  return _internal_has_flip_vertically();
}
inline void TensorsToDetectionsCalculatorOptions::clear_flip_vertically() {
  flip_vertically_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool TensorsToDetectionsCalculatorOptions::_internal_flip_vertically() const {
  return flip_vertically_;
}
inline bool TensorsToDetectionsCalculatorOptions::flip_vertically() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.flip_vertically)
  return _internal_flip_vertically();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_flip_vertically(bool value) {
  _has_bits_[0] |= 0x00004000u;
  flip_vertically_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_flip_vertically(bool value) {
  _internal_set_flip_vertically(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.flip_vertically)
}

// optional float min_score_thresh = 19;
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_min_score_thresh() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_min_score_thresh() const {
  return _internal_has_min_score_thresh();
}
inline void TensorsToDetectionsCalculatorOptions::clear_min_score_thresh() {
  min_score_thresh_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float TensorsToDetectionsCalculatorOptions::_internal_min_score_thresh() const {
  return min_score_thresh_;
}
inline float TensorsToDetectionsCalculatorOptions::min_score_thresh() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.min_score_thresh)
  return _internal_min_score_thresh();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_min_score_thresh(float value) {
  _has_bits_[0] |= 0x00010000u;
  min_score_thresh_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_min_score_thresh(float value) {
  _internal_set_min_score_thresh(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.min_score_thresh)
}

// optional int32 max_results = 20 [default = -1];
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_max_results() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_max_results() const {
  return _internal_has_max_results();
}
inline void TensorsToDetectionsCalculatorOptions::clear_max_results() {
  max_results_ = -1;
  _has_bits_[0] &= ~0x00040000u;
}
inline int32_t TensorsToDetectionsCalculatorOptions::_internal_max_results() const {
  return max_results_;
}
inline int32_t TensorsToDetectionsCalculatorOptions::max_results() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.max_results)
  return _internal_max_results();
}
inline void TensorsToDetectionsCalculatorOptions::_internal_set_max_results(int32_t value) {
  _has_bits_[0] |= 0x00040000u;
  max_results_ = value;
}
inline void TensorsToDetectionsCalculatorOptions::set_max_results(int32_t value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToDetectionsCalculatorOptions.max_results)
}

// optional .mediapipe.TensorsToDetectionsCalculatorOptions.TensorMapping tensor_mapping = 22;
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_tensor_mapping() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tensor_mapping_ != nullptr);
  return value;
}
inline bool TensorsToDetectionsCalculatorOptions::has_tensor_mapping() const {
  return _internal_has_tensor_mapping();
}
inline void TensorsToDetectionsCalculatorOptions::clear_tensor_mapping() {
  if (tensor_mapping_ != nullptr) tensor_mapping_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping& TensorsToDetectionsCalculatorOptions::_internal_tensor_mapping() const {
  const ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* p = tensor_mapping_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping&>(
      ::mediapipe::_TensorsToDetectionsCalculatorOptions_TensorMapping_default_instance_);
}
inline const ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping& TensorsToDetectionsCalculatorOptions::tensor_mapping() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.tensor_mapping)
  return _internal_tensor_mapping();
}
inline void TensorsToDetectionsCalculatorOptions::unsafe_arena_set_allocated_tensor_mapping(
    ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* tensor_mapping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_mapping_);
  }
  tensor_mapping_ = tensor_mapping;
  if (tensor_mapping) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TensorsToDetectionsCalculatorOptions.tensor_mapping)
}
inline ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* TensorsToDetectionsCalculatorOptions::release_tensor_mapping() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* temp = tensor_mapping_;
  tensor_mapping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* TensorsToDetectionsCalculatorOptions::unsafe_arena_release_tensor_mapping() {
  // @@protoc_insertion_point(field_release:mediapipe.TensorsToDetectionsCalculatorOptions.tensor_mapping)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* temp = tensor_mapping_;
  tensor_mapping_ = nullptr;
  return temp;
}
inline ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* TensorsToDetectionsCalculatorOptions::_internal_mutable_tensor_mapping() {
  _has_bits_[0] |= 0x00000001u;
  if (tensor_mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping>(GetArenaForAllocation());
    tensor_mapping_ = p;
  }
  return tensor_mapping_;
}
inline ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* TensorsToDetectionsCalculatorOptions::mutable_tensor_mapping() {
  ::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* _msg = _internal_mutable_tensor_mapping();
  // @@protoc_insertion_point(field_mutable:mediapipe.TensorsToDetectionsCalculatorOptions.tensor_mapping)
  return _msg;
}
inline void TensorsToDetectionsCalculatorOptions::set_allocated_tensor_mapping(::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping* tensor_mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tensor_mapping_;
  }
  if (tensor_mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mediapipe::TensorsToDetectionsCalculatorOptions_TensorMapping>::GetOwningArena(tensor_mapping);
    if (message_arena != submessage_arena) {
      tensor_mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_mapping, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tensor_mapping_ = tensor_mapping;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TensorsToDetectionsCalculatorOptions.tensor_mapping)
}

// .mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundariesIndices box_boundaries_indices = 23;
inline bool TensorsToDetectionsCalculatorOptions::_internal_has_box_boundaries_indices() const {
  return box_indices_case() == kBoxBoundariesIndices;
}
inline bool TensorsToDetectionsCalculatorOptions::has_box_boundaries_indices() const {
  return _internal_has_box_boundaries_indices();
}
inline void TensorsToDetectionsCalculatorOptions::set_has_box_boundaries_indices() {
  _oneof_case_[0] = kBoxBoundariesIndices;
}
inline void TensorsToDetectionsCalculatorOptions::clear_box_boundaries_indices() {
  if (_internal_has_box_boundaries_indices()) {
    if (GetArenaForAllocation() == nullptr) {
      delete box_indices_.box_boundaries_indices_;
    }
    clear_has_box_indices();
  }
}
inline ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* TensorsToDetectionsCalculatorOptions::release_box_boundaries_indices() {
  // @@protoc_insertion_point(field_release:mediapipe.TensorsToDetectionsCalculatorOptions.box_boundaries_indices)
  if (_internal_has_box_boundaries_indices()) {
    clear_has_box_indices();
      ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* temp = box_indices_.box_boundaries_indices_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    box_indices_.box_boundaries_indices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& TensorsToDetectionsCalculatorOptions::_internal_box_boundaries_indices() const {
  return _internal_has_box_boundaries_indices()
      ? *box_indices_.box_boundaries_indices_
      : reinterpret_cast< ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices&>(::mediapipe::_TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices_default_instance_);
}
inline const ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices& TensorsToDetectionsCalculatorOptions::box_boundaries_indices() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToDetectionsCalculatorOptions.box_boundaries_indices)
  return _internal_box_boundaries_indices();
}
inline ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* TensorsToDetectionsCalculatorOptions::unsafe_arena_release_box_boundaries_indices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.TensorsToDetectionsCalculatorOptions.box_boundaries_indices)
  if (_internal_has_box_boundaries_indices()) {
    clear_has_box_indices();
    ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* temp = box_indices_.box_boundaries_indices_;
    box_indices_.box_boundaries_indices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TensorsToDetectionsCalculatorOptions::unsafe_arena_set_allocated_box_boundaries_indices(::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* box_boundaries_indices) {
  clear_box_indices();
  if (box_boundaries_indices) {
    set_has_box_boundaries_indices();
    box_indices_.box_boundaries_indices_ = box_boundaries_indices;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TensorsToDetectionsCalculatorOptions.box_boundaries_indices)
}
inline ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* TensorsToDetectionsCalculatorOptions::_internal_mutable_box_boundaries_indices() {
  if (!_internal_has_box_boundaries_indices()) {
    clear_box_indices();
    set_has_box_boundaries_indices();
    box_indices_.box_boundaries_indices_ = CreateMaybeMessage< ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices >(GetArenaForAllocation());
  }
  return box_indices_.box_boundaries_indices_;
}
inline ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* TensorsToDetectionsCalculatorOptions::mutable_box_boundaries_indices() {
  ::mediapipe::TensorsToDetectionsCalculatorOptions_BoxBoundariesIndices* _msg = _internal_mutable_box_boundaries_indices();
  // @@protoc_insertion_point(field_mutable:mediapipe.TensorsToDetectionsCalculatorOptions.box_boundaries_indices)
  return _msg;
}

inline bool TensorsToDetectionsCalculatorOptions::has_box_indices() const {
  return box_indices_case() != BOX_INDICES_NOT_SET;
}
inline void TensorsToDetectionsCalculatorOptions::clear_has_box_indices() {
  _oneof_case_[0] = BOX_INDICES_NOT_SET;
}
inline TensorsToDetectionsCalculatorOptions::BoxIndicesCase TensorsToDetectionsCalculatorOptions::box_indices_case() const {
  return TensorsToDetectionsCalculatorOptions::BoxIndicesCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fdetections_5fcalculator_2eproto
