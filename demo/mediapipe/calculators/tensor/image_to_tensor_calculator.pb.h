// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/tensor/image_to_tensor_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2fimage_5fto_5ftensor_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2fimage_5fto_5ftensor_5fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
#include "mediapipe/gpu/gpu_origin.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2ftensor_2fimage_5fto_5ftensor_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2ftensor_2fimage_5fto_5ftensor_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2ftensor_2fimage_5fto_5ftensor_5fcalculator_2eproto;
namespace mediapipe {
class ImageToTensorCalculatorOptions;
struct ImageToTensorCalculatorOptionsDefaultTypeInternal;
extern ImageToTensorCalculatorOptionsDefaultTypeInternal _ImageToTensorCalculatorOptions_default_instance_;
class ImageToTensorCalculatorOptions_FloatRange;
struct ImageToTensorCalculatorOptions_FloatRangeDefaultTypeInternal;
extern ImageToTensorCalculatorOptions_FloatRangeDefaultTypeInternal _ImageToTensorCalculatorOptions_FloatRange_default_instance_;
class ImageToTensorCalculatorOptions_IntRange;
struct ImageToTensorCalculatorOptions_IntRangeDefaultTypeInternal;
extern ImageToTensorCalculatorOptions_IntRangeDefaultTypeInternal _ImageToTensorCalculatorOptions_IntRange_default_instance_;
class ImageToTensorCalculatorOptions_UIntRange;
struct ImageToTensorCalculatorOptions_UIntRangeDefaultTypeInternal;
extern ImageToTensorCalculatorOptions_UIntRangeDefaultTypeInternal _ImageToTensorCalculatorOptions_UIntRange_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::ImageToTensorCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::ImageToTensorCalculatorOptions>(Arena*);
template<> ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* Arena::CreateMaybeMessage<::mediapipe::ImageToTensorCalculatorOptions_FloatRange>(Arena*);
template<> ::mediapipe::ImageToTensorCalculatorOptions_IntRange* Arena::CreateMaybeMessage<::mediapipe::ImageToTensorCalculatorOptions_IntRange>(Arena*);
template<> ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* Arena::CreateMaybeMessage<::mediapipe::ImageToTensorCalculatorOptions_UIntRange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum ImageToTensorCalculatorOptions_BorderMode : int {
  ImageToTensorCalculatorOptions_BorderMode_BORDER_UNSPECIFIED = 0,
  ImageToTensorCalculatorOptions_BorderMode_BORDER_ZERO = 1,
  ImageToTensorCalculatorOptions_BorderMode_BORDER_REPLICATE = 2
};
bool ImageToTensorCalculatorOptions_BorderMode_IsValid(int value);
constexpr ImageToTensorCalculatorOptions_BorderMode ImageToTensorCalculatorOptions_BorderMode_BorderMode_MIN = ImageToTensorCalculatorOptions_BorderMode_BORDER_UNSPECIFIED;
constexpr ImageToTensorCalculatorOptions_BorderMode ImageToTensorCalculatorOptions_BorderMode_BorderMode_MAX = ImageToTensorCalculatorOptions_BorderMode_BORDER_REPLICATE;
constexpr int ImageToTensorCalculatorOptions_BorderMode_BorderMode_ARRAYSIZE = ImageToTensorCalculatorOptions_BorderMode_BorderMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageToTensorCalculatorOptions_BorderMode_descriptor();
template<typename T>
inline const std::string& ImageToTensorCalculatorOptions_BorderMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageToTensorCalculatorOptions_BorderMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageToTensorCalculatorOptions_BorderMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageToTensorCalculatorOptions_BorderMode_descriptor(), enum_t_value);
}
inline bool ImageToTensorCalculatorOptions_BorderMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageToTensorCalculatorOptions_BorderMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageToTensorCalculatorOptions_BorderMode>(
    ImageToTensorCalculatorOptions_BorderMode_descriptor(), name, value);
}
// ===================================================================

class ImageToTensorCalculatorOptions_FloatRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ImageToTensorCalculatorOptions.FloatRange) */ {
 public:
  inline ImageToTensorCalculatorOptions_FloatRange() : ImageToTensorCalculatorOptions_FloatRange(nullptr) {}
  ~ImageToTensorCalculatorOptions_FloatRange() override;
  explicit constexpr ImageToTensorCalculatorOptions_FloatRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageToTensorCalculatorOptions_FloatRange(const ImageToTensorCalculatorOptions_FloatRange& from);
  ImageToTensorCalculatorOptions_FloatRange(ImageToTensorCalculatorOptions_FloatRange&& from) noexcept
    : ImageToTensorCalculatorOptions_FloatRange() {
    *this = ::std::move(from);
  }

  inline ImageToTensorCalculatorOptions_FloatRange& operator=(const ImageToTensorCalculatorOptions_FloatRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageToTensorCalculatorOptions_FloatRange& operator=(ImageToTensorCalculatorOptions_FloatRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageToTensorCalculatorOptions_FloatRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageToTensorCalculatorOptions_FloatRange* internal_default_instance() {
    return reinterpret_cast<const ImageToTensorCalculatorOptions_FloatRange*>(
               &_ImageToTensorCalculatorOptions_FloatRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageToTensorCalculatorOptions_FloatRange& a, ImageToTensorCalculatorOptions_FloatRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageToTensorCalculatorOptions_FloatRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageToTensorCalculatorOptions_FloatRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageToTensorCalculatorOptions_FloatRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageToTensorCalculatorOptions_FloatRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageToTensorCalculatorOptions_FloatRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageToTensorCalculatorOptions_FloatRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageToTensorCalculatorOptions_FloatRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ImageToTensorCalculatorOptions.FloatRange";
  }
  protected:
  explicit ImageToTensorCalculatorOptions_FloatRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // optional float min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // optional float max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ImageToTensorCalculatorOptions.FloatRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float min_;
  float max_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftensor_2fimage_5fto_5ftensor_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class ImageToTensorCalculatorOptions_IntRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ImageToTensorCalculatorOptions.IntRange) */ {
 public:
  inline ImageToTensorCalculatorOptions_IntRange() : ImageToTensorCalculatorOptions_IntRange(nullptr) {}
  ~ImageToTensorCalculatorOptions_IntRange() override;
  explicit constexpr ImageToTensorCalculatorOptions_IntRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageToTensorCalculatorOptions_IntRange(const ImageToTensorCalculatorOptions_IntRange& from);
  ImageToTensorCalculatorOptions_IntRange(ImageToTensorCalculatorOptions_IntRange&& from) noexcept
    : ImageToTensorCalculatorOptions_IntRange() {
    *this = ::std::move(from);
  }

  inline ImageToTensorCalculatorOptions_IntRange& operator=(const ImageToTensorCalculatorOptions_IntRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageToTensorCalculatorOptions_IntRange& operator=(ImageToTensorCalculatorOptions_IntRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageToTensorCalculatorOptions_IntRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageToTensorCalculatorOptions_IntRange* internal_default_instance() {
    return reinterpret_cast<const ImageToTensorCalculatorOptions_IntRange*>(
               &_ImageToTensorCalculatorOptions_IntRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImageToTensorCalculatorOptions_IntRange& a, ImageToTensorCalculatorOptions_IntRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageToTensorCalculatorOptions_IntRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageToTensorCalculatorOptions_IntRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageToTensorCalculatorOptions_IntRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageToTensorCalculatorOptions_IntRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageToTensorCalculatorOptions_IntRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageToTensorCalculatorOptions_IntRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageToTensorCalculatorOptions_IntRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ImageToTensorCalculatorOptions.IntRange";
  }
  protected:
  explicit ImageToTensorCalculatorOptions_IntRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // optional int64 min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  int64_t min() const;
  void set_min(int64_t value);
  private:
  int64_t _internal_min() const;
  void _internal_set_min(int64_t value);
  public:

  // optional int64 max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  int64_t max() const;
  void set_max(int64_t value);
  private:
  int64_t _internal_max() const;
  void _internal_set_max(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ImageToTensorCalculatorOptions.IntRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t min_;
  int64_t max_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftensor_2fimage_5fto_5ftensor_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class ImageToTensorCalculatorOptions_UIntRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ImageToTensorCalculatorOptions.UIntRange) */ {
 public:
  inline ImageToTensorCalculatorOptions_UIntRange() : ImageToTensorCalculatorOptions_UIntRange(nullptr) {}
  ~ImageToTensorCalculatorOptions_UIntRange() override;
  explicit constexpr ImageToTensorCalculatorOptions_UIntRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageToTensorCalculatorOptions_UIntRange(const ImageToTensorCalculatorOptions_UIntRange& from);
  ImageToTensorCalculatorOptions_UIntRange(ImageToTensorCalculatorOptions_UIntRange&& from) noexcept
    : ImageToTensorCalculatorOptions_UIntRange() {
    *this = ::std::move(from);
  }

  inline ImageToTensorCalculatorOptions_UIntRange& operator=(const ImageToTensorCalculatorOptions_UIntRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageToTensorCalculatorOptions_UIntRange& operator=(ImageToTensorCalculatorOptions_UIntRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageToTensorCalculatorOptions_UIntRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageToTensorCalculatorOptions_UIntRange* internal_default_instance() {
    return reinterpret_cast<const ImageToTensorCalculatorOptions_UIntRange*>(
               &_ImageToTensorCalculatorOptions_UIntRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImageToTensorCalculatorOptions_UIntRange& a, ImageToTensorCalculatorOptions_UIntRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageToTensorCalculatorOptions_UIntRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageToTensorCalculatorOptions_UIntRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageToTensorCalculatorOptions_UIntRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageToTensorCalculatorOptions_UIntRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageToTensorCalculatorOptions_UIntRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageToTensorCalculatorOptions_UIntRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageToTensorCalculatorOptions_UIntRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ImageToTensorCalculatorOptions.UIntRange";
  }
  protected:
  explicit ImageToTensorCalculatorOptions_UIntRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // optional uint64 min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  uint64_t min() const;
  void set_min(uint64_t value);
  private:
  uint64_t _internal_min() const;
  void _internal_set_min(uint64_t value);
  public:

  // optional uint64 max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  uint64_t max() const;
  void set_max(uint64_t value);
  private:
  uint64_t _internal_max() const;
  void _internal_set_max(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ImageToTensorCalculatorOptions.UIntRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t min_;
  uint64_t max_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftensor_2fimage_5fto_5ftensor_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class ImageToTensorCalculatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ImageToTensorCalculatorOptions) */ {
 public:
  inline ImageToTensorCalculatorOptions() : ImageToTensorCalculatorOptions(nullptr) {}
  ~ImageToTensorCalculatorOptions() override;
  explicit constexpr ImageToTensorCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageToTensorCalculatorOptions(const ImageToTensorCalculatorOptions& from);
  ImageToTensorCalculatorOptions(ImageToTensorCalculatorOptions&& from) noexcept
    : ImageToTensorCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline ImageToTensorCalculatorOptions& operator=(const ImageToTensorCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageToTensorCalculatorOptions& operator=(ImageToTensorCalculatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageToTensorCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  enum RangeCase {
    kOutputTensorFloatRange = 4,
    kOutputTensorIntRange = 7,
    kOutputTensorUintRange = 8,
    RANGE_NOT_SET = 0,
  };

  static inline const ImageToTensorCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const ImageToTensorCalculatorOptions*>(
               &_ImageToTensorCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ImageToTensorCalculatorOptions& a, ImageToTensorCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageToTensorCalculatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageToTensorCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageToTensorCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageToTensorCalculatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageToTensorCalculatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageToTensorCalculatorOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageToTensorCalculatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ImageToTensorCalculatorOptions";
  }
  protected:
  explicit ImageToTensorCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ImageToTensorCalculatorOptions_FloatRange FloatRange;
  typedef ImageToTensorCalculatorOptions_IntRange IntRange;
  typedef ImageToTensorCalculatorOptions_UIntRange UIntRange;

  typedef ImageToTensorCalculatorOptions_BorderMode BorderMode;
  static constexpr BorderMode BORDER_UNSPECIFIED =
    ImageToTensorCalculatorOptions_BorderMode_BORDER_UNSPECIFIED;
  static constexpr BorderMode BORDER_ZERO =
    ImageToTensorCalculatorOptions_BorderMode_BORDER_ZERO;
  static constexpr BorderMode BORDER_REPLICATE =
    ImageToTensorCalculatorOptions_BorderMode_BORDER_REPLICATE;
  static inline bool BorderMode_IsValid(int value) {
    return ImageToTensorCalculatorOptions_BorderMode_IsValid(value);
  }
  static constexpr BorderMode BorderMode_MIN =
    ImageToTensorCalculatorOptions_BorderMode_BorderMode_MIN;
  static constexpr BorderMode BorderMode_MAX =
    ImageToTensorCalculatorOptions_BorderMode_BorderMode_MAX;
  static constexpr int BorderMode_ARRAYSIZE =
    ImageToTensorCalculatorOptions_BorderMode_BorderMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BorderMode_descriptor() {
    return ImageToTensorCalculatorOptions_BorderMode_descriptor();
  }
  template<typename T>
  static inline const std::string& BorderMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BorderMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BorderMode_Name.");
    return ImageToTensorCalculatorOptions_BorderMode_Name(enum_t_value);
  }
  static inline bool BorderMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BorderMode* value) {
    return ImageToTensorCalculatorOptions_BorderMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutputTensorWidthFieldNumber = 1,
    kOutputTensorHeightFieldNumber = 2,
    kKeepAspectRatioFieldNumber = 3,
    kGpuOriginFieldNumber = 5,
    kBorderModeFieldNumber = 6,
    kOutputTensorFloatRangeFieldNumber = 4,
    kOutputTensorIntRangeFieldNumber = 7,
    kOutputTensorUintRangeFieldNumber = 8,
  };
  // optional int32 output_tensor_width = 1;
  bool has_output_tensor_width() const;
  private:
  bool _internal_has_output_tensor_width() const;
  public:
  void clear_output_tensor_width();
  int32_t output_tensor_width() const;
  void set_output_tensor_width(int32_t value);
  private:
  int32_t _internal_output_tensor_width() const;
  void _internal_set_output_tensor_width(int32_t value);
  public:

  // optional int32 output_tensor_height = 2;
  bool has_output_tensor_height() const;
  private:
  bool _internal_has_output_tensor_height() const;
  public:
  void clear_output_tensor_height();
  int32_t output_tensor_height() const;
  void set_output_tensor_height(int32_t value);
  private:
  int32_t _internal_output_tensor_height() const;
  void _internal_set_output_tensor_height(int32_t value);
  public:

  // optional bool keep_aspect_ratio = 3;
  bool has_keep_aspect_ratio() const;
  private:
  bool _internal_has_keep_aspect_ratio() const;
  public:
  void clear_keep_aspect_ratio();
  bool keep_aspect_ratio() const;
  void set_keep_aspect_ratio(bool value);
  private:
  bool _internal_keep_aspect_ratio() const;
  void _internal_set_keep_aspect_ratio(bool value);
  public:

  // optional .mediapipe.GpuOrigin.Mode gpu_origin = 5;
  bool has_gpu_origin() const;
  private:
  bool _internal_has_gpu_origin() const;
  public:
  void clear_gpu_origin();
  ::mediapipe::GpuOrigin_Mode gpu_origin() const;
  void set_gpu_origin(::mediapipe::GpuOrigin_Mode value);
  private:
  ::mediapipe::GpuOrigin_Mode _internal_gpu_origin() const;
  void _internal_set_gpu_origin(::mediapipe::GpuOrigin_Mode value);
  public:

  // optional .mediapipe.ImageToTensorCalculatorOptions.BorderMode border_mode = 6;
  bool has_border_mode() const;
  private:
  bool _internal_has_border_mode() const;
  public:
  void clear_border_mode();
  ::mediapipe::ImageToTensorCalculatorOptions_BorderMode border_mode() const;
  void set_border_mode(::mediapipe::ImageToTensorCalculatorOptions_BorderMode value);
  private:
  ::mediapipe::ImageToTensorCalculatorOptions_BorderMode _internal_border_mode() const;
  void _internal_set_border_mode(::mediapipe::ImageToTensorCalculatorOptions_BorderMode value);
  public:

  // .mediapipe.ImageToTensorCalculatorOptions.FloatRange output_tensor_float_range = 4;
  bool has_output_tensor_float_range() const;
  private:
  bool _internal_has_output_tensor_float_range() const;
  public:
  void clear_output_tensor_float_range();
  const ::mediapipe::ImageToTensorCalculatorOptions_FloatRange& output_tensor_float_range() const;
  PROTOBUF_NODISCARD ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* release_output_tensor_float_range();
  ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* mutable_output_tensor_float_range();
  void set_allocated_output_tensor_float_range(::mediapipe::ImageToTensorCalculatorOptions_FloatRange* output_tensor_float_range);
  private:
  const ::mediapipe::ImageToTensorCalculatorOptions_FloatRange& _internal_output_tensor_float_range() const;
  ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* _internal_mutable_output_tensor_float_range();
  public:
  void unsafe_arena_set_allocated_output_tensor_float_range(
      ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* output_tensor_float_range);
  ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* unsafe_arena_release_output_tensor_float_range();

  // .mediapipe.ImageToTensorCalculatorOptions.IntRange output_tensor_int_range = 7;
  bool has_output_tensor_int_range() const;
  private:
  bool _internal_has_output_tensor_int_range() const;
  public:
  void clear_output_tensor_int_range();
  const ::mediapipe::ImageToTensorCalculatorOptions_IntRange& output_tensor_int_range() const;
  PROTOBUF_NODISCARD ::mediapipe::ImageToTensorCalculatorOptions_IntRange* release_output_tensor_int_range();
  ::mediapipe::ImageToTensorCalculatorOptions_IntRange* mutable_output_tensor_int_range();
  void set_allocated_output_tensor_int_range(::mediapipe::ImageToTensorCalculatorOptions_IntRange* output_tensor_int_range);
  private:
  const ::mediapipe::ImageToTensorCalculatorOptions_IntRange& _internal_output_tensor_int_range() const;
  ::mediapipe::ImageToTensorCalculatorOptions_IntRange* _internal_mutable_output_tensor_int_range();
  public:
  void unsafe_arena_set_allocated_output_tensor_int_range(
      ::mediapipe::ImageToTensorCalculatorOptions_IntRange* output_tensor_int_range);
  ::mediapipe::ImageToTensorCalculatorOptions_IntRange* unsafe_arena_release_output_tensor_int_range();

  // .mediapipe.ImageToTensorCalculatorOptions.UIntRange output_tensor_uint_range = 8;
  bool has_output_tensor_uint_range() const;
  private:
  bool _internal_has_output_tensor_uint_range() const;
  public:
  void clear_output_tensor_uint_range();
  const ::mediapipe::ImageToTensorCalculatorOptions_UIntRange& output_tensor_uint_range() const;
  PROTOBUF_NODISCARD ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* release_output_tensor_uint_range();
  ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* mutable_output_tensor_uint_range();
  void set_allocated_output_tensor_uint_range(::mediapipe::ImageToTensorCalculatorOptions_UIntRange* output_tensor_uint_range);
  private:
  const ::mediapipe::ImageToTensorCalculatorOptions_UIntRange& _internal_output_tensor_uint_range() const;
  ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* _internal_mutable_output_tensor_uint_range();
  public:
  void unsafe_arena_set_allocated_output_tensor_uint_range(
      ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* output_tensor_uint_range);
  ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* unsafe_arena_release_output_tensor_uint_range();

  void clear_range();
  RangeCase range_case() const;
  static const int kExtFieldNumber = 334361939;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::ImageToTensorCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.ImageToTensorCalculatorOptions)
 private:
  class _Internal;
  void set_has_output_tensor_float_range();
  void set_has_output_tensor_int_range();
  void set_has_output_tensor_uint_range();

  inline bool has_range() const;
  inline void clear_has_range();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t output_tensor_width_;
  int32_t output_tensor_height_;
  bool keep_aspect_ratio_;
  int gpu_origin_;
  int border_mode_;
  union RangeUnion {
    constexpr RangeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* output_tensor_float_range_;
    ::mediapipe::ImageToTensorCalculatorOptions_IntRange* output_tensor_int_range_;
    ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* output_tensor_uint_range_;
  } range_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_mediapipe_2fcalculators_2ftensor_2fimage_5fto_5ftensor_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageToTensorCalculatorOptions_FloatRange

// optional float min = 1;
inline bool ImageToTensorCalculatorOptions_FloatRange::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageToTensorCalculatorOptions_FloatRange::has_min() const {
  return _internal_has_min();
}
inline void ImageToTensorCalculatorOptions_FloatRange::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ImageToTensorCalculatorOptions_FloatRange::_internal_min() const {
  return min_;
}
inline float ImageToTensorCalculatorOptions_FloatRange::min() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.FloatRange.min)
  return _internal_min();
}
inline void ImageToTensorCalculatorOptions_FloatRange::_internal_set_min(float value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void ImageToTensorCalculatorOptions_FloatRange::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:mediapipe.ImageToTensorCalculatorOptions.FloatRange.min)
}

// optional float max = 2;
inline bool ImageToTensorCalculatorOptions_FloatRange::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageToTensorCalculatorOptions_FloatRange::has_max() const {
  return _internal_has_max();
}
inline void ImageToTensorCalculatorOptions_FloatRange::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ImageToTensorCalculatorOptions_FloatRange::_internal_max() const {
  return max_;
}
inline float ImageToTensorCalculatorOptions_FloatRange::max() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.FloatRange.max)
  return _internal_max();
}
inline void ImageToTensorCalculatorOptions_FloatRange::_internal_set_max(float value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void ImageToTensorCalculatorOptions_FloatRange::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:mediapipe.ImageToTensorCalculatorOptions.FloatRange.max)
}

// -------------------------------------------------------------------

// ImageToTensorCalculatorOptions_IntRange

// optional int64 min = 1;
inline bool ImageToTensorCalculatorOptions_IntRange::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageToTensorCalculatorOptions_IntRange::has_min() const {
  return _internal_has_min();
}
inline void ImageToTensorCalculatorOptions_IntRange::clear_min() {
  min_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ImageToTensorCalculatorOptions_IntRange::_internal_min() const {
  return min_;
}
inline int64_t ImageToTensorCalculatorOptions_IntRange::min() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.IntRange.min)
  return _internal_min();
}
inline void ImageToTensorCalculatorOptions_IntRange::_internal_set_min(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void ImageToTensorCalculatorOptions_IntRange::set_min(int64_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:mediapipe.ImageToTensorCalculatorOptions.IntRange.min)
}

// optional int64 max = 2;
inline bool ImageToTensorCalculatorOptions_IntRange::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageToTensorCalculatorOptions_IntRange::has_max() const {
  return _internal_has_max();
}
inline void ImageToTensorCalculatorOptions_IntRange::clear_max() {
  max_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ImageToTensorCalculatorOptions_IntRange::_internal_max() const {
  return max_;
}
inline int64_t ImageToTensorCalculatorOptions_IntRange::max() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.IntRange.max)
  return _internal_max();
}
inline void ImageToTensorCalculatorOptions_IntRange::_internal_set_max(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void ImageToTensorCalculatorOptions_IntRange::set_max(int64_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:mediapipe.ImageToTensorCalculatorOptions.IntRange.max)
}

// -------------------------------------------------------------------

// ImageToTensorCalculatorOptions_UIntRange

// optional uint64 min = 1;
inline bool ImageToTensorCalculatorOptions_UIntRange::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageToTensorCalculatorOptions_UIntRange::has_min() const {
  return _internal_has_min();
}
inline void ImageToTensorCalculatorOptions_UIntRange::clear_min() {
  min_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ImageToTensorCalculatorOptions_UIntRange::_internal_min() const {
  return min_;
}
inline uint64_t ImageToTensorCalculatorOptions_UIntRange::min() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.UIntRange.min)
  return _internal_min();
}
inline void ImageToTensorCalculatorOptions_UIntRange::_internal_set_min(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void ImageToTensorCalculatorOptions_UIntRange::set_min(uint64_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:mediapipe.ImageToTensorCalculatorOptions.UIntRange.min)
}

// optional uint64 max = 2;
inline bool ImageToTensorCalculatorOptions_UIntRange::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageToTensorCalculatorOptions_UIntRange::has_max() const {
  return _internal_has_max();
}
inline void ImageToTensorCalculatorOptions_UIntRange::clear_max() {
  max_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ImageToTensorCalculatorOptions_UIntRange::_internal_max() const {
  return max_;
}
inline uint64_t ImageToTensorCalculatorOptions_UIntRange::max() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.UIntRange.max)
  return _internal_max();
}
inline void ImageToTensorCalculatorOptions_UIntRange::_internal_set_max(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void ImageToTensorCalculatorOptions_UIntRange::set_max(uint64_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:mediapipe.ImageToTensorCalculatorOptions.UIntRange.max)
}

// -------------------------------------------------------------------

// ImageToTensorCalculatorOptions

// optional int32 output_tensor_width = 1;
inline bool ImageToTensorCalculatorOptions::_internal_has_output_tensor_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageToTensorCalculatorOptions::has_output_tensor_width() const {
  return _internal_has_output_tensor_width();
}
inline void ImageToTensorCalculatorOptions::clear_output_tensor_width() {
  output_tensor_width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ImageToTensorCalculatorOptions::_internal_output_tensor_width() const {
  return output_tensor_width_;
}
inline int32_t ImageToTensorCalculatorOptions::output_tensor_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.output_tensor_width)
  return _internal_output_tensor_width();
}
inline void ImageToTensorCalculatorOptions::_internal_set_output_tensor_width(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  output_tensor_width_ = value;
}
inline void ImageToTensorCalculatorOptions::set_output_tensor_width(int32_t value) {
  _internal_set_output_tensor_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.ImageToTensorCalculatorOptions.output_tensor_width)
}

// optional int32 output_tensor_height = 2;
inline bool ImageToTensorCalculatorOptions::_internal_has_output_tensor_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageToTensorCalculatorOptions::has_output_tensor_height() const {
  return _internal_has_output_tensor_height();
}
inline void ImageToTensorCalculatorOptions::clear_output_tensor_height() {
  output_tensor_height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ImageToTensorCalculatorOptions::_internal_output_tensor_height() const {
  return output_tensor_height_;
}
inline int32_t ImageToTensorCalculatorOptions::output_tensor_height() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.output_tensor_height)
  return _internal_output_tensor_height();
}
inline void ImageToTensorCalculatorOptions::_internal_set_output_tensor_height(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  output_tensor_height_ = value;
}
inline void ImageToTensorCalculatorOptions::set_output_tensor_height(int32_t value) {
  _internal_set_output_tensor_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.ImageToTensorCalculatorOptions.output_tensor_height)
}

// optional bool keep_aspect_ratio = 3;
inline bool ImageToTensorCalculatorOptions::_internal_has_keep_aspect_ratio() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageToTensorCalculatorOptions::has_keep_aspect_ratio() const {
  return _internal_has_keep_aspect_ratio();
}
inline void ImageToTensorCalculatorOptions::clear_keep_aspect_ratio() {
  keep_aspect_ratio_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ImageToTensorCalculatorOptions::_internal_keep_aspect_ratio() const {
  return keep_aspect_ratio_;
}
inline bool ImageToTensorCalculatorOptions::keep_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.keep_aspect_ratio)
  return _internal_keep_aspect_ratio();
}
inline void ImageToTensorCalculatorOptions::_internal_set_keep_aspect_ratio(bool value) {
  _has_bits_[0] |= 0x00000004u;
  keep_aspect_ratio_ = value;
}
inline void ImageToTensorCalculatorOptions::set_keep_aspect_ratio(bool value) {
  _internal_set_keep_aspect_ratio(value);
  // @@protoc_insertion_point(field_set:mediapipe.ImageToTensorCalculatorOptions.keep_aspect_ratio)
}

// .mediapipe.ImageToTensorCalculatorOptions.FloatRange output_tensor_float_range = 4;
inline bool ImageToTensorCalculatorOptions::_internal_has_output_tensor_float_range() const {
  return range_case() == kOutputTensorFloatRange;
}
inline bool ImageToTensorCalculatorOptions::has_output_tensor_float_range() const {
  return _internal_has_output_tensor_float_range();
}
inline void ImageToTensorCalculatorOptions::set_has_output_tensor_float_range() {
  _oneof_case_[0] = kOutputTensorFloatRange;
}
inline void ImageToTensorCalculatorOptions::clear_output_tensor_float_range() {
  if (_internal_has_output_tensor_float_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete range_.output_tensor_float_range_;
    }
    clear_has_range();
  }
}
inline ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* ImageToTensorCalculatorOptions::release_output_tensor_float_range() {
  // @@protoc_insertion_point(field_release:mediapipe.ImageToTensorCalculatorOptions.output_tensor_float_range)
  if (_internal_has_output_tensor_float_range()) {
    clear_has_range();
      ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* temp = range_.output_tensor_float_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    range_.output_tensor_float_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::ImageToTensorCalculatorOptions_FloatRange& ImageToTensorCalculatorOptions::_internal_output_tensor_float_range() const {
  return _internal_has_output_tensor_float_range()
      ? *range_.output_tensor_float_range_
      : reinterpret_cast< ::mediapipe::ImageToTensorCalculatorOptions_FloatRange&>(::mediapipe::_ImageToTensorCalculatorOptions_FloatRange_default_instance_);
}
inline const ::mediapipe::ImageToTensorCalculatorOptions_FloatRange& ImageToTensorCalculatorOptions::output_tensor_float_range() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.output_tensor_float_range)
  return _internal_output_tensor_float_range();
}
inline ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* ImageToTensorCalculatorOptions::unsafe_arena_release_output_tensor_float_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.ImageToTensorCalculatorOptions.output_tensor_float_range)
  if (_internal_has_output_tensor_float_range()) {
    clear_has_range();
    ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* temp = range_.output_tensor_float_range_;
    range_.output_tensor_float_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImageToTensorCalculatorOptions::unsafe_arena_set_allocated_output_tensor_float_range(::mediapipe::ImageToTensorCalculatorOptions_FloatRange* output_tensor_float_range) {
  clear_range();
  if (output_tensor_float_range) {
    set_has_output_tensor_float_range();
    range_.output_tensor_float_range_ = output_tensor_float_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ImageToTensorCalculatorOptions.output_tensor_float_range)
}
inline ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* ImageToTensorCalculatorOptions::_internal_mutable_output_tensor_float_range() {
  if (!_internal_has_output_tensor_float_range()) {
    clear_range();
    set_has_output_tensor_float_range();
    range_.output_tensor_float_range_ = CreateMaybeMessage< ::mediapipe::ImageToTensorCalculatorOptions_FloatRange >(GetArenaForAllocation());
  }
  return range_.output_tensor_float_range_;
}
inline ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* ImageToTensorCalculatorOptions::mutable_output_tensor_float_range() {
  ::mediapipe::ImageToTensorCalculatorOptions_FloatRange* _msg = _internal_mutable_output_tensor_float_range();
  // @@protoc_insertion_point(field_mutable:mediapipe.ImageToTensorCalculatorOptions.output_tensor_float_range)
  return _msg;
}

// .mediapipe.ImageToTensorCalculatorOptions.IntRange output_tensor_int_range = 7;
inline bool ImageToTensorCalculatorOptions::_internal_has_output_tensor_int_range() const {
  return range_case() == kOutputTensorIntRange;
}
inline bool ImageToTensorCalculatorOptions::has_output_tensor_int_range() const {
  return _internal_has_output_tensor_int_range();
}
inline void ImageToTensorCalculatorOptions::set_has_output_tensor_int_range() {
  _oneof_case_[0] = kOutputTensorIntRange;
}
inline void ImageToTensorCalculatorOptions::clear_output_tensor_int_range() {
  if (_internal_has_output_tensor_int_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete range_.output_tensor_int_range_;
    }
    clear_has_range();
  }
}
inline ::mediapipe::ImageToTensorCalculatorOptions_IntRange* ImageToTensorCalculatorOptions::release_output_tensor_int_range() {
  // @@protoc_insertion_point(field_release:mediapipe.ImageToTensorCalculatorOptions.output_tensor_int_range)
  if (_internal_has_output_tensor_int_range()) {
    clear_has_range();
      ::mediapipe::ImageToTensorCalculatorOptions_IntRange* temp = range_.output_tensor_int_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    range_.output_tensor_int_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::ImageToTensorCalculatorOptions_IntRange& ImageToTensorCalculatorOptions::_internal_output_tensor_int_range() const {
  return _internal_has_output_tensor_int_range()
      ? *range_.output_tensor_int_range_
      : reinterpret_cast< ::mediapipe::ImageToTensorCalculatorOptions_IntRange&>(::mediapipe::_ImageToTensorCalculatorOptions_IntRange_default_instance_);
}
inline const ::mediapipe::ImageToTensorCalculatorOptions_IntRange& ImageToTensorCalculatorOptions::output_tensor_int_range() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.output_tensor_int_range)
  return _internal_output_tensor_int_range();
}
inline ::mediapipe::ImageToTensorCalculatorOptions_IntRange* ImageToTensorCalculatorOptions::unsafe_arena_release_output_tensor_int_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.ImageToTensorCalculatorOptions.output_tensor_int_range)
  if (_internal_has_output_tensor_int_range()) {
    clear_has_range();
    ::mediapipe::ImageToTensorCalculatorOptions_IntRange* temp = range_.output_tensor_int_range_;
    range_.output_tensor_int_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImageToTensorCalculatorOptions::unsafe_arena_set_allocated_output_tensor_int_range(::mediapipe::ImageToTensorCalculatorOptions_IntRange* output_tensor_int_range) {
  clear_range();
  if (output_tensor_int_range) {
    set_has_output_tensor_int_range();
    range_.output_tensor_int_range_ = output_tensor_int_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ImageToTensorCalculatorOptions.output_tensor_int_range)
}
inline ::mediapipe::ImageToTensorCalculatorOptions_IntRange* ImageToTensorCalculatorOptions::_internal_mutable_output_tensor_int_range() {
  if (!_internal_has_output_tensor_int_range()) {
    clear_range();
    set_has_output_tensor_int_range();
    range_.output_tensor_int_range_ = CreateMaybeMessage< ::mediapipe::ImageToTensorCalculatorOptions_IntRange >(GetArenaForAllocation());
  }
  return range_.output_tensor_int_range_;
}
inline ::mediapipe::ImageToTensorCalculatorOptions_IntRange* ImageToTensorCalculatorOptions::mutable_output_tensor_int_range() {
  ::mediapipe::ImageToTensorCalculatorOptions_IntRange* _msg = _internal_mutable_output_tensor_int_range();
  // @@protoc_insertion_point(field_mutable:mediapipe.ImageToTensorCalculatorOptions.output_tensor_int_range)
  return _msg;
}

// .mediapipe.ImageToTensorCalculatorOptions.UIntRange output_tensor_uint_range = 8;
inline bool ImageToTensorCalculatorOptions::_internal_has_output_tensor_uint_range() const {
  return range_case() == kOutputTensorUintRange;
}
inline bool ImageToTensorCalculatorOptions::has_output_tensor_uint_range() const {
  return _internal_has_output_tensor_uint_range();
}
inline void ImageToTensorCalculatorOptions::set_has_output_tensor_uint_range() {
  _oneof_case_[0] = kOutputTensorUintRange;
}
inline void ImageToTensorCalculatorOptions::clear_output_tensor_uint_range() {
  if (_internal_has_output_tensor_uint_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete range_.output_tensor_uint_range_;
    }
    clear_has_range();
  }
}
inline ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* ImageToTensorCalculatorOptions::release_output_tensor_uint_range() {
  // @@protoc_insertion_point(field_release:mediapipe.ImageToTensorCalculatorOptions.output_tensor_uint_range)
  if (_internal_has_output_tensor_uint_range()) {
    clear_has_range();
      ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* temp = range_.output_tensor_uint_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    range_.output_tensor_uint_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::ImageToTensorCalculatorOptions_UIntRange& ImageToTensorCalculatorOptions::_internal_output_tensor_uint_range() const {
  return _internal_has_output_tensor_uint_range()
      ? *range_.output_tensor_uint_range_
      : reinterpret_cast< ::mediapipe::ImageToTensorCalculatorOptions_UIntRange&>(::mediapipe::_ImageToTensorCalculatorOptions_UIntRange_default_instance_);
}
inline const ::mediapipe::ImageToTensorCalculatorOptions_UIntRange& ImageToTensorCalculatorOptions::output_tensor_uint_range() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.output_tensor_uint_range)
  return _internal_output_tensor_uint_range();
}
inline ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* ImageToTensorCalculatorOptions::unsafe_arena_release_output_tensor_uint_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.ImageToTensorCalculatorOptions.output_tensor_uint_range)
  if (_internal_has_output_tensor_uint_range()) {
    clear_has_range();
    ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* temp = range_.output_tensor_uint_range_;
    range_.output_tensor_uint_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImageToTensorCalculatorOptions::unsafe_arena_set_allocated_output_tensor_uint_range(::mediapipe::ImageToTensorCalculatorOptions_UIntRange* output_tensor_uint_range) {
  clear_range();
  if (output_tensor_uint_range) {
    set_has_output_tensor_uint_range();
    range_.output_tensor_uint_range_ = output_tensor_uint_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ImageToTensorCalculatorOptions.output_tensor_uint_range)
}
inline ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* ImageToTensorCalculatorOptions::_internal_mutable_output_tensor_uint_range() {
  if (!_internal_has_output_tensor_uint_range()) {
    clear_range();
    set_has_output_tensor_uint_range();
    range_.output_tensor_uint_range_ = CreateMaybeMessage< ::mediapipe::ImageToTensorCalculatorOptions_UIntRange >(GetArenaForAllocation());
  }
  return range_.output_tensor_uint_range_;
}
inline ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* ImageToTensorCalculatorOptions::mutable_output_tensor_uint_range() {
  ::mediapipe::ImageToTensorCalculatorOptions_UIntRange* _msg = _internal_mutable_output_tensor_uint_range();
  // @@protoc_insertion_point(field_mutable:mediapipe.ImageToTensorCalculatorOptions.output_tensor_uint_range)
  return _msg;
}

// optional .mediapipe.GpuOrigin.Mode gpu_origin = 5;
inline bool ImageToTensorCalculatorOptions::_internal_has_gpu_origin() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageToTensorCalculatorOptions::has_gpu_origin() const {
  return _internal_has_gpu_origin();
}
inline void ImageToTensorCalculatorOptions::clear_gpu_origin() {
  gpu_origin_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::mediapipe::GpuOrigin_Mode ImageToTensorCalculatorOptions::_internal_gpu_origin() const {
  return static_cast< ::mediapipe::GpuOrigin_Mode >(gpu_origin_);
}
inline ::mediapipe::GpuOrigin_Mode ImageToTensorCalculatorOptions::gpu_origin() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.gpu_origin)
  return _internal_gpu_origin();
}
inline void ImageToTensorCalculatorOptions::_internal_set_gpu_origin(::mediapipe::GpuOrigin_Mode value) {
  assert(::mediapipe::GpuOrigin_Mode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  gpu_origin_ = value;
}
inline void ImageToTensorCalculatorOptions::set_gpu_origin(::mediapipe::GpuOrigin_Mode value) {
  _internal_set_gpu_origin(value);
  // @@protoc_insertion_point(field_set:mediapipe.ImageToTensorCalculatorOptions.gpu_origin)
}

// optional .mediapipe.ImageToTensorCalculatorOptions.BorderMode border_mode = 6;
inline bool ImageToTensorCalculatorOptions::_internal_has_border_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImageToTensorCalculatorOptions::has_border_mode() const {
  return _internal_has_border_mode();
}
inline void ImageToTensorCalculatorOptions::clear_border_mode() {
  border_mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::mediapipe::ImageToTensorCalculatorOptions_BorderMode ImageToTensorCalculatorOptions::_internal_border_mode() const {
  return static_cast< ::mediapipe::ImageToTensorCalculatorOptions_BorderMode >(border_mode_);
}
inline ::mediapipe::ImageToTensorCalculatorOptions_BorderMode ImageToTensorCalculatorOptions::border_mode() const {
  // @@protoc_insertion_point(field_get:mediapipe.ImageToTensorCalculatorOptions.border_mode)
  return _internal_border_mode();
}
inline void ImageToTensorCalculatorOptions::_internal_set_border_mode(::mediapipe::ImageToTensorCalculatorOptions_BorderMode value) {
  assert(::mediapipe::ImageToTensorCalculatorOptions_BorderMode_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  border_mode_ = value;
}
inline void ImageToTensorCalculatorOptions::set_border_mode(::mediapipe::ImageToTensorCalculatorOptions_BorderMode value) {
  _internal_set_border_mode(value);
  // @@protoc_insertion_point(field_set:mediapipe.ImageToTensorCalculatorOptions.border_mode)
}

inline bool ImageToTensorCalculatorOptions::has_range() const {
  return range_case() != RANGE_NOT_SET;
}
inline void ImageToTensorCalculatorOptions::clear_has_range() {
  _oneof_case_[0] = RANGE_NOT_SET;
}
inline ImageToTensorCalculatorOptions::RangeCase ImageToTensorCalculatorOptions::range_case() const {
  return ImageToTensorCalculatorOptions::RangeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::ImageToTensorCalculatorOptions_BorderMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::ImageToTensorCalculatorOptions_BorderMode>() {
  return ::mediapipe::ImageToTensorCalculatorOptions_BorderMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2fimage_5fto_5ftensor_5fcalculator_2eproto
