// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/tensor/tensors_to_segmentation_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fsegmentation_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fsegmentation_5fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
#include "mediapipe/gpu/gpu_origin.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fsegmentation_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fsegmentation_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fsegmentation_5fcalculator_2eproto;
namespace mediapipe {
class TensorsToSegmentationCalculatorOptions;
struct TensorsToSegmentationCalculatorOptionsDefaultTypeInternal;
extern TensorsToSegmentationCalculatorOptionsDefaultTypeInternal _TensorsToSegmentationCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::TensorsToSegmentationCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::TensorsToSegmentationCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum TensorsToSegmentationCalculatorOptions_Activation : int {
  TensorsToSegmentationCalculatorOptions_Activation_NONE = 0,
  TensorsToSegmentationCalculatorOptions_Activation_SIGMOID = 1,
  TensorsToSegmentationCalculatorOptions_Activation_SOFTMAX = 2
};
bool TensorsToSegmentationCalculatorOptions_Activation_IsValid(int value);
constexpr TensorsToSegmentationCalculatorOptions_Activation TensorsToSegmentationCalculatorOptions_Activation_Activation_MIN = TensorsToSegmentationCalculatorOptions_Activation_NONE;
constexpr TensorsToSegmentationCalculatorOptions_Activation TensorsToSegmentationCalculatorOptions_Activation_Activation_MAX = TensorsToSegmentationCalculatorOptions_Activation_SOFTMAX;
constexpr int TensorsToSegmentationCalculatorOptions_Activation_Activation_ARRAYSIZE = TensorsToSegmentationCalculatorOptions_Activation_Activation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TensorsToSegmentationCalculatorOptions_Activation_descriptor();
template<typename T>
inline const std::string& TensorsToSegmentationCalculatorOptions_Activation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TensorsToSegmentationCalculatorOptions_Activation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TensorsToSegmentationCalculatorOptions_Activation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TensorsToSegmentationCalculatorOptions_Activation_descriptor(), enum_t_value);
}
inline bool TensorsToSegmentationCalculatorOptions_Activation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TensorsToSegmentationCalculatorOptions_Activation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TensorsToSegmentationCalculatorOptions_Activation>(
    TensorsToSegmentationCalculatorOptions_Activation_descriptor(), name, value);
}
// ===================================================================

class TensorsToSegmentationCalculatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TensorsToSegmentationCalculatorOptions) */ {
 public:
  inline TensorsToSegmentationCalculatorOptions() : TensorsToSegmentationCalculatorOptions(nullptr) {}
  ~TensorsToSegmentationCalculatorOptions() override;
  explicit constexpr TensorsToSegmentationCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TensorsToSegmentationCalculatorOptions(const TensorsToSegmentationCalculatorOptions& from);
  TensorsToSegmentationCalculatorOptions(TensorsToSegmentationCalculatorOptions&& from) noexcept
    : TensorsToSegmentationCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline TensorsToSegmentationCalculatorOptions& operator=(const TensorsToSegmentationCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorsToSegmentationCalculatorOptions& operator=(TensorsToSegmentationCalculatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TensorsToSegmentationCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorsToSegmentationCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const TensorsToSegmentationCalculatorOptions*>(
               &_TensorsToSegmentationCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TensorsToSegmentationCalculatorOptions& a, TensorsToSegmentationCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorsToSegmentationCalculatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorsToSegmentationCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TensorsToSegmentationCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TensorsToSegmentationCalculatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TensorsToSegmentationCalculatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TensorsToSegmentationCalculatorOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorsToSegmentationCalculatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TensorsToSegmentationCalculatorOptions";
  }
  protected:
  explicit TensorsToSegmentationCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TensorsToSegmentationCalculatorOptions_Activation Activation;
  static constexpr Activation NONE =
    TensorsToSegmentationCalculatorOptions_Activation_NONE;
  static constexpr Activation SIGMOID =
    TensorsToSegmentationCalculatorOptions_Activation_SIGMOID;
  static constexpr Activation SOFTMAX =
    TensorsToSegmentationCalculatorOptions_Activation_SOFTMAX;
  static inline bool Activation_IsValid(int value) {
    return TensorsToSegmentationCalculatorOptions_Activation_IsValid(value);
  }
  static constexpr Activation Activation_MIN =
    TensorsToSegmentationCalculatorOptions_Activation_Activation_MIN;
  static constexpr Activation Activation_MAX =
    TensorsToSegmentationCalculatorOptions_Activation_Activation_MAX;
  static constexpr int Activation_ARRAYSIZE =
    TensorsToSegmentationCalculatorOptions_Activation_Activation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Activation_descriptor() {
    return TensorsToSegmentationCalculatorOptions_Activation_descriptor();
  }
  template<typename T>
  static inline const std::string& Activation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Activation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Activation_Name.");
    return TensorsToSegmentationCalculatorOptions_Activation_Name(enum_t_value);
  }
  static inline bool Activation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Activation* value) {
    return TensorsToSegmentationCalculatorOptions_Activation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGpuOriginFieldNumber = 1,
    kActivationFieldNumber = 2,
    kOutputLayerIndexFieldNumber = 3,
  };
  // optional .mediapipe.GpuOrigin.Mode gpu_origin = 1;
  bool has_gpu_origin() const;
  private:
  bool _internal_has_gpu_origin() const;
  public:
  void clear_gpu_origin();
  ::mediapipe::GpuOrigin_Mode gpu_origin() const;
  void set_gpu_origin(::mediapipe::GpuOrigin_Mode value);
  private:
  ::mediapipe::GpuOrigin_Mode _internal_gpu_origin() const;
  void _internal_set_gpu_origin(::mediapipe::GpuOrigin_Mode value);
  public:

  // optional .mediapipe.TensorsToSegmentationCalculatorOptions.Activation activation = 2 [default = NONE];
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  ::mediapipe::TensorsToSegmentationCalculatorOptions_Activation activation() const;
  void set_activation(::mediapipe::TensorsToSegmentationCalculatorOptions_Activation value);
  private:
  ::mediapipe::TensorsToSegmentationCalculatorOptions_Activation _internal_activation() const;
  void _internal_set_activation(::mediapipe::TensorsToSegmentationCalculatorOptions_Activation value);
  public:

  // optional int32 output_layer_index = 3 [default = 1];
  bool has_output_layer_index() const;
  private:
  bool _internal_has_output_layer_index() const;
  public:
  void clear_output_layer_index();
  int32_t output_layer_index() const;
  void set_output_layer_index(int32_t value);
  private:
  int32_t _internal_output_layer_index() const;
  void _internal_set_output_layer_index(int32_t value);
  public:

  static const int kExtFieldNumber = 374311106;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::TensorsToSegmentationCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.TensorsToSegmentationCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int gpu_origin_;
  int activation_;
  int32_t output_layer_index_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fsegmentation_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorsToSegmentationCalculatorOptions

// optional .mediapipe.GpuOrigin.Mode gpu_origin = 1;
inline bool TensorsToSegmentationCalculatorOptions::_internal_has_gpu_origin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TensorsToSegmentationCalculatorOptions::has_gpu_origin() const {
  return _internal_has_gpu_origin();
}
inline void TensorsToSegmentationCalculatorOptions::clear_gpu_origin() {
  gpu_origin_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::mediapipe::GpuOrigin_Mode TensorsToSegmentationCalculatorOptions::_internal_gpu_origin() const {
  return static_cast< ::mediapipe::GpuOrigin_Mode >(gpu_origin_);
}
inline ::mediapipe::GpuOrigin_Mode TensorsToSegmentationCalculatorOptions::gpu_origin() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToSegmentationCalculatorOptions.gpu_origin)
  return _internal_gpu_origin();
}
inline void TensorsToSegmentationCalculatorOptions::_internal_set_gpu_origin(::mediapipe::GpuOrigin_Mode value) {
  assert(::mediapipe::GpuOrigin_Mode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  gpu_origin_ = value;
}
inline void TensorsToSegmentationCalculatorOptions::set_gpu_origin(::mediapipe::GpuOrigin_Mode value) {
  _internal_set_gpu_origin(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToSegmentationCalculatorOptions.gpu_origin)
}

// optional .mediapipe.TensorsToSegmentationCalculatorOptions.Activation activation = 2 [default = NONE];
inline bool TensorsToSegmentationCalculatorOptions::_internal_has_activation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TensorsToSegmentationCalculatorOptions::has_activation() const {
  return _internal_has_activation();
}
inline void TensorsToSegmentationCalculatorOptions::clear_activation() {
  activation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mediapipe::TensorsToSegmentationCalculatorOptions_Activation TensorsToSegmentationCalculatorOptions::_internal_activation() const {
  return static_cast< ::mediapipe::TensorsToSegmentationCalculatorOptions_Activation >(activation_);
}
inline ::mediapipe::TensorsToSegmentationCalculatorOptions_Activation TensorsToSegmentationCalculatorOptions::activation() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToSegmentationCalculatorOptions.activation)
  return _internal_activation();
}
inline void TensorsToSegmentationCalculatorOptions::_internal_set_activation(::mediapipe::TensorsToSegmentationCalculatorOptions_Activation value) {
  assert(::mediapipe::TensorsToSegmentationCalculatorOptions_Activation_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  activation_ = value;
}
inline void TensorsToSegmentationCalculatorOptions::set_activation(::mediapipe::TensorsToSegmentationCalculatorOptions_Activation value) {
  _internal_set_activation(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToSegmentationCalculatorOptions.activation)
}

// optional int32 output_layer_index = 3 [default = 1];
inline bool TensorsToSegmentationCalculatorOptions::_internal_has_output_layer_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TensorsToSegmentationCalculatorOptions::has_output_layer_index() const {
  return _internal_has_output_layer_index();
}
inline void TensorsToSegmentationCalculatorOptions::clear_output_layer_index() {
  output_layer_index_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TensorsToSegmentationCalculatorOptions::_internal_output_layer_index() const {
  return output_layer_index_;
}
inline int32_t TensorsToSegmentationCalculatorOptions::output_layer_index() const {
  // @@protoc_insertion_point(field_get:mediapipe.TensorsToSegmentationCalculatorOptions.output_layer_index)
  return _internal_output_layer_index();
}
inline void TensorsToSegmentationCalculatorOptions::_internal_set_output_layer_index(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  output_layer_index_ = value;
}
inline void TensorsToSegmentationCalculatorOptions::set_output_layer_index(int32_t value) {
  _internal_set_output_layer_index(value);
  // @@protoc_insertion_point(field_set:mediapipe.TensorsToSegmentationCalculatorOptions.output_layer_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::TensorsToSegmentationCalculatorOptions_Activation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::TensorsToSegmentationCalculatorOptions_Activation>() {
  return ::mediapipe::TensorsToSegmentationCalculatorOptions_Activation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftensor_2ftensors_5fto_5fsegmentation_5fcalculator_2eproto
