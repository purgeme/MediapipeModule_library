// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/internal/callback_packet_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2finternal_2fcallback_5fpacket_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2finternal_2fcallback_5fpacket_5fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2finternal_2fcallback_5fpacket_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2finternal_2fcallback_5fpacket_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2finternal_2fcallback_5fpacket_5fcalculator_2eproto;
namespace mediapipe {
class CallbackPacketCalculatorOptions;
struct CallbackPacketCalculatorOptionsDefaultTypeInternal;
extern CallbackPacketCalculatorOptionsDefaultTypeInternal _CallbackPacketCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::CallbackPacketCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::CallbackPacketCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum CallbackPacketCalculatorOptions_PointerType : int {
  CallbackPacketCalculatorOptions_PointerType_UNKNOWN = 0,
  CallbackPacketCalculatorOptions_PointerType_VECTOR_PACKET = 1,
  CallbackPacketCalculatorOptions_PointerType_POST_STREAM_PACKET = 2
};
bool CallbackPacketCalculatorOptions_PointerType_IsValid(int value);
constexpr CallbackPacketCalculatorOptions_PointerType CallbackPacketCalculatorOptions_PointerType_PointerType_MIN = CallbackPacketCalculatorOptions_PointerType_UNKNOWN;
constexpr CallbackPacketCalculatorOptions_PointerType CallbackPacketCalculatorOptions_PointerType_PointerType_MAX = CallbackPacketCalculatorOptions_PointerType_POST_STREAM_PACKET;
constexpr int CallbackPacketCalculatorOptions_PointerType_PointerType_ARRAYSIZE = CallbackPacketCalculatorOptions_PointerType_PointerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CallbackPacketCalculatorOptions_PointerType_descriptor();
template<typename T>
inline const std::string& CallbackPacketCalculatorOptions_PointerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CallbackPacketCalculatorOptions_PointerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CallbackPacketCalculatorOptions_PointerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CallbackPacketCalculatorOptions_PointerType_descriptor(), enum_t_value);
}
inline bool CallbackPacketCalculatorOptions_PointerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CallbackPacketCalculatorOptions_PointerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CallbackPacketCalculatorOptions_PointerType>(
    CallbackPacketCalculatorOptions_PointerType_descriptor(), name, value);
}
// ===================================================================

class CallbackPacketCalculatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.CallbackPacketCalculatorOptions) */ {
 public:
  inline CallbackPacketCalculatorOptions() : CallbackPacketCalculatorOptions(nullptr) {}
  ~CallbackPacketCalculatorOptions() override;
  explicit constexpr CallbackPacketCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackPacketCalculatorOptions(const CallbackPacketCalculatorOptions& from);
  CallbackPacketCalculatorOptions(CallbackPacketCalculatorOptions&& from) noexcept
    : CallbackPacketCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline CallbackPacketCalculatorOptions& operator=(const CallbackPacketCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackPacketCalculatorOptions& operator=(CallbackPacketCalculatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallbackPacketCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackPacketCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const CallbackPacketCalculatorOptions*>(
               &_CallbackPacketCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CallbackPacketCalculatorOptions& a, CallbackPacketCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackPacketCalculatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackPacketCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackPacketCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackPacketCalculatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallbackPacketCalculatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CallbackPacketCalculatorOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallbackPacketCalculatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.CallbackPacketCalculatorOptions";
  }
  protected:
  explicit CallbackPacketCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CallbackPacketCalculatorOptions_PointerType PointerType;
  static constexpr PointerType UNKNOWN =
    CallbackPacketCalculatorOptions_PointerType_UNKNOWN;
  static constexpr PointerType VECTOR_PACKET =
    CallbackPacketCalculatorOptions_PointerType_VECTOR_PACKET;
  static constexpr PointerType POST_STREAM_PACKET =
    CallbackPacketCalculatorOptions_PointerType_POST_STREAM_PACKET;
  static inline bool PointerType_IsValid(int value) {
    return CallbackPacketCalculatorOptions_PointerType_IsValid(value);
  }
  static constexpr PointerType PointerType_MIN =
    CallbackPacketCalculatorOptions_PointerType_PointerType_MIN;
  static constexpr PointerType PointerType_MAX =
    CallbackPacketCalculatorOptions_PointerType_PointerType_MAX;
  static constexpr int PointerType_ARRAYSIZE =
    CallbackPacketCalculatorOptions_PointerType_PointerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PointerType_descriptor() {
    return CallbackPacketCalculatorOptions_PointerType_descriptor();
  }
  template<typename T>
  static inline const std::string& PointerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PointerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PointerType_Name.");
    return CallbackPacketCalculatorOptions_PointerType_Name(enum_t_value);
  }
  static inline bool PointerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PointerType* value) {
    return CallbackPacketCalculatorOptions_PointerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointerFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional bytes pointer = 2;
  bool has_pointer() const;
  private:
  bool _internal_has_pointer() const;
  public:
  void clear_pointer();
  const std::string& pointer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointer();
  PROTOBUF_NODISCARD std::string* release_pointer();
  void set_allocated_pointer(std::string* pointer);
  private:
  const std::string& _internal_pointer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointer(const std::string& value);
  std::string* _internal_mutable_pointer();
  public:

  // optional .mediapipe.CallbackPacketCalculatorOptions.PointerType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::mediapipe::CallbackPacketCalculatorOptions_PointerType type() const;
  void set_type(::mediapipe::CallbackPacketCalculatorOptions_PointerType value);
  private:
  ::mediapipe::CallbackPacketCalculatorOptions_PointerType _internal_type() const;
  void _internal_set_type(::mediapipe::CallbackPacketCalculatorOptions_PointerType value);
  public:

  static const int kExtFieldNumber = 245965803;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::CallbackPacketCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.CallbackPacketCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointer_;
  int type_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2finternal_2fcallback_5fpacket_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CallbackPacketCalculatorOptions

// optional .mediapipe.CallbackPacketCalculatorOptions.PointerType type = 1;
inline bool CallbackPacketCalculatorOptions::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CallbackPacketCalculatorOptions::has_type() const {
  return _internal_has_type();
}
inline void CallbackPacketCalculatorOptions::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mediapipe::CallbackPacketCalculatorOptions_PointerType CallbackPacketCalculatorOptions::_internal_type() const {
  return static_cast< ::mediapipe::CallbackPacketCalculatorOptions_PointerType >(type_);
}
inline ::mediapipe::CallbackPacketCalculatorOptions_PointerType CallbackPacketCalculatorOptions::type() const {
  // @@protoc_insertion_point(field_get:mediapipe.CallbackPacketCalculatorOptions.type)
  return _internal_type();
}
inline void CallbackPacketCalculatorOptions::_internal_set_type(::mediapipe::CallbackPacketCalculatorOptions_PointerType value) {
  assert(::mediapipe::CallbackPacketCalculatorOptions_PointerType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CallbackPacketCalculatorOptions::set_type(::mediapipe::CallbackPacketCalculatorOptions_PointerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.CallbackPacketCalculatorOptions.type)
}

// optional bytes pointer = 2;
inline bool CallbackPacketCalculatorOptions::_internal_has_pointer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CallbackPacketCalculatorOptions::has_pointer() const {
  return _internal_has_pointer();
}
inline void CallbackPacketCalculatorOptions::clear_pointer() {
  pointer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallbackPacketCalculatorOptions::pointer() const {
  // @@protoc_insertion_point(field_get:mediapipe.CallbackPacketCalculatorOptions.pointer)
  return _internal_pointer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallbackPacketCalculatorOptions::set_pointer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 pointer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.CallbackPacketCalculatorOptions.pointer)
}
inline std::string* CallbackPacketCalculatorOptions::mutable_pointer() {
  std::string* _s = _internal_mutable_pointer();
  // @@protoc_insertion_point(field_mutable:mediapipe.CallbackPacketCalculatorOptions.pointer)
  return _s;
}
inline const std::string& CallbackPacketCalculatorOptions::_internal_pointer() const {
  return pointer_.Get();
}
inline void CallbackPacketCalculatorOptions::_internal_set_pointer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pointer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CallbackPacketCalculatorOptions::_internal_mutable_pointer() {
  _has_bits_[0] |= 0x00000001u;
  return pointer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CallbackPacketCalculatorOptions::release_pointer() {
  // @@protoc_insertion_point(field_release:mediapipe.CallbackPacketCalculatorOptions.pointer)
  if (!_internal_has_pointer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = pointer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pointer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pointer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CallbackPacketCalculatorOptions::set_allocated_pointer(std::string* pointer) {
  if (pointer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pointer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pointer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pointer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pointer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CallbackPacketCalculatorOptions.pointer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::CallbackPacketCalculatorOptions_PointerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::CallbackPacketCalculatorOptions_PointerType>() {
  return ::mediapipe::CallbackPacketCalculatorOptions_PointerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2finternal_2fcallback_5fpacket_5fcalculator_2eproto
