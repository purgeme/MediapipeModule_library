// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/video/opencv_video_encoder_calculator.proto

#include "mediapipe/calculators/video/opencv_video_encoder_calculator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr OpenCvVideoEncoderCalculatorOptions::OpenCvVideoEncoderCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : codec_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , video_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fps_(0)
  , width_(0)
  , height_(0){}
struct OpenCvVideoEncoderCalculatorOptionsDefaultTypeInternal {
  constexpr OpenCvVideoEncoderCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenCvVideoEncoderCalculatorOptionsDefaultTypeInternal() {}
  union {
    OpenCvVideoEncoderCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenCvVideoEncoderCalculatorOptionsDefaultTypeInternal _OpenCvVideoEncoderCalculatorOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto = nullptr;

const uint32_t TableStruct_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvVideoEncoderCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvVideoEncoderCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvVideoEncoderCalculatorOptions, codec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvVideoEncoderCalculatorOptions, video_format_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvVideoEncoderCalculatorOptions, fps_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvVideoEncoderCalculatorOptions, width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvVideoEncoderCalculatorOptions, height_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::mediapipe::OpenCvVideoEncoderCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_OpenCvVideoEncoderCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nAmediapipe/calculators/video/opencv_vid"
  "eo_encoder_calculator.proto\022\tmediapipe\032$"
  "mediapipe/framework/calculator.proto\"\324\001\n"
  "#OpenCvVideoEncoderCalculatorOptions\022\r\n\005"
  "codec\030\001 \001(\t\022\024\n\014video_format\030\002 \001(\t\022\013\n\003fps"
  "\030\003 \001(\001\022\r\n\005width\030\004 \001(\005\022\016\n\006height\030\005 \001(\0052\\\n"
  "\003ext\022\034.mediapipe.CalculatorOptions\030\373\271\223c "
  "\001(\0132..mediapipe.OpenCvVideoEncoderCalcul"
  "atorOptions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto = {
  false, false, 331, descriptor_table_protodef_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto, "mediapipe/calculators/video/opencv_video_encoder_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto);
namespace mediapipe {

// ===================================================================

class OpenCvVideoEncoderCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenCvVideoEncoderCalculatorOptions>()._has_bits_);
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_video_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

OpenCvVideoEncoderCalculatorOptions::OpenCvVideoEncoderCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediapipe.OpenCvVideoEncoderCalculatorOptions)
}
OpenCvVideoEncoderCalculatorOptions::OpenCvVideoEncoderCalculatorOptions(const OpenCvVideoEncoderCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_codec()) {
    codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codec(), 
      GetArenaForAllocation());
  }
  video_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    video_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_video_format()) {
    video_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_video_format(), 
      GetArenaForAllocation());
  }
  ::memcpy(&fps_, &from.fps_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&fps_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.OpenCvVideoEncoderCalculatorOptions)
}

inline void OpenCvVideoEncoderCalculatorOptions::SharedCtor() {
codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
video_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  video_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fps_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&fps_)) + sizeof(height_));
}

OpenCvVideoEncoderCalculatorOptions::~OpenCvVideoEncoderCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.OpenCvVideoEncoderCalculatorOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenCvVideoEncoderCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  codec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  video_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenCvVideoEncoderCalculatorOptions::ArenaDtor(void* object) {
  OpenCvVideoEncoderCalculatorOptions* _this = reinterpret_cast< OpenCvVideoEncoderCalculatorOptions* >(object);
  (void)_this;
}
void OpenCvVideoEncoderCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenCvVideoEncoderCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenCvVideoEncoderCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.OpenCvVideoEncoderCalculatorOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      codec_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      video_format_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&fps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&fps_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenCvVideoEncoderCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string codec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_codec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.OpenCvVideoEncoderCalculatorOptions.codec");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string video_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_video_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.OpenCvVideoEncoderCalculatorOptions.video_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double fps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_fps(&has_bits);
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenCvVideoEncoderCalculatorOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.OpenCvVideoEncoderCalculatorOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string codec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_codec().data(), static_cast<int>(this->_internal_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.OpenCvVideoEncoderCalculatorOptions.codec");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_codec(), target);
  }

  // optional string video_format = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_video_format().data(), static_cast<int>(this->_internal_video_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.OpenCvVideoEncoderCalculatorOptions.video_format");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_video_format(), target);
  }

  // optional double fps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fps(), target);
  }

  // optional int32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_width(), target);
  }

  // optional int32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.OpenCvVideoEncoderCalculatorOptions)
  return target;
}

size_t OpenCvVideoEncoderCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.OpenCvVideoEncoderCalculatorOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string codec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_codec());
    }

    // optional string video_format = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_video_format());
    }

    // optional double fps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenCvVideoEncoderCalculatorOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenCvVideoEncoderCalculatorOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenCvVideoEncoderCalculatorOptions::GetClassData() const { return &_class_data_; }

void OpenCvVideoEncoderCalculatorOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenCvVideoEncoderCalculatorOptions *>(to)->MergeFrom(
      static_cast<const OpenCvVideoEncoderCalculatorOptions &>(from));
}


void OpenCvVideoEncoderCalculatorOptions::MergeFrom(const OpenCvVideoEncoderCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.OpenCvVideoEncoderCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_codec(from._internal_codec());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_video_format(from._internal_video_format());
    }
    if (cached_has_bits & 0x00000004u) {
      fps_ = from.fps_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenCvVideoEncoderCalculatorOptions::CopyFrom(const OpenCvVideoEncoderCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.OpenCvVideoEncoderCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenCvVideoEncoderCalculatorOptions::IsInitialized() const {
  return true;
}

void OpenCvVideoEncoderCalculatorOptions::InternalSwap(OpenCvVideoEncoderCalculatorOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &codec_, lhs_arena,
      &other->codec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &video_format_, lhs_arena,
      &other->video_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenCvVideoEncoderCalculatorOptions, height_)
      + sizeof(OpenCvVideoEncoderCalculatorOptions::height_)
      - PROTOBUF_FIELD_OFFSET(OpenCvVideoEncoderCalculatorOptions, fps_)>(
          reinterpret_cast<char*>(&fps_),
          reinterpret_cast<char*>(&other->fps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenCvVideoEncoderCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto[0]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int OpenCvVideoEncoderCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::OpenCvVideoEncoderCalculatorOptions >, 11, false >
  OpenCvVideoEncoderCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::OpenCvVideoEncoderCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::OpenCvVideoEncoderCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::OpenCvVideoEncoderCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::OpenCvVideoEncoderCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
