// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/video/opencv_video_encoder_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto;
namespace mediapipe {
class OpenCvVideoEncoderCalculatorOptions;
struct OpenCvVideoEncoderCalculatorOptionsDefaultTypeInternal;
extern OpenCvVideoEncoderCalculatorOptionsDefaultTypeInternal _OpenCvVideoEncoderCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::OpenCvVideoEncoderCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::OpenCvVideoEncoderCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class OpenCvVideoEncoderCalculatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.OpenCvVideoEncoderCalculatorOptions) */ {
 public:
  inline OpenCvVideoEncoderCalculatorOptions() : OpenCvVideoEncoderCalculatorOptions(nullptr) {}
  ~OpenCvVideoEncoderCalculatorOptions() override;
  explicit constexpr OpenCvVideoEncoderCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenCvVideoEncoderCalculatorOptions(const OpenCvVideoEncoderCalculatorOptions& from);
  OpenCvVideoEncoderCalculatorOptions(OpenCvVideoEncoderCalculatorOptions&& from) noexcept
    : OpenCvVideoEncoderCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline OpenCvVideoEncoderCalculatorOptions& operator=(const OpenCvVideoEncoderCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenCvVideoEncoderCalculatorOptions& operator=(OpenCvVideoEncoderCalculatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenCvVideoEncoderCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenCvVideoEncoderCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const OpenCvVideoEncoderCalculatorOptions*>(
               &_OpenCvVideoEncoderCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpenCvVideoEncoderCalculatorOptions& a, OpenCvVideoEncoderCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenCvVideoEncoderCalculatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenCvVideoEncoderCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenCvVideoEncoderCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenCvVideoEncoderCalculatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenCvVideoEncoderCalculatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenCvVideoEncoderCalculatorOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenCvVideoEncoderCalculatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.OpenCvVideoEncoderCalculatorOptions";
  }
  protected:
  explicit OpenCvVideoEncoderCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 1,
    kVideoFormatFieldNumber = 2,
    kFpsFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
  };
  // optional string codec = 1;
  bool has_codec() const;
  private:
  bool _internal_has_codec() const;
  public:
  void clear_codec();
  const std::string& codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec();
  PROTOBUF_NODISCARD std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // optional string video_format = 2;
  bool has_video_format() const;
  private:
  bool _internal_has_video_format() const;
  public:
  void clear_video_format();
  const std::string& video_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_video_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_video_format();
  PROTOBUF_NODISCARD std::string* release_video_format();
  void set_allocated_video_format(std::string* video_format);
  private:
  const std::string& _internal_video_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_video_format(const std::string& value);
  std::string* _internal_mutable_video_format();
  public:

  // optional double fps = 3;
  bool has_fps() const;
  private:
  bool _internal_has_fps() const;
  public:
  void clear_fps();
  double fps() const;
  void set_fps(double value);
  private:
  double _internal_fps() const;
  void _internal_set_fps(double value);
  public:

  // optional int32 width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  static const int kExtFieldNumber = 207936763;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::OpenCvVideoEncoderCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.OpenCvVideoEncoderCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_format_;
  double fps_;
  int32_t width_;
  int32_t height_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenCvVideoEncoderCalculatorOptions

// optional string codec = 1;
inline bool OpenCvVideoEncoderCalculatorOptions::_internal_has_codec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpenCvVideoEncoderCalculatorOptions::has_codec() const {
  return _internal_has_codec();
}
inline void OpenCvVideoEncoderCalculatorOptions::clear_codec() {
  codec_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpenCvVideoEncoderCalculatorOptions::codec() const {
  // @@protoc_insertion_point(field_get:mediapipe.OpenCvVideoEncoderCalculatorOptions.codec)
  return _internal_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenCvVideoEncoderCalculatorOptions::set_codec(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.OpenCvVideoEncoderCalculatorOptions.codec)
}
inline std::string* OpenCvVideoEncoderCalculatorOptions::mutable_codec() {
  std::string* _s = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:mediapipe.OpenCvVideoEncoderCalculatorOptions.codec)
  return _s;
}
inline const std::string& OpenCvVideoEncoderCalculatorOptions::_internal_codec() const {
  return codec_.Get();
}
inline void OpenCvVideoEncoderCalculatorOptions::_internal_set_codec(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenCvVideoEncoderCalculatorOptions::_internal_mutable_codec() {
  _has_bits_[0] |= 0x00000001u;
  return codec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenCvVideoEncoderCalculatorOptions::release_codec() {
  // @@protoc_insertion_point(field_release:mediapipe.OpenCvVideoEncoderCalculatorOptions.codec)
  if (!_internal_has_codec()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = codec_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (codec_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OpenCvVideoEncoderCalculatorOptions::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  codec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (codec_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.OpenCvVideoEncoderCalculatorOptions.codec)
}

// optional string video_format = 2;
inline bool OpenCvVideoEncoderCalculatorOptions::_internal_has_video_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpenCvVideoEncoderCalculatorOptions::has_video_format() const {
  return _internal_has_video_format();
}
inline void OpenCvVideoEncoderCalculatorOptions::clear_video_format() {
  video_format_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OpenCvVideoEncoderCalculatorOptions::video_format() const {
  // @@protoc_insertion_point(field_get:mediapipe.OpenCvVideoEncoderCalculatorOptions.video_format)
  return _internal_video_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenCvVideoEncoderCalculatorOptions::set_video_format(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 video_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.OpenCvVideoEncoderCalculatorOptions.video_format)
}
inline std::string* OpenCvVideoEncoderCalculatorOptions::mutable_video_format() {
  std::string* _s = _internal_mutable_video_format();
  // @@protoc_insertion_point(field_mutable:mediapipe.OpenCvVideoEncoderCalculatorOptions.video_format)
  return _s;
}
inline const std::string& OpenCvVideoEncoderCalculatorOptions::_internal_video_format() const {
  return video_format_.Get();
}
inline void OpenCvVideoEncoderCalculatorOptions::_internal_set_video_format(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  video_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenCvVideoEncoderCalculatorOptions::_internal_mutable_video_format() {
  _has_bits_[0] |= 0x00000002u;
  return video_format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenCvVideoEncoderCalculatorOptions::release_video_format() {
  // @@protoc_insertion_point(field_release:mediapipe.OpenCvVideoEncoderCalculatorOptions.video_format)
  if (!_internal_has_video_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = video_format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (video_format_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    video_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OpenCvVideoEncoderCalculatorOptions::set_allocated_video_format(std::string* video_format) {
  if (video_format != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  video_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_format,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (video_format_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    video_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.OpenCvVideoEncoderCalculatorOptions.video_format)
}

// optional double fps = 3;
inline bool OpenCvVideoEncoderCalculatorOptions::_internal_has_fps() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OpenCvVideoEncoderCalculatorOptions::has_fps() const {
  return _internal_has_fps();
}
inline void OpenCvVideoEncoderCalculatorOptions::clear_fps() {
  fps_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double OpenCvVideoEncoderCalculatorOptions::_internal_fps() const {
  return fps_;
}
inline double OpenCvVideoEncoderCalculatorOptions::fps() const {
  // @@protoc_insertion_point(field_get:mediapipe.OpenCvVideoEncoderCalculatorOptions.fps)
  return _internal_fps();
}
inline void OpenCvVideoEncoderCalculatorOptions::_internal_set_fps(double value) {
  _has_bits_[0] |= 0x00000004u;
  fps_ = value;
}
inline void OpenCvVideoEncoderCalculatorOptions::set_fps(double value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:mediapipe.OpenCvVideoEncoderCalculatorOptions.fps)
}

// optional int32 width = 4;
inline bool OpenCvVideoEncoderCalculatorOptions::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OpenCvVideoEncoderCalculatorOptions::has_width() const {
  return _internal_has_width();
}
inline void OpenCvVideoEncoderCalculatorOptions::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t OpenCvVideoEncoderCalculatorOptions::_internal_width() const {
  return width_;
}
inline int32_t OpenCvVideoEncoderCalculatorOptions::width() const {
  // @@protoc_insertion_point(field_get:mediapipe.OpenCvVideoEncoderCalculatorOptions.width)
  return _internal_width();
}
inline void OpenCvVideoEncoderCalculatorOptions::_internal_set_width(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void OpenCvVideoEncoderCalculatorOptions::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.OpenCvVideoEncoderCalculatorOptions.width)
}

// optional int32 height = 5;
inline bool OpenCvVideoEncoderCalculatorOptions::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OpenCvVideoEncoderCalculatorOptions::has_height() const {
  return _internal_has_height();
}
inline void OpenCvVideoEncoderCalculatorOptions::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t OpenCvVideoEncoderCalculatorOptions::_internal_height() const {
  return height_;
}
inline int32_t OpenCvVideoEncoderCalculatorOptions::height() const {
  // @@protoc_insertion_point(field_get:mediapipe.OpenCvVideoEncoderCalculatorOptions.height)
  return _internal_height();
}
inline void OpenCvVideoEncoderCalculatorOptions::_internal_set_height(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void OpenCvVideoEncoderCalculatorOptions::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.OpenCvVideoEncoderCalculatorOptions.height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fvideo_2fopencv_5fvideo_5fencoder_5fcalculator_2eproto
