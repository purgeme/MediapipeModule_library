// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/gpu/gpu_origin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fgpu_2fgpu_5forigin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fgpu_2fgpu_5forigin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fgpu_2fgpu_5forigin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fgpu_2fgpu_5forigin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fgpu_2fgpu_5forigin_2eproto;
namespace mediapipe {
class GpuOrigin;
struct GpuOriginDefaultTypeInternal;
extern GpuOriginDefaultTypeInternal _GpuOrigin_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::GpuOrigin* Arena::CreateMaybeMessage<::mediapipe::GpuOrigin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum GpuOrigin_Mode : int {
  GpuOrigin_Mode_DEFAULT = 0,
  GpuOrigin_Mode_CONVENTIONAL = 1,
  GpuOrigin_Mode_TOP_LEFT = 2
};
bool GpuOrigin_Mode_IsValid(int value);
constexpr GpuOrigin_Mode GpuOrigin_Mode_Mode_MIN = GpuOrigin_Mode_DEFAULT;
constexpr GpuOrigin_Mode GpuOrigin_Mode_Mode_MAX = GpuOrigin_Mode_TOP_LEFT;
constexpr int GpuOrigin_Mode_Mode_ARRAYSIZE = GpuOrigin_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpuOrigin_Mode_descriptor();
template<typename T>
inline const std::string& GpuOrigin_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpuOrigin_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpuOrigin_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GpuOrigin_Mode_descriptor(), enum_t_value);
}
inline bool GpuOrigin_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GpuOrigin_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GpuOrigin_Mode>(
    GpuOrigin_Mode_descriptor(), name, value);
}
// ===================================================================

class GpuOrigin final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mediapipe.GpuOrigin) */ {
 public:
  inline GpuOrigin() : GpuOrigin(nullptr) {}
  explicit constexpr GpuOrigin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpuOrigin(const GpuOrigin& from);
  GpuOrigin(GpuOrigin&& from) noexcept
    : GpuOrigin() {
    *this = ::std::move(from);
  }

  inline GpuOrigin& operator=(const GpuOrigin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuOrigin& operator=(GpuOrigin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpuOrigin& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpuOrigin* internal_default_instance() {
    return reinterpret_cast<const GpuOrigin*>(
               &_GpuOrigin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpuOrigin& a, GpuOrigin& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuOrigin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuOrigin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpuOrigin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpuOrigin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GpuOrigin& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GpuOrigin& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.GpuOrigin";
  }
  protected:
  explicit GpuOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GpuOrigin_Mode Mode;
  static constexpr Mode DEFAULT =
    GpuOrigin_Mode_DEFAULT;
  static constexpr Mode CONVENTIONAL =
    GpuOrigin_Mode_CONVENTIONAL;
  static constexpr Mode TOP_LEFT =
    GpuOrigin_Mode_TOP_LEFT;
  static inline bool Mode_IsValid(int value) {
    return GpuOrigin_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    GpuOrigin_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    GpuOrigin_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    GpuOrigin_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return GpuOrigin_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return GpuOrigin_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return GpuOrigin_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mediapipe.GpuOrigin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fgpu_2fgpu_5forigin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpuOrigin

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::GpuOrigin_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::GpuOrigin_Mode>() {
  return ::mediapipe::GpuOrigin_Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fgpu_2fgpu_5forigin_2eproto
