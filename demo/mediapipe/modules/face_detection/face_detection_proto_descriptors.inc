"\n\267\001\n,mediapipe/framework/calculator_options.proto\022\tmediapipe\"F\n"
"\021CalculatorOptions\022%\n\014merge_fields\030\001 \001(\010B\002\030\001R"
"\013mergeFields*\n\010\240\234\001\020\200\200\200\200\002B4\n\032com.google.m"
"ediapipe.protoB\026CalculatorOptionsProto\n\215\001\n+mediapipe/framework/medi"
"apipe_options.proto\022\tmediapipe\"\036\n\020MediaPipeOptions*\n\010\240\234"
"\001\020\200\200\200\200\002B3\n\032com.google.mediapipe.protoB\025MediaPipeOp"
"tionsProto\n\372\002\n(mediapipe/framework/packet_factory.proto\022\tmediapipe"
"\"\"\n\024PacketFactoryOptions*\n\010\240\234\001\020\200\200\200\200\002\""
"\317\001\n\023PacketFactoryConfig\022%\n\016packet_factory\030\001 \001(\tR\rp"
"acketFactory\022,\n\022output_side_packet\030\002 \001(\tR\020outputSidePacket"
"\022(\n\017external_output\030\352\007 \001(\tR\016externalOutput\0229\n\007op"
"tions\030\003 \001(\0132\037.mediapipe.PacketFactoryOptionsR\007options\"M\n"
"\023PacketManagerConfig\0226\n\006packet\030\001 \003(\0132\036.mediapipe.Pack"
"etFactoryConfigR\006packet\n\213\003\n*mediapipe/framework/packet_generator.pr"
"oto\022\tmediapipe\"$\n\026PacketGeneratorOptions*\n\010\240\234\001\020\200"
"\200\200\200\002\"\253\002\n\025PacketGeneratorConfig\022)\n\020packet_generat"
"or\030\001 \001(\tR\017packetGenerator\022*\n\021input_side_packet\030\002 "
"\003(\tR\017inputSidePacket\022&\n\016external_input\030\352\007 \003(\tR\rext"
"ernalInput\022,\n\022output_side_packet\030\003 \003(\tR\020outputSidePacket"
"\022(\n\017external_output\030\353\007 \003(\tR\016externalOutput\022;\n\007op"
"tions\030\004 \001(\0132!.mediapipe.PacketGeneratorOptionsR\007options\n\254"
"\002\n(mediapipe/framework/status_handler.proto\022\tmediapipe\032+mediapipe/f"
"ramework/mediapipe_options.proto\"\307\001\n\023StatusHandlerConfig\022%\n\016"
"status_handler\030\001 \001(\tR\rstatusHandler\022*\n\021input_side_packet\030"
"\002 \003(\tR\017inputSidePacket\022&\n\016external_input\030\352\007 \003(\tR"
"\rexternalInput\0225\n\007options\030\003 \001(\0132\033.mediapipe.MediaPipeOp"
"tionsR\007options\n\222\004\n(mediapipe/framework/stream_handler.proto\022\tme"
"diapipe\032+mediapipe/framework/mediapipe_options.proto\"\236\001\n\030InputSt"
"reamHandlerConfig\022K\n\024input_stream_handler\030\001 \001(\t:\031DefaultIn"
"putStreamHandlerR\022inputStreamHandler\0225\n\007options\030\003 \001(\0132"
"\033.mediapipe.MediaPipeOptionsR\007options\"\316\001\n\031OutputStreamHandler"
"Config\022N\n\025output_stream_handler\030\001 \001(\t:\032InOrderOutputStream"
"HandlerR\023outputStreamHandler\022*\n\021input_side_packet\030\002 \003(\tR"
"\017inputSidePacket\0225\n\007options\030\003 \001(\0132\033.mediapipe.MediaPi"
"peOptionsR\007optionsB<\n\032com.google.mediapipe.protoB\022StreamHandlerProto"
"\242\002\tMediaPipe\n\344\001\n\031google/protobuf/any.proto\022\017google.pro"
"tobuf\"6\n\003Any\022\031\n\010type_url\030\001 \001(\tR\007typeUrl\022\024\n"
"\005value\030\002 \001(\014R\005valueBv\n\023com.google.protobufB\010AnyProtoP"
"\001Z,google.golang.org/protobuf/types/known/anypb\242\002\003GPB\252\002\036G"
"oogle.Protobuf.WellKnownTypesb\006proto3\n\301\036\n$mediapipe/framework/calcu"
"lator.proto\022\tmediapipe\032,mediapipe/framework/calculator_options.proto"
"\032\031google/protobuf/any.proto\032+mediapipe/framework/mediapipe_options.pr"
"oto\032(mediapipe/framework/packet_factory.proto\032*mediapipe/framework/packe"
"t_generator.proto\032(mediapipe/framework/status_handler.proto\032(mediapipe/f"
"ramework/stream_handler.proto\"o\n\016ExecutorConfig\022\022\n\004name\030\001"
" \001(\tR\004name\022\022\n\004type\030\002 \001(\tR\004type\0225\n\007options"
"\030\003 \001(\0132\033.mediapipe.MediaPipeOptionsR\007options\"\317\002\n\017"
"InputCollection\022\022\n\004name\030\001 \001(\tR\004name\022(\n\020side_pack"
"et_name\030\002 \003(\tR\016sidePacketName\022/\n\023external_input_name\030"
"\352\007 \003(\tR\021externalInputName\022C\n\ninput_type\030\003 \001(\0162$."
"mediapipe.InputCollection.InputTypeR\tinputType\022\033\n\tfile_name\030\004 "
"\001(\tR\010fileName\"k\n\tInputType\022\013\n\007UNKNOWN\020\000\022\014\n"
"\010RECORDIO\020\001\022\024\n\020FOREIGN_RECORDIO\020\002\022\024\n\020FOREIG"
"N_CSV_TEXT\020\003\022\027\n\023INVALID_UPPER_BOUND\020\004\"[\n\022InputColle"
"ctionSet\022E\n\020input_collection\030\001 \003(\0132\032.mediapipe.InputColl"
"ectionR\017inputCollection\"K\n\017InputStreamInfo\022\033\n\ttag_index\030"
"\001 \001(\tR\010tagIndex\022\033\n\tback_edge\030\002 \001(\010R\010backEdge"
"\"\316\007\n\016ProfilerConfig\022?\n\034histogram_interval_size_usec\030\001 "
"\001(\003R\031histogramIntervalSizeUsec\0226\n\027num_histogram_intervals\030"
"\002 \001(\003R\025numHistogramIntervals\022A\n\033enable_input_output_latency"
"\030\003 \001(\010B\002\030\001R\030enableInputOutputLatency\022\'\n\017enable"
"_profiler\030\004 \001(\010R\016enableProfiler\0222\n\025enable_stream_latency"
"\030\005 \001(\010R\023enableStreamLatency\022O\n%use_packet_timestamp_for_add"
"ed_packet\030\006 \001(\010R usePacketTimestampForAddedPacket\022,\n\022trace_"
"log_capacity\030\007 \001(\003R\020traceLogCapacity\022;\n\032trace_event_type"
"s_disabled\030\010 \003(\005R\027traceEventTypesDisabled\022$\n\016trace_log_p"
"ath\030\t \001(\tR\014traceLogPath\022&\n\017trace_log_count\030\n \001(\005R"
"\rtraceLogCount\0225\n\027trace_log_interval_usec\030\013 \001(\003R\024traceL"
"ogIntervalUsec\0221\n\025trace_log_margin_usec\030\014 \001(\003R\022traceLogM"
"arginUsec\022=\n\031trace_log_duration_events\030\r \001(\010B\002\030\001R"
"\026traceLogDurationEvents\0227\n\030trace_log_interval_count\030\016 \001("
"\005R\025traceLogIntervalCount\022,\n\022trace_log_disabled\030\017 \001(\010R"
"\020traceLogDisabled\022#\n\rtrace_enabled\030\020 \001(\010R\014traceEnabled"
"\0227\n\030trace_log_instant_events\030\021 \001(\010R\025traceLogInstantEvent"
"s\022+\n\021calculator_filter\030\022 \001(\tR\020calculatorFilter\"\366\016\n"
"\025CalculatorGraphConfig\0229\n\004node\030\001 \003(\0132%.mediapipe.Calcula"
"torGraphConfig.NodeR\004node\022E\n\016packet_factory\030\006 \003(\0132\036.m"
"ediapipe.PacketFactoryConfigR\rpacketFactory\022K\n\020packet_generator\030"
"\007 \003(\0132 .mediapipe.PacketGeneratorConfigR\017packetGenerator\022\037\n"
"\013num_threads\030\010 \001(\005R\nnumThreads\022E\n\016status_handler\030\t "
"\003(\0132\036.mediapipe.StatusHandlerConfigR\rstatusHandler\022!\n\014input_s"
"tream\030\n \003(\tR\013inputStream\022#\n\routput_stream\030\017 \003(\tR\014"
"outputStream\022*\n\021input_side_packet\030\020 \003(\tR\017inputSidePacket"
"\022,\n\022output_side_packet\030\021 \003(\tR\020outputSidePacket\022$\n\016m"
"ax_queue_size\030\013 \001(\005R\014maxQueueSize\022\'\n\017report_deadlock"
"\030\025 \001(\010R\016reportDeadlock\022U\n\024input_stream_handler\030\014 "
"\001(\0132#.mediapipe.InputStreamHandlerConfigR\022inputStreamHandler\022X\n"
"\025output_stream_handler\030\r \001(\0132$.mediapipe.OutputStreamHandlerConfi"
"gR\023outputStreamHandler\0225\n\010executor\030\016 \003(\0132\031.mediapipe."
"ExecutorConfigR\010executor\022B\n\017profiler_config\030\022 \001(\0132\031.m"
"ediapipe.ProfilerConfigR\016profilerConfig\022\030\n\007package\030\023 \001("
"\tR\007package\022\022\n\004type\030\024 \001(\tR\004type\0226\n\007options"
"\030\351\007 \001(\0132\033.mediapipe.MediaPipeOptionsR\007options\022:\n\rgra"
"ph_options\030\352\007 \003(\0132\024.google.protobuf.AnyR\014graphOptions\032"
"\346\006\n\004Node\022\022\n\004name\030\001 \001(\tR\004name\022\036\n\ncalcu"
"lator\030\002 \001(\tR\ncalculator\022!\n\014input_stream\030\003 \003(\tR\013"
"inputStream\022#\n\routput_stream\030\004 \003(\tR\014outputStream\022*\n\021i"
"nput_side_packet\030\005 \003(\tR\017inputSidePacket\022,\n\022output_side_pac"
"ket\030\006 \003(\tR\020outputSidePacket\0226\n\007options\030\007 \001(\0132"
"\034.mediapipe.CalculatorOptionsR\007options\0227\n\014node_options\030\010 "
"\003(\0132\024.google.protobuf.AnyR\013nodeOptions\022!\n\014source_layer\030"
"\t \001(\005R\013sourceLayer\022(\n\020buffer_size_hint\030\n \001(\005R\016bu"
"fferSizeHint\022U\n\024input_stream_handler\030\013 \001(\0132#.mediapipe.Inpu"
"tStreamHandlerConfigR\022inputStreamHandler\022X\n\025output_stream_handler"
"\030\014 \001(\0132$.mediapipe.OutputStreamHandlerConfigR\023outputStreamHandl"
"er\022F\n\021input_stream_info\030\r \003(\0132\032.mediapipe.InputStreamInfoR"
"\017inputStreamInfo\022\032\n\010executor\030\016 \001(\tR\010executor\022F\n"
"\017profiler_config\030\017 \001(\0132\031.mediapipe.ProfilerConfigB\002\030"
"\001R\016profilerConfig\022\"\n\rmax_in_flight\030\020 \001(\005R\013maxInFlig"
"ht\022!\n\014option_value\030\021 \003(\tR\013optionValue\022&\n\016external_i"
"nput\030\355\007 \003(\tR\rexternalInputB-\n\032com.google.mediapipe.protoB"
"\017CalculatorProtoP\000b\006proto3\n\262\002\n0mediapipe/calculators/core/gat"
"e_calculator.proto\022\tmediapipe\032$mediapipe/framework/calculator.proto\""
"\276\001\n\025GateCalculatorOptions\0223\n\026empty_packets_as_allow\030\001 "
"\001(\010R\023emptyPacketsAsAllow\022\033\n\005allow\030\002 \001(\010:\005fal"
"seR\005allow2S\n\003ext\022\034.mediapipe.CalculatorOptions\030\337\237\350| "
"\001(\0132 .mediapipe.GateCalculatorOptionsR\003extB\014\242\002\tMediaPipe\nm"
"\n\036mediapipe/gpu/gpu_origin.proto\022\tmediapipe\"@\n\tGpuOrigin\"3\n\004Mo"
"de\022\013\n\007DEFAULT\020\000\022\020\n\014CONVENTIONAL\020\001\022\014\n"
"\010TOP_LEFT\020\002\n\352\010\n=mediapipe/calculators/tensor/image_to_tensor_"
"calculator.proto\022\tmediapipe\032$mediapipe/framework/calculator.proto\032"
"\036mediapipe/gpu/gpu_origin.proto\"\327\007\n\036ImageToTensorCalculatorOptio"
"ns\022.\n\023output_tensor_width\030\001 \001(\005R\021outputTensorWidth\0220"
"\n\024output_tensor_height\030\002 \001(\005R\022outputTensorHeight\022*\n\021"
"keep_aspect_ratio\030\003 \001(\010R\017keepAspectRatio\022q\n\031output_tenso"
"r_float_range\030\004 \001(\01324.mediapipe.ImageToTensorCalculatorOptions.Flo"
"atRangeH\000R\026outputTensorFloatRange\022k\n\027output_tensor_int_range\030"
"\007 \001(\01322.mediapipe.ImageToTensorCalculatorOptions.IntRangeH\000R\024ou"
"tputTensorIntRange\022n\n\030output_tensor_uint_range\030\010 \001(\01323.medi"
"apipe.ImageToTensorCalculatorOptions.UIntRangeH\000R\025outputTensorUintRange"
"\0228\n\ngpu_origin\030\005 \001(\0162\031.mediapipe.GpuOrigin.ModeR\tgpuOrigi"
"n\022U\n\013border_mode\030\006 \001(\01624.mediapipe.ImageToTensorCalculatorO"
"ptions.BorderModeR\nborderMode\0320\n\nFloatRange\022\020\n\003min\030\001 "
"\001(\002R\003min\022\020\n\003max\030\002 \001(\002R\003max\032.\n\010IntRang"
"e\022\020\n\003min\030\001 \001(\003R\003min\022\020\n\003max\030\002 \001("
"\003R\003max\032/\n\tUIntRange\022\020\n\003min\030\001 \001(\004R\003min\022"
"\020\n\003max\030\002 \001(\004R\003max\"K\n\nBorderMode\022\026\n\022BORDER_U"
"NSPECIFIED\020\000\022\017\n\013BORDER_ZERO\020\001\022\024\n\020BORDER_REPLIC"
"ATE\020\0022]\n\003ext\022\034.mediapipe.CalculatorOptions\030\323\352\267\237"
"\001 \001(\0132).mediapipe.ImageToTensorCalculatorOptionsR\003extB\007\n\005ra"
"nge\n\262\014\n7mediapipe/calculators/tensor/inference_calculator.proto\022\tm"
"ediapipe\032$mediapipe/framework/calculator.proto\"\202\013\n\032InferenceCalc"
"ulatorOptions\022\035\n\nmodel_path\030\001 \001(\tR\tmodelPath\022\"\n\007use"
"_gpu\030\002 \001(\010:\005falseB\002\030\001R\006useGpu\022&\n\tuse_nnapi\030"
"\003 \001(\010:\005falseB\002\030\001R\010useNnapi\022(\n\016cpu_num_thread"
"\030\004 \001(\005:\002-1R\014cpuNumThread\022J\n\010delegate\030\005 \001("
"\0132..mediapipe.InferenceCalculatorOptions.DelegateR\010delegate\032\247\010"
"\n\010Delegate\022O\n\006tflite\030\001 \001(\01325.mediapipe.InferenceCalcula"
"torOptions.Delegate.TfLiteH\000R\006tflite\022F\n\003gpu\030\002 \001(\01322.m"
"ediapipe.InferenceCalculatorOptions.Delegate.GpuH\000R\003gpu\022L\n\005nnapi"
"\030\003 \001(\01324.mediapipe.InferenceCalculatorOptions.Delegate.NnapiH\000R"
"\005nnapi\022R\n\007xnnpack\030\004 \001(\01326.mediapipe.InferenceCalculatorO"
"ptions.Delegate.XnnpackH\000R\007xnnpack\032\010\n\006TfLite\032\247\004\n\003"
"Gpu\0226\n\024use_advanced_gpu_api\030\001 \001(\010:\005falseR\021useAdvanced"
"GpuApi\022M\n\003api\030\004 \001(\01626.mediapipe.InferenceCalculatorOptions."
"Delegate.Gpu.Api:\003ANYR\003api\0226\n\024allow_precision_loss\030\003 \001("
"\010:\004trueR\022allowPrecisionLoss\022,\n\022cached_kernel_path\030\002 \001"
"(\tR\020cachedKernelPath\0220\n\024serialized_model_dir\030\007 \001(\tR\022se"
"rializedModelDir\022\037\n\013model_token\030\010 \001(\tR\nmodelToken\022h\n"
"\005usage\030\005 \001(\0162A.mediapipe.InferenceCalculatorOptions.Delegate.Gp"
"u.InferenceUsage:\017SUSTAINED_SPEEDR\005usage\"&\n\003Api\022\007\n\003ANY"
"\020\000\022\n\n\006OPENGL\020\001\022\n\n\006OPENCL\020\002\"N\n\016Inference"
"Usage\022\017\n\013UNSPECIFIED\020\000\022\026\n\022FAST_SINGLE_ANSWER\020\001"
"\022\023\n\017SUSTAINED_SPEED\020\002\032p\n\005Nnapi\022\033\n\tcache_dir\030"
"\001 \001(\tR\010cacheDir\022\037\n\013model_token\030\002 \001(\tR\nmodelToke"
"n\022)\n\020accelerator_name\030\003 \001(\tR\017acceleratorName\032.\n\007Xnn"
"pack\022#\n\013num_threads\030\001 \001(\005:\002-1R\nnumThreadsB\n\n\010deleg"
"ate2Y\n\003ext\022\034.mediapipe.CalculatorOptions\030\367\323\313\240\001 "
"\001(\0132%.mediapipe.InferenceCalculatorOptionsR\003extBA\n%com.google.mediap"
"ipe.calculator.protoB\030InferenceCalculatorProto\n\311\r\nCmediapipe/calculat"
"ors/tensor/tensors_to_detections_calculator.proto\022\tmediapipe\032$mediapipe"
"/framework/calculator.proto\"\320\014\n$TensorsToDetectionsCalculatorOptions"
"\022\037\n\013num_classes\030\001 \001(\005R\nnumClasses\022\033\n\tnum_boxes"
"\030\002 \001(\005R\010numBoxes\022\035\n\nnum_coords\030\003 \001(\005R\tnumC"
"oords\0222\n\025keypoint_coord_offset\030\t \001(\005R\023keypointCoordOffset"
"\022&\n\rnum_keypoints\030\n \001(\005:\0010R\014numKeypoints\0228\n\027num_va"
"lues_per_keypoint\030\013 \001(\005:\0012R\024numValuesPerKeypoint\022+\n\020b"
"ox_coord_offset\030\014 \001(\005:\0010R\016boxCoordOffset\022\032\n\007x_scal"
"e\030\004 \001(\002:\0010R\006xScale\022\032\n\007y_scale\030\005 \001(\002:"
"\0010R\006yScale\022\032\n\007w_scale\030\006 \001(\002:\0010R\006wScale\022"
"\032\n\007h_scale\030\007 \001(\002:\0010R\006hScale\022G\n\035apply_exponenti"
"al_on_box_size\030\r \001(\010:\005falseR\031applyExponentialOnBoxSize\0227\n"
"\024reverse_output_order\030\016 \001(\010:\005falseR\022reverseOutputOrder"
"\022%\n\016ignore_classes\030\010 \003(\005R\rignoreClasses\022\'\n\rallow_cla"
"sses\030\025 \003(\005B\002\020\001R\014allowClasses\022*\n\rsigmoid_score\030"
"\017 \001(\010:\005falseR\014sigmoidScore\0222\n\025score_clipping_thresh\030"
"\020 \001(\002R\023scoreClippingThresh\022.\n\017flip_vertically\030\022 \001("
"\010:\005falseR\016flipVertically\022(\n\020min_score_thresh\030\023 \001(\002"
"R\016minScoreThresh\022#\n\013max_results\030\024 \001(\005:\002-1R\nmaxResult"
"s\022d\n\016tensor_mapping\030\026 \001(\0132=.mediapipe.TensorsToDetectionsCa"
"lculatorOptions.TensorMappingR\rtensorMapping\022|\n\026box_boundaries_indices"
"\030\027 \001(\0132D.mediapipe.TensorsToDetectionsCalculatorOptions.BoxBoundar"
"iesIndicesH\000R\024boxBoundariesIndices\032\232\002\n\rTensorMapping\0226\n"
"\027detections_tensor_index\030\001 \001(\005R\025detectionsTensorIndex\0220\n"
"\024classes_tensor_index\030\002 \001(\005R\022classesTensorIndex\022.\n\023sc"
"ores_tensor_index\030\003 \001(\005R\021scoresTensorIndex\022=\n\033num_detect"
"ions_tensor_index\030\004 \001(\005R\030numDetectionsTensorIndex\0220\n\024anc"
"hors_tensor_index\030\005 \001(\005R\022anchorsTensorIndex\032r\n\024BoxBounda"
"riesIndices\022\025\n\004ymin\030\001 \001(\005:\0010R\004ymin\022\025\n\004xm"
"in\030\002 \001(\005:\0011R\004xmin\022\025\n\004ymax\030\003 \001(\005:\0012R"
"\004ymax\022\025\n\004xmax\030\004 \001(\005:\0013R\004xmax2c\n\003ext\022\034"
".mediapipe.CalculatorOptions\030\257\215\214\240\001 \001(\0132/.mediapipe.Ten"
"sorsToDetectionsCalculatorOptionsR\003extB\r\n\013box_indices\n\315\006\n9medi"
"apipe/calculators/tflite/ssd_anchors_calculator.proto\022\tmediapipe\032$media"
"pipe/framework/calculator.proto\"\336\005\n\033SsdAnchorsCalculatorOptions\022"
"(\n\020input_size_width\030\001 \001(\005R\016inputSizeWidth\022*\n\021input_s"
"ize_height\030\002 \001(\005R\017inputSizeHeight\022\033\n\tmin_scale\030\003 "
"\001(\002R\010minScale\022\033\n\tmax_scale\030\004 \001(\002R\010maxScale\022"
"+\n\017anchor_offset_x\030\005 \001(\002:\0030.5R\ranchorOffsetX\022+\n\017anc"
"hor_offset_y\030\006 \001(\002:\0030.5R\ranchorOffsetY\022\035\n\nnum_layers"
"\030\007 \001(\005R\tnumLayers\022*\n\021feature_map_width\030\010 \003(\005R"
"\017featureMapWidth\022,\n\022feature_map_height\030\t \003(\005R\020featureMa"
"pHeight\022\030\n\007strides\030\n \003(\005R\007strides\022#\n\raspect_ratios"
"\030\013 \003(\002R\014aspectRatios\022E\n\034reduce_boxes_in_lowest_layer\030"
"\014 \001(\010:\005falseR\030reduceBoxesInLowestLayer\022H\n\037interpolated_s"
"cale_aspect_ratio\030\r \001(\002:\0011R\034interpolatedScaleAspectRatio\0221"
"\n\021fixed_anchor_size\030\016 \001(\010:\005falseR\017fixedAnchorSize2Y\n"
"\003ext\022\034.mediapipe.CalculatorOptions\030\377\270\363u \001(\0132&.media"
"pipe.SsdAnchorsCalculatorOptionsR\003ext\n\245\007\n5mediapipe/modules/face_de"
"tection/face_detection.proto\022\tmediapipe\0327mediapipe/calculators/tensor/i"
"nference_calculator.proto\032,mediapipe/framework/calculator_options.proto\032"
"\036mediapipe/gpu/gpu_origin.proto\"\222\005\n\024FaceDetectionOptions\022\035"
"\n\nmodel_path\030\001 \001(\tR\tmodelPath\0228\n\ngpu_origin\030\013 \001("
"\0162\031.mediapipe.GpuOrigin.ModeR\tgpuOrigin\022!\n\014tensor_width\030\025 "
"\001(\005R\013tensorWidth\022#\n\rtensor_height\030\026 \001(\005R\014tensorHe"
"ight\022\035\n\nnum_layers\030\027 \001(\005R\tnumLayers\022\030\n\007strides"
"\030\030 \003(\005R\007strides\022H\n\037interpolated_scale_aspect_ratio\030"
"\031 \001(\002:\0011R\034interpolatedScaleAspectRatio\022\033\n\tnum_boxes\030"
"\037 \001(\005R\010numBoxes\022\032\n\007x_scale\030  \001(\002:\0010R\006xSca"
"le\022\032\n\007y_scale\030! \001(\002:\0010R\006yScale\022\032\n\007w_scale"
"\030\" \001(\002:\0010R\006wScale\022\032\n\007h_scale\030# \001(\002:\0010R"
"\006hScale\022(\n\020min_score_thresh\030$ \001(\002R\016minScoreThresh\022J\n"
"\010delegate\030\006 \001(\0132..mediapipe.InferenceCalculatorOptions.Delegate"
"R\010delegate2S\n\003ext\022\034.mediapipe.CalculatorOptions\030\356\363\274"
"\262\001 \001(\0132\037.mediapipe.FaceDetectionOptionsR\003extBE\n*com.google."
"mediapipe.modules.facedetectionB\027FaceDetectionFrontProto"
