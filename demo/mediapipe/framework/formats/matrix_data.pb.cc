// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/matrix_data.proto

#include "mediapipe/framework/formats/matrix_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr MatrixData::MatrixData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packed_data_()
  , rows_(0)
  , cols_(0)
  , layout_(0)
{}
struct MatrixDataDefaultTypeInternal {
  constexpr MatrixDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatrixDataDefaultTypeInternal() {}
  union {
    MatrixData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatrixDataDefaultTypeInternal _MatrixData_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto = nullptr;

const uint32_t TableStruct_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::MatrixData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MatrixData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MatrixData, rows_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MatrixData, cols_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MatrixData, packed_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MatrixData, layout_),
  0,
  1,
  ~0u,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::mediapipe::MatrixData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MatrixData_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-mediapipe/framework/formats/matrix_dat"
  "a.proto\022\tmediapipe\"\250\001\n\nMatrixData\022\014\n\004row"
  "s\030\001 \001(\005\022\014\n\004cols\030\002 \001(\005\022\027\n\013packed_data\030\003 \003"
  "(\002B\002\020\001\022:\n\006layout\030\004 \001(\0162\034.mediapipe.Matri"
  "xData.Layout:\014COLUMN_MAJOR\")\n\006Layout\022\020\n\014"
  "COLUMN_MAJOR\020\000\022\r\n\tROW_MAJOR\020\001B5\n\"com.goo"
  "gle.mediapipe.formats.protoB\017MatrixDataP"
  "roto"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto = {
  false, false, 284, descriptor_table_protodef_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto, "mediapipe/framework/formats/matrix_data.proto", 
  &descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto::offsets,
  file_level_metadata_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto, file_level_enum_descriptors_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto, file_level_service_descriptors_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto_getter() {
  return &descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto(&descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatrixData_Layout_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto);
  return file_level_enum_descriptors_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto[0];
}
bool MatrixData_Layout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MatrixData_Layout MatrixData::COLUMN_MAJOR;
constexpr MatrixData_Layout MatrixData::ROW_MAJOR;
constexpr MatrixData_Layout MatrixData::Layout_MIN;
constexpr MatrixData_Layout MatrixData::Layout_MAX;
constexpr int MatrixData::Layout_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MatrixData::_Internal {
 public:
  using HasBits = decltype(std::declval<MatrixData>()._has_bits_);
  static void set_has_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cols(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MatrixData::MatrixData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  packed_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediapipe.MatrixData)
}
MatrixData::MatrixData(const MatrixData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      packed_data_(from.packed_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&layout_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(layout_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.MatrixData)
}

inline void MatrixData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rows_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layout_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(layout_));
}

MatrixData::~MatrixData() {
  // @@protoc_insertion_point(destructor:mediapipe.MatrixData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MatrixData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MatrixData::ArenaDtor(void* object) {
  MatrixData* _this = reinterpret_cast< MatrixData* >(object);
  (void)_this;
}
void MatrixData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatrixData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatrixData::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MatrixData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packed_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&layout_) -
        reinterpret_cast<char*>(&rows_)) + sizeof(layout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatrixData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rows(&has_bits);
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cols(&has_bits);
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float packed_data = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_packed_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_packed_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .mediapipe.MatrixData.Layout layout = 4 [default = COLUMN_MAJOR];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::MatrixData_Layout_IsValid(val))) {
            _internal_set_layout(static_cast<::mediapipe::MatrixData_Layout>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatrixData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MatrixData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rows = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rows(), target);
  }

  // optional int32 cols = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cols(), target);
  }

  // repeated float packed_data = 3 [packed = true];
  if (this->_internal_packed_data_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_packed_data(), target);
  }

  // optional .mediapipe.MatrixData.Layout layout = 4 [default = COLUMN_MAJOR];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_layout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MatrixData)
  return target;
}

size_t MatrixData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MatrixData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float packed_data = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 rows = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rows());
    }

    // optional int32 cols = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cols());
    }

    // optional .mediapipe.MatrixData.Layout layout = 4 [default = COLUMN_MAJOR];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layout());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatrixData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatrixData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatrixData::GetClassData() const { return &_class_data_; }

void MatrixData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatrixData *>(to)->MergeFrom(
      static_cast<const MatrixData &>(from));
}


void MatrixData::MergeFrom(const MatrixData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MatrixData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  packed_data_.MergeFrom(from.packed_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rows_ = from.rows_;
    }
    if (cached_has_bits & 0x00000002u) {
      cols_ = from.cols_;
    }
    if (cached_has_bits & 0x00000004u) {
      layout_ = from.layout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatrixData::CopyFrom(const MatrixData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MatrixData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixData::IsInitialized() const {
  return true;
}

void MatrixData::InternalSwap(MatrixData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packed_data_.InternalSwap(&other->packed_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatrixData, layout_)
      + sizeof(MatrixData::layout_)
      - PROTOBUF_FIELD_OFFSET(MatrixData, rows_)>(
          reinterpret_cast<char*>(&rows_),
          reinterpret_cast<char*>(&other->rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatrixData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto_getter, &descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto_once,
      file_level_metadata_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::MatrixData* Arena::CreateMaybeMessage< ::mediapipe::MatrixData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MatrixData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
