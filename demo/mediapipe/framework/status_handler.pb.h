// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/status_handler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fstatus_5fhandler_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fstatus_5fhandler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/mediapipe_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fstatus_5fhandler_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fstatus_5fhandler_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fstatus_5fhandler_2eproto;
namespace mediapipe {
class StatusHandlerConfig;
struct StatusHandlerConfigDefaultTypeInternal;
extern StatusHandlerConfigDefaultTypeInternal _StatusHandlerConfig_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::StatusHandlerConfig* Arena::CreateMaybeMessage<::mediapipe::StatusHandlerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class StatusHandlerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.StatusHandlerConfig) */ {
 public:
  inline StatusHandlerConfig() : StatusHandlerConfig(nullptr) {}
  ~StatusHandlerConfig() override;
  explicit constexpr StatusHandlerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusHandlerConfig(const StatusHandlerConfig& from);
  StatusHandlerConfig(StatusHandlerConfig&& from) noexcept
    : StatusHandlerConfig() {
    *this = ::std::move(from);
  }

  inline StatusHandlerConfig& operator=(const StatusHandlerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusHandlerConfig& operator=(StatusHandlerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusHandlerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusHandlerConfig* internal_default_instance() {
    return reinterpret_cast<const StatusHandlerConfig*>(
               &_StatusHandlerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StatusHandlerConfig& a, StatusHandlerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusHandlerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusHandlerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusHandlerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusHandlerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusHandlerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusHandlerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusHandlerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.StatusHandlerConfig";
  }
  protected:
  explicit StatusHandlerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputSidePacketFieldNumber = 2,
    kExternalInputFieldNumber = 1002,
    kStatusHandlerFieldNumber = 1,
    kOptionsFieldNumber = 3,
  };
  // repeated string input_side_packet = 2;
  int input_side_packet_size() const;
  private:
  int _internal_input_side_packet_size() const;
  public:
  void clear_input_side_packet();
  const std::string& input_side_packet(int index) const;
  std::string* mutable_input_side_packet(int index);
  void set_input_side_packet(int index, const std::string& value);
  void set_input_side_packet(int index, std::string&& value);
  void set_input_side_packet(int index, const char* value);
  void set_input_side_packet(int index, const char* value, size_t size);
  std::string* add_input_side_packet();
  void add_input_side_packet(const std::string& value);
  void add_input_side_packet(std::string&& value);
  void add_input_side_packet(const char* value);
  void add_input_side_packet(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_side_packet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_side_packet();
  private:
  const std::string& _internal_input_side_packet(int index) const;
  std::string* _internal_add_input_side_packet();
  public:

  // repeated string external_input = 1002;
  int external_input_size() const;
  private:
  int _internal_external_input_size() const;
  public:
  void clear_external_input();
  const std::string& external_input(int index) const;
  std::string* mutable_external_input(int index);
  void set_external_input(int index, const std::string& value);
  void set_external_input(int index, std::string&& value);
  void set_external_input(int index, const char* value);
  void set_external_input(int index, const char* value, size_t size);
  std::string* add_external_input();
  void add_external_input(const std::string& value);
  void add_external_input(std::string&& value);
  void add_external_input(const char* value);
  void add_external_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& external_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_external_input();
  private:
  const std::string& _internal_external_input(int index) const;
  std::string* _internal_add_external_input();
  public:

  // optional string status_handler = 1;
  bool has_status_handler() const;
  private:
  bool _internal_has_status_handler() const;
  public:
  void clear_status_handler();
  const std::string& status_handler() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_handler(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_handler();
  PROTOBUF_NODISCARD std::string* release_status_handler();
  void set_allocated_status_handler(std::string* status_handler);
  private:
  const std::string& _internal_status_handler() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_handler(const std::string& value);
  std::string* _internal_mutable_status_handler();
  public:

  // optional .mediapipe.MediaPipeOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::mediapipe::MediaPipeOptions& options() const;
  PROTOBUF_NODISCARD ::mediapipe::MediaPipeOptions* release_options();
  ::mediapipe::MediaPipeOptions* mutable_options();
  void set_allocated_options(::mediapipe::MediaPipeOptions* options);
  private:
  const ::mediapipe::MediaPipeOptions& _internal_options() const;
  ::mediapipe::MediaPipeOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::mediapipe::MediaPipeOptions* options);
  ::mediapipe::MediaPipeOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:mediapipe.StatusHandlerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_side_packet_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> external_input_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_handler_;
  ::mediapipe::MediaPipeOptions* options_;
  friend struct ::TableStruct_mediapipe_2fframework_2fstatus_5fhandler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatusHandlerConfig

// optional string status_handler = 1;
inline bool StatusHandlerConfig::_internal_has_status_handler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatusHandlerConfig::has_status_handler() const {
  return _internal_has_status_handler();
}
inline void StatusHandlerConfig::clear_status_handler() {
  status_handler_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StatusHandlerConfig::status_handler() const {
  // @@protoc_insertion_point(field_get:mediapipe.StatusHandlerConfig.status_handler)
  return _internal_status_handler();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusHandlerConfig::set_status_handler(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 status_handler_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.StatusHandlerConfig.status_handler)
}
inline std::string* StatusHandlerConfig::mutable_status_handler() {
  std::string* _s = _internal_mutable_status_handler();
  // @@protoc_insertion_point(field_mutable:mediapipe.StatusHandlerConfig.status_handler)
  return _s;
}
inline const std::string& StatusHandlerConfig::_internal_status_handler() const {
  return status_handler_.Get();
}
inline void StatusHandlerConfig::_internal_set_status_handler(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  status_handler_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusHandlerConfig::_internal_mutable_status_handler() {
  _has_bits_[0] |= 0x00000001u;
  return status_handler_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusHandlerConfig::release_status_handler() {
  // @@protoc_insertion_point(field_release:mediapipe.StatusHandlerConfig.status_handler)
  if (!_internal_has_status_handler()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = status_handler_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_handler_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StatusHandlerConfig::set_allocated_status_handler(std::string* status_handler) {
  if (status_handler != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_handler_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_handler,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_handler_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.StatusHandlerConfig.status_handler)
}

// repeated string input_side_packet = 2;
inline int StatusHandlerConfig::_internal_input_side_packet_size() const {
  return input_side_packet_.size();
}
inline int StatusHandlerConfig::input_side_packet_size() const {
  return _internal_input_side_packet_size();
}
inline void StatusHandlerConfig::clear_input_side_packet() {
  input_side_packet_.Clear();
}
inline std::string* StatusHandlerConfig::add_input_side_packet() {
  std::string* _s = _internal_add_input_side_packet();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.StatusHandlerConfig.input_side_packet)
  return _s;
}
inline const std::string& StatusHandlerConfig::_internal_input_side_packet(int index) const {
  return input_side_packet_.Get(index);
}
inline const std::string& StatusHandlerConfig::input_side_packet(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.StatusHandlerConfig.input_side_packet)
  return _internal_input_side_packet(index);
}
inline std::string* StatusHandlerConfig::mutable_input_side_packet(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.StatusHandlerConfig.input_side_packet)
  return input_side_packet_.Mutable(index);
}
inline void StatusHandlerConfig::set_input_side_packet(int index, const std::string& value) {
  input_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.StatusHandlerConfig.input_side_packet)
}
inline void StatusHandlerConfig::set_input_side_packet(int index, std::string&& value) {
  input_side_packet_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.StatusHandlerConfig.input_side_packet)
}
inline void StatusHandlerConfig::set_input_side_packet(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.StatusHandlerConfig.input_side_packet)
}
inline void StatusHandlerConfig::set_input_side_packet(int index, const char* value, size_t size) {
  input_side_packet_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.StatusHandlerConfig.input_side_packet)
}
inline std::string* StatusHandlerConfig::_internal_add_input_side_packet() {
  return input_side_packet_.Add();
}
inline void StatusHandlerConfig::add_input_side_packet(const std::string& value) {
  input_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.StatusHandlerConfig.input_side_packet)
}
inline void StatusHandlerConfig::add_input_side_packet(std::string&& value) {
  input_side_packet_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.StatusHandlerConfig.input_side_packet)
}
inline void StatusHandlerConfig::add_input_side_packet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.StatusHandlerConfig.input_side_packet)
}
inline void StatusHandlerConfig::add_input_side_packet(const char* value, size_t size) {
  input_side_packet_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.StatusHandlerConfig.input_side_packet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatusHandlerConfig::input_side_packet() const {
  // @@protoc_insertion_point(field_list:mediapipe.StatusHandlerConfig.input_side_packet)
  return input_side_packet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatusHandlerConfig::mutable_input_side_packet() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.StatusHandlerConfig.input_side_packet)
  return &input_side_packet_;
}

// repeated string external_input = 1002;
inline int StatusHandlerConfig::_internal_external_input_size() const {
  return external_input_.size();
}
inline int StatusHandlerConfig::external_input_size() const {
  return _internal_external_input_size();
}
inline void StatusHandlerConfig::clear_external_input() {
  external_input_.Clear();
}
inline std::string* StatusHandlerConfig::add_external_input() {
  std::string* _s = _internal_add_external_input();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.StatusHandlerConfig.external_input)
  return _s;
}
inline const std::string& StatusHandlerConfig::_internal_external_input(int index) const {
  return external_input_.Get(index);
}
inline const std::string& StatusHandlerConfig::external_input(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.StatusHandlerConfig.external_input)
  return _internal_external_input(index);
}
inline std::string* StatusHandlerConfig::mutable_external_input(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.StatusHandlerConfig.external_input)
  return external_input_.Mutable(index);
}
inline void StatusHandlerConfig::set_external_input(int index, const std::string& value) {
  external_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.StatusHandlerConfig.external_input)
}
inline void StatusHandlerConfig::set_external_input(int index, std::string&& value) {
  external_input_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.StatusHandlerConfig.external_input)
}
inline void StatusHandlerConfig::set_external_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.StatusHandlerConfig.external_input)
}
inline void StatusHandlerConfig::set_external_input(int index, const char* value, size_t size) {
  external_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.StatusHandlerConfig.external_input)
}
inline std::string* StatusHandlerConfig::_internal_add_external_input() {
  return external_input_.Add();
}
inline void StatusHandlerConfig::add_external_input(const std::string& value) {
  external_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.StatusHandlerConfig.external_input)
}
inline void StatusHandlerConfig::add_external_input(std::string&& value) {
  external_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.StatusHandlerConfig.external_input)
}
inline void StatusHandlerConfig::add_external_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.StatusHandlerConfig.external_input)
}
inline void StatusHandlerConfig::add_external_input(const char* value, size_t size) {
  external_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.StatusHandlerConfig.external_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatusHandlerConfig::external_input() const {
  // @@protoc_insertion_point(field_list:mediapipe.StatusHandlerConfig.external_input)
  return external_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatusHandlerConfig::mutable_external_input() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.StatusHandlerConfig.external_input)
  return &external_input_;
}

// optional .mediapipe.MediaPipeOptions options = 3;
inline bool StatusHandlerConfig::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool StatusHandlerConfig::has_options() const {
  return _internal_has_options();
}
inline const ::mediapipe::MediaPipeOptions& StatusHandlerConfig::_internal_options() const {
  const ::mediapipe::MediaPipeOptions* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MediaPipeOptions&>(
      ::mediapipe::_MediaPipeOptions_default_instance_);
}
inline const ::mediapipe::MediaPipeOptions& StatusHandlerConfig::options() const {
  // @@protoc_insertion_point(field_get:mediapipe.StatusHandlerConfig.options)
  return _internal_options();
}
inline void StatusHandlerConfig::unsafe_arena_set_allocated_options(
    ::mediapipe::MediaPipeOptions* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.StatusHandlerConfig.options)
}
inline ::mediapipe::MediaPipeOptions* StatusHandlerConfig::release_options() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MediaPipeOptions* temp = options_;
  options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::MediaPipeOptions* StatusHandlerConfig::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:mediapipe.StatusHandlerConfig.options)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MediaPipeOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::mediapipe::MediaPipeOptions* StatusHandlerConfig::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MediaPipeOptions>(GetArenaForAllocation());
    options_ = p;
  }
  return options_;
}
inline ::mediapipe::MediaPipeOptions* StatusHandlerConfig::mutable_options() {
  ::mediapipe::MediaPipeOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:mediapipe.StatusHandlerConfig.options)
  return _msg;
}
inline void StatusHandlerConfig::set_allocated_options(::mediapipe::MediaPipeOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options));
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.StatusHandlerConfig.options)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fstatus_5fhandler_2eproto
