// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator_options.pb.h"
#include <google/protobuf/any.pb.h>
#include "mediapipe/framework/mediapipe_options.pb.h"
#include "mediapipe/framework/packet_factory.pb.h"
#include "mediapipe/framework/packet_generator.pb.h"
#include "mediapipe/framework/status_handler.pb.h"
#include "mediapipe/framework/stream_handler.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fcalculator_2eproto;
namespace mediapipe {
class CalculatorGraphConfig;
struct CalculatorGraphConfigDefaultTypeInternal;
extern CalculatorGraphConfigDefaultTypeInternal _CalculatorGraphConfig_default_instance_;
class CalculatorGraphConfig_Node;
struct CalculatorGraphConfig_NodeDefaultTypeInternal;
extern CalculatorGraphConfig_NodeDefaultTypeInternal _CalculatorGraphConfig_Node_default_instance_;
class ExecutorConfig;
struct ExecutorConfigDefaultTypeInternal;
extern ExecutorConfigDefaultTypeInternal _ExecutorConfig_default_instance_;
class InputCollection;
struct InputCollectionDefaultTypeInternal;
extern InputCollectionDefaultTypeInternal _InputCollection_default_instance_;
class InputCollectionSet;
struct InputCollectionSetDefaultTypeInternal;
extern InputCollectionSetDefaultTypeInternal _InputCollectionSet_default_instance_;
class InputStreamInfo;
struct InputStreamInfoDefaultTypeInternal;
extern InputStreamInfoDefaultTypeInternal _InputStreamInfo_default_instance_;
class ProfilerConfig;
struct ProfilerConfigDefaultTypeInternal;
extern ProfilerConfigDefaultTypeInternal _ProfilerConfig_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::CalculatorGraphConfig* Arena::CreateMaybeMessage<::mediapipe::CalculatorGraphConfig>(Arena*);
template<> ::mediapipe::CalculatorGraphConfig_Node* Arena::CreateMaybeMessage<::mediapipe::CalculatorGraphConfig_Node>(Arena*);
template<> ::mediapipe::ExecutorConfig* Arena::CreateMaybeMessage<::mediapipe::ExecutorConfig>(Arena*);
template<> ::mediapipe::InputCollection* Arena::CreateMaybeMessage<::mediapipe::InputCollection>(Arena*);
template<> ::mediapipe::InputCollectionSet* Arena::CreateMaybeMessage<::mediapipe::InputCollectionSet>(Arena*);
template<> ::mediapipe::InputStreamInfo* Arena::CreateMaybeMessage<::mediapipe::InputStreamInfo>(Arena*);
template<> ::mediapipe::ProfilerConfig* Arena::CreateMaybeMessage<::mediapipe::ProfilerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum InputCollection_InputType : int {
  InputCollection_InputType_UNKNOWN = 0,
  InputCollection_InputType_RECORDIO = 1,
  InputCollection_InputType_FOREIGN_RECORDIO = 2,
  InputCollection_InputType_FOREIGN_CSV_TEXT = 3,
  InputCollection_InputType_INVALID_UPPER_BOUND = 4,
  InputCollection_InputType_InputCollection_InputType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InputCollection_InputType_InputCollection_InputType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InputCollection_InputType_IsValid(int value);
constexpr InputCollection_InputType InputCollection_InputType_InputType_MIN = InputCollection_InputType_UNKNOWN;
constexpr InputCollection_InputType InputCollection_InputType_InputType_MAX = InputCollection_InputType_INVALID_UPPER_BOUND;
constexpr int InputCollection_InputType_InputType_ARRAYSIZE = InputCollection_InputType_InputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputCollection_InputType_descriptor();
template<typename T>
inline const std::string& InputCollection_InputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InputCollection_InputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InputCollection_InputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InputCollection_InputType_descriptor(), enum_t_value);
}
inline bool InputCollection_InputType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InputCollection_InputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InputCollection_InputType>(
    InputCollection_InputType_descriptor(), name, value);
}
// ===================================================================

class ExecutorConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ExecutorConfig) */ {
 public:
  inline ExecutorConfig() : ExecutorConfig(nullptr) {}
  ~ExecutorConfig() override;
  explicit constexpr ExecutorConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutorConfig(const ExecutorConfig& from);
  ExecutorConfig(ExecutorConfig&& from) noexcept
    : ExecutorConfig() {
    *this = ::std::move(from);
  }

  inline ExecutorConfig& operator=(const ExecutorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutorConfig& operator=(ExecutorConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutorConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutorConfig* internal_default_instance() {
    return reinterpret_cast<const ExecutorConfig*>(
               &_ExecutorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExecutorConfig& a, ExecutorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutorConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecutorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecutorConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecutorConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecutorConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutorConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ExecutorConfig";
  }
  protected:
  explicit ExecutorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kOptionsFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .mediapipe.MediaPipeOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::mediapipe::MediaPipeOptions& options() const;
  PROTOBUF_NODISCARD ::mediapipe::MediaPipeOptions* release_options();
  ::mediapipe::MediaPipeOptions* mutable_options();
  void set_allocated_options(::mediapipe::MediaPipeOptions* options);
  private:
  const ::mediapipe::MediaPipeOptions& _internal_options() const;
  ::mediapipe::MediaPipeOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::mediapipe::MediaPipeOptions* options);
  ::mediapipe::MediaPipeOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:mediapipe.ExecutorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::mediapipe::MediaPipeOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class InputCollection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.InputCollection) */ {
 public:
  inline InputCollection() : InputCollection(nullptr) {}
  ~InputCollection() override;
  explicit constexpr InputCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputCollection(const InputCollection& from);
  InputCollection(InputCollection&& from) noexcept
    : InputCollection() {
    *this = ::std::move(from);
  }

  inline InputCollection& operator=(const InputCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputCollection& operator=(InputCollection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputCollection& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputCollection* internal_default_instance() {
    return reinterpret_cast<const InputCollection*>(
               &_InputCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InputCollection& a, InputCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(InputCollection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputCollection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputCollection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputCollection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputCollection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.InputCollection";
  }
  protected:
  explicit InputCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InputCollection_InputType InputType;
  static constexpr InputType UNKNOWN =
    InputCollection_InputType_UNKNOWN;
  static constexpr InputType RECORDIO =
    InputCollection_InputType_RECORDIO;
  static constexpr InputType FOREIGN_RECORDIO =
    InputCollection_InputType_FOREIGN_RECORDIO;
  static constexpr InputType FOREIGN_CSV_TEXT =
    InputCollection_InputType_FOREIGN_CSV_TEXT;
  static constexpr InputType INVALID_UPPER_BOUND =
    InputCollection_InputType_INVALID_UPPER_BOUND;
  static inline bool InputType_IsValid(int value) {
    return InputCollection_InputType_IsValid(value);
  }
  static constexpr InputType InputType_MIN =
    InputCollection_InputType_InputType_MIN;
  static constexpr InputType InputType_MAX =
    InputCollection_InputType_InputType_MAX;
  static constexpr int InputType_ARRAYSIZE =
    InputCollection_InputType_InputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InputType_descriptor() {
    return InputCollection_InputType_descriptor();
  }
  template<typename T>
  static inline const std::string& InputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InputType_Name.");
    return InputCollection_InputType_Name(enum_t_value);
  }
  static inline bool InputType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InputType* value) {
    return InputCollection_InputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSidePacketNameFieldNumber = 2,
    kExternalInputNameFieldNumber = 1002,
    kNameFieldNumber = 1,
    kFileNameFieldNumber = 4,
    kInputTypeFieldNumber = 3,
  };
  // repeated string side_packet_name = 2;
  int side_packet_name_size() const;
  private:
  int _internal_side_packet_name_size() const;
  public:
  void clear_side_packet_name();
  const std::string& side_packet_name(int index) const;
  std::string* mutable_side_packet_name(int index);
  void set_side_packet_name(int index, const std::string& value);
  void set_side_packet_name(int index, std::string&& value);
  void set_side_packet_name(int index, const char* value);
  void set_side_packet_name(int index, const char* value, size_t size);
  std::string* add_side_packet_name();
  void add_side_packet_name(const std::string& value);
  void add_side_packet_name(std::string&& value);
  void add_side_packet_name(const char* value);
  void add_side_packet_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& side_packet_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_side_packet_name();
  private:
  const std::string& _internal_side_packet_name(int index) const;
  std::string* _internal_add_side_packet_name();
  public:

  // repeated string external_input_name = 1002;
  int external_input_name_size() const;
  private:
  int _internal_external_input_name_size() const;
  public:
  void clear_external_input_name();
  const std::string& external_input_name(int index) const;
  std::string* mutable_external_input_name(int index);
  void set_external_input_name(int index, const std::string& value);
  void set_external_input_name(int index, std::string&& value);
  void set_external_input_name(int index, const char* value);
  void set_external_input_name(int index, const char* value, size_t size);
  std::string* add_external_input_name();
  void add_external_input_name(const std::string& value);
  void add_external_input_name(std::string&& value);
  void add_external_input_name(const char* value);
  void add_external_input_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& external_input_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_external_input_name();
  private:
  const std::string& _internal_external_input_name(int index) const;
  std::string* _internal_add_external_input_name();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string file_name = 4;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // .mediapipe.InputCollection.InputType input_type = 3;
  void clear_input_type();
  ::mediapipe::InputCollection_InputType input_type() const;
  void set_input_type(::mediapipe::InputCollection_InputType value);
  private:
  ::mediapipe::InputCollection_InputType _internal_input_type() const;
  void _internal_set_input_type(::mediapipe::InputCollection_InputType value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.InputCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> side_packet_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> external_input_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  int input_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class InputCollectionSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.InputCollectionSet) */ {
 public:
  inline InputCollectionSet() : InputCollectionSet(nullptr) {}
  ~InputCollectionSet() override;
  explicit constexpr InputCollectionSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputCollectionSet(const InputCollectionSet& from);
  InputCollectionSet(InputCollectionSet&& from) noexcept
    : InputCollectionSet() {
    *this = ::std::move(from);
  }

  inline InputCollectionSet& operator=(const InputCollectionSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputCollectionSet& operator=(InputCollectionSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputCollectionSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputCollectionSet* internal_default_instance() {
    return reinterpret_cast<const InputCollectionSet*>(
               &_InputCollectionSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InputCollectionSet& a, InputCollectionSet& b) {
    a.Swap(&b);
  }
  inline void Swap(InputCollectionSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputCollectionSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputCollectionSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputCollectionSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputCollectionSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputCollectionSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputCollectionSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.InputCollectionSet";
  }
  protected:
  explicit InputCollectionSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputCollectionFieldNumber = 1,
  };
  // repeated .mediapipe.InputCollection input_collection = 1;
  int input_collection_size() const;
  private:
  int _internal_input_collection_size() const;
  public:
  void clear_input_collection();
  ::mediapipe::InputCollection* mutable_input_collection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::InputCollection >*
      mutable_input_collection();
  private:
  const ::mediapipe::InputCollection& _internal_input_collection(int index) const;
  ::mediapipe::InputCollection* _internal_add_input_collection();
  public:
  const ::mediapipe::InputCollection& input_collection(int index) const;
  ::mediapipe::InputCollection* add_input_collection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::InputCollection >&
      input_collection() const;

  // @@protoc_insertion_point(class_scope:mediapipe.InputCollectionSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::InputCollection > input_collection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class InputStreamInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.InputStreamInfo) */ {
 public:
  inline InputStreamInfo() : InputStreamInfo(nullptr) {}
  ~InputStreamInfo() override;
  explicit constexpr InputStreamInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputStreamInfo(const InputStreamInfo& from);
  InputStreamInfo(InputStreamInfo&& from) noexcept
    : InputStreamInfo() {
    *this = ::std::move(from);
  }

  inline InputStreamInfo& operator=(const InputStreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputStreamInfo& operator=(InputStreamInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputStreamInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputStreamInfo* internal_default_instance() {
    return reinterpret_cast<const InputStreamInfo*>(
               &_InputStreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InputStreamInfo& a, InputStreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InputStreamInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputStreamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputStreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputStreamInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputStreamInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputStreamInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputStreamInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.InputStreamInfo";
  }
  protected:
  explicit InputStreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagIndexFieldNumber = 1,
    kBackEdgeFieldNumber = 2,
  };
  // string tag_index = 1;
  void clear_tag_index();
  const std::string& tag_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag_index();
  PROTOBUF_NODISCARD std::string* release_tag_index();
  void set_allocated_tag_index(std::string* tag_index);
  private:
  const std::string& _internal_tag_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag_index(const std::string& value);
  std::string* _internal_mutable_tag_index();
  public:

  // bool back_edge = 2;
  void clear_back_edge();
  bool back_edge() const;
  void set_back_edge(bool value);
  private:
  bool _internal_back_edge() const;
  void _internal_set_back_edge(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.InputStreamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_index_;
  bool back_edge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class ProfilerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ProfilerConfig) */ {
 public:
  inline ProfilerConfig() : ProfilerConfig(nullptr) {}
  ~ProfilerConfig() override;
  explicit constexpr ProfilerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfilerConfig(const ProfilerConfig& from);
  ProfilerConfig(ProfilerConfig&& from) noexcept
    : ProfilerConfig() {
    *this = ::std::move(from);
  }

  inline ProfilerConfig& operator=(const ProfilerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerConfig& operator=(ProfilerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfilerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfilerConfig* internal_default_instance() {
    return reinterpret_cast<const ProfilerConfig*>(
               &_ProfilerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProfilerConfig& a, ProfilerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfilerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfilerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfilerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProfilerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ProfilerConfig";
  }
  protected:
  explicit ProfilerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceEventTypesDisabledFieldNumber = 8,
    kTraceLogPathFieldNumber = 9,
    kCalculatorFilterFieldNumber = 18,
    kHistogramIntervalSizeUsecFieldNumber = 1,
    kNumHistogramIntervalsFieldNumber = 2,
    kEnableInputOutputLatencyFieldNumber = 3,
    kEnableProfilerFieldNumber = 4,
    kEnableStreamLatencyFieldNumber = 5,
    kUsePacketTimestampForAddedPacketFieldNumber = 6,
    kTraceLogCountFieldNumber = 10,
    kTraceLogCapacityFieldNumber = 7,
    kTraceLogIntervalUsecFieldNumber = 11,
    kTraceLogMarginUsecFieldNumber = 12,
    kTraceLogIntervalCountFieldNumber = 14,
    kTraceLogDurationEventsFieldNumber = 13,
    kTraceLogDisabledFieldNumber = 15,
    kTraceEnabledFieldNumber = 16,
    kTraceLogInstantEventsFieldNumber = 17,
  };
  // repeated int32 trace_event_types_disabled = 8;
  int trace_event_types_disabled_size() const;
  private:
  int _internal_trace_event_types_disabled_size() const;
  public:
  void clear_trace_event_types_disabled();
  private:
  int32_t _internal_trace_event_types_disabled(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_trace_event_types_disabled() const;
  void _internal_add_trace_event_types_disabled(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_trace_event_types_disabled();
  public:
  int32_t trace_event_types_disabled(int index) const;
  void set_trace_event_types_disabled(int index, int32_t value);
  void add_trace_event_types_disabled(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      trace_event_types_disabled() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_trace_event_types_disabled();

  // string trace_log_path = 9;
  void clear_trace_log_path();
  const std::string& trace_log_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trace_log_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trace_log_path();
  PROTOBUF_NODISCARD std::string* release_trace_log_path();
  void set_allocated_trace_log_path(std::string* trace_log_path);
  private:
  const std::string& _internal_trace_log_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_log_path(const std::string& value);
  std::string* _internal_mutable_trace_log_path();
  public:

  // string calculator_filter = 18;
  void clear_calculator_filter();
  const std::string& calculator_filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calculator_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calculator_filter();
  PROTOBUF_NODISCARD std::string* release_calculator_filter();
  void set_allocated_calculator_filter(std::string* calculator_filter);
  private:
  const std::string& _internal_calculator_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_calculator_filter(const std::string& value);
  std::string* _internal_mutable_calculator_filter();
  public:

  // int64 histogram_interval_size_usec = 1;
  void clear_histogram_interval_size_usec();
  int64_t histogram_interval_size_usec() const;
  void set_histogram_interval_size_usec(int64_t value);
  private:
  int64_t _internal_histogram_interval_size_usec() const;
  void _internal_set_histogram_interval_size_usec(int64_t value);
  public:

  // int64 num_histogram_intervals = 2;
  void clear_num_histogram_intervals();
  int64_t num_histogram_intervals() const;
  void set_num_histogram_intervals(int64_t value);
  private:
  int64_t _internal_num_histogram_intervals() const;
  void _internal_set_num_histogram_intervals(int64_t value);
  public:

  // bool enable_input_output_latency = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_enable_input_output_latency();
  PROTOBUF_DEPRECATED bool enable_input_output_latency() const;
  PROTOBUF_DEPRECATED void set_enable_input_output_latency(bool value);
  private:
  bool _internal_enable_input_output_latency() const;
  void _internal_set_enable_input_output_latency(bool value);
  public:

  // bool enable_profiler = 4;
  void clear_enable_profiler();
  bool enable_profiler() const;
  void set_enable_profiler(bool value);
  private:
  bool _internal_enable_profiler() const;
  void _internal_set_enable_profiler(bool value);
  public:

  // bool enable_stream_latency = 5;
  void clear_enable_stream_latency();
  bool enable_stream_latency() const;
  void set_enable_stream_latency(bool value);
  private:
  bool _internal_enable_stream_latency() const;
  void _internal_set_enable_stream_latency(bool value);
  public:

  // bool use_packet_timestamp_for_added_packet = 6;
  void clear_use_packet_timestamp_for_added_packet();
  bool use_packet_timestamp_for_added_packet() const;
  void set_use_packet_timestamp_for_added_packet(bool value);
  private:
  bool _internal_use_packet_timestamp_for_added_packet() const;
  void _internal_set_use_packet_timestamp_for_added_packet(bool value);
  public:

  // int32 trace_log_count = 10;
  void clear_trace_log_count();
  int32_t trace_log_count() const;
  void set_trace_log_count(int32_t value);
  private:
  int32_t _internal_trace_log_count() const;
  void _internal_set_trace_log_count(int32_t value);
  public:

  // int64 trace_log_capacity = 7;
  void clear_trace_log_capacity();
  int64_t trace_log_capacity() const;
  void set_trace_log_capacity(int64_t value);
  private:
  int64_t _internal_trace_log_capacity() const;
  void _internal_set_trace_log_capacity(int64_t value);
  public:

  // int64 trace_log_interval_usec = 11;
  void clear_trace_log_interval_usec();
  int64_t trace_log_interval_usec() const;
  void set_trace_log_interval_usec(int64_t value);
  private:
  int64_t _internal_trace_log_interval_usec() const;
  void _internal_set_trace_log_interval_usec(int64_t value);
  public:

  // int64 trace_log_margin_usec = 12;
  void clear_trace_log_margin_usec();
  int64_t trace_log_margin_usec() const;
  void set_trace_log_margin_usec(int64_t value);
  private:
  int64_t _internal_trace_log_margin_usec() const;
  void _internal_set_trace_log_margin_usec(int64_t value);
  public:

  // int32 trace_log_interval_count = 14;
  void clear_trace_log_interval_count();
  int32_t trace_log_interval_count() const;
  void set_trace_log_interval_count(int32_t value);
  private:
  int32_t _internal_trace_log_interval_count() const;
  void _internal_set_trace_log_interval_count(int32_t value);
  public:

  // bool trace_log_duration_events = 13 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_trace_log_duration_events();
  PROTOBUF_DEPRECATED bool trace_log_duration_events() const;
  PROTOBUF_DEPRECATED void set_trace_log_duration_events(bool value);
  private:
  bool _internal_trace_log_duration_events() const;
  void _internal_set_trace_log_duration_events(bool value);
  public:

  // bool trace_log_disabled = 15;
  void clear_trace_log_disabled();
  bool trace_log_disabled() const;
  void set_trace_log_disabled(bool value);
  private:
  bool _internal_trace_log_disabled() const;
  void _internal_set_trace_log_disabled(bool value);
  public:

  // bool trace_enabled = 16;
  void clear_trace_enabled();
  bool trace_enabled() const;
  void set_trace_enabled(bool value);
  private:
  bool _internal_trace_enabled() const;
  void _internal_set_trace_enabled(bool value);
  public:

  // bool trace_log_instant_events = 17;
  void clear_trace_log_instant_events();
  bool trace_log_instant_events() const;
  void set_trace_log_instant_events(bool value);
  private:
  bool _internal_trace_log_instant_events() const;
  void _internal_set_trace_log_instant_events(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ProfilerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > trace_event_types_disabled_;
  mutable std::atomic<int> _trace_event_types_disabled_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_log_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calculator_filter_;
  int64_t histogram_interval_size_usec_;
  int64_t num_histogram_intervals_;
  bool enable_input_output_latency_;
  bool enable_profiler_;
  bool enable_stream_latency_;
  bool use_packet_timestamp_for_added_packet_;
  int32_t trace_log_count_;
  int64_t trace_log_capacity_;
  int64_t trace_log_interval_usec_;
  int64_t trace_log_margin_usec_;
  int32_t trace_log_interval_count_;
  bool trace_log_duration_events_;
  bool trace_log_disabled_;
  bool trace_enabled_;
  bool trace_log_instant_events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class CalculatorGraphConfig_Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.CalculatorGraphConfig.Node) */ {
 public:
  inline CalculatorGraphConfig_Node() : CalculatorGraphConfig_Node(nullptr) {}
  ~CalculatorGraphConfig_Node() override;
  explicit constexpr CalculatorGraphConfig_Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculatorGraphConfig_Node(const CalculatorGraphConfig_Node& from);
  CalculatorGraphConfig_Node(CalculatorGraphConfig_Node&& from) noexcept
    : CalculatorGraphConfig_Node() {
    *this = ::std::move(from);
  }

  inline CalculatorGraphConfig_Node& operator=(const CalculatorGraphConfig_Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculatorGraphConfig_Node& operator=(CalculatorGraphConfig_Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculatorGraphConfig_Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculatorGraphConfig_Node* internal_default_instance() {
    return reinterpret_cast<const CalculatorGraphConfig_Node*>(
               &_CalculatorGraphConfig_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CalculatorGraphConfig_Node& a, CalculatorGraphConfig_Node& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculatorGraphConfig_Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculatorGraphConfig_Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculatorGraphConfig_Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculatorGraphConfig_Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculatorGraphConfig_Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CalculatorGraphConfig_Node& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculatorGraphConfig_Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.CalculatorGraphConfig.Node";
  }
  protected:
  explicit CalculatorGraphConfig_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputStreamFieldNumber = 3,
    kOutputStreamFieldNumber = 4,
    kInputSidePacketFieldNumber = 5,
    kOutputSidePacketFieldNumber = 6,
    kNodeOptionsFieldNumber = 8,
    kInputStreamInfoFieldNumber = 13,
    kOptionValueFieldNumber = 17,
    kExternalInputFieldNumber = 1005,
    kNameFieldNumber = 1,
    kCalculatorFieldNumber = 2,
    kExecutorFieldNumber = 14,
    kOptionsFieldNumber = 7,
    kInputStreamHandlerFieldNumber = 11,
    kOutputStreamHandlerFieldNumber = 12,
    kProfilerConfigFieldNumber = 15,
    kSourceLayerFieldNumber = 9,
    kBufferSizeHintFieldNumber = 10,
    kMaxInFlightFieldNumber = 16,
  };
  // repeated string input_stream = 3;
  int input_stream_size() const;
  private:
  int _internal_input_stream_size() const;
  public:
  void clear_input_stream();
  const std::string& input_stream(int index) const;
  std::string* mutable_input_stream(int index);
  void set_input_stream(int index, const std::string& value);
  void set_input_stream(int index, std::string&& value);
  void set_input_stream(int index, const char* value);
  void set_input_stream(int index, const char* value, size_t size);
  std::string* add_input_stream();
  void add_input_stream(const std::string& value);
  void add_input_stream(std::string&& value);
  void add_input_stream(const char* value);
  void add_input_stream(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_stream() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_stream();
  private:
  const std::string& _internal_input_stream(int index) const;
  std::string* _internal_add_input_stream();
  public:

  // repeated string output_stream = 4;
  int output_stream_size() const;
  private:
  int _internal_output_stream_size() const;
  public:
  void clear_output_stream();
  const std::string& output_stream(int index) const;
  std::string* mutable_output_stream(int index);
  void set_output_stream(int index, const std::string& value);
  void set_output_stream(int index, std::string&& value);
  void set_output_stream(int index, const char* value);
  void set_output_stream(int index, const char* value, size_t size);
  std::string* add_output_stream();
  void add_output_stream(const std::string& value);
  void add_output_stream(std::string&& value);
  void add_output_stream(const char* value);
  void add_output_stream(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_stream() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_stream();
  private:
  const std::string& _internal_output_stream(int index) const;
  std::string* _internal_add_output_stream();
  public:

  // repeated string input_side_packet = 5;
  int input_side_packet_size() const;
  private:
  int _internal_input_side_packet_size() const;
  public:
  void clear_input_side_packet();
  const std::string& input_side_packet(int index) const;
  std::string* mutable_input_side_packet(int index);
  void set_input_side_packet(int index, const std::string& value);
  void set_input_side_packet(int index, std::string&& value);
  void set_input_side_packet(int index, const char* value);
  void set_input_side_packet(int index, const char* value, size_t size);
  std::string* add_input_side_packet();
  void add_input_side_packet(const std::string& value);
  void add_input_side_packet(std::string&& value);
  void add_input_side_packet(const char* value);
  void add_input_side_packet(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_side_packet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_side_packet();
  private:
  const std::string& _internal_input_side_packet(int index) const;
  std::string* _internal_add_input_side_packet();
  public:

  // repeated string output_side_packet = 6;
  int output_side_packet_size() const;
  private:
  int _internal_output_side_packet_size() const;
  public:
  void clear_output_side_packet();
  const std::string& output_side_packet(int index) const;
  std::string* mutable_output_side_packet(int index);
  void set_output_side_packet(int index, const std::string& value);
  void set_output_side_packet(int index, std::string&& value);
  void set_output_side_packet(int index, const char* value);
  void set_output_side_packet(int index, const char* value, size_t size);
  std::string* add_output_side_packet();
  void add_output_side_packet(const std::string& value);
  void add_output_side_packet(std::string&& value);
  void add_output_side_packet(const char* value);
  void add_output_side_packet(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_side_packet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_side_packet();
  private:
  const std::string& _internal_output_side_packet(int index) const;
  std::string* _internal_add_output_side_packet();
  public:

  // repeated .google.protobuf.Any node_options = 8;
  int node_options_size() const;
  private:
  int _internal_node_options_size() const;
  public:
  void clear_node_options();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_node_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_node_options();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_node_options(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_node_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& node_options(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_node_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      node_options() const;

  // repeated .mediapipe.InputStreamInfo input_stream_info = 13;
  int input_stream_info_size() const;
  private:
  int _internal_input_stream_info_size() const;
  public:
  void clear_input_stream_info();
  ::mediapipe::InputStreamInfo* mutable_input_stream_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::InputStreamInfo >*
      mutable_input_stream_info();
  private:
  const ::mediapipe::InputStreamInfo& _internal_input_stream_info(int index) const;
  ::mediapipe::InputStreamInfo* _internal_add_input_stream_info();
  public:
  const ::mediapipe::InputStreamInfo& input_stream_info(int index) const;
  ::mediapipe::InputStreamInfo* add_input_stream_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::InputStreamInfo >&
      input_stream_info() const;

  // repeated string option_value = 17;
  int option_value_size() const;
  private:
  int _internal_option_value_size() const;
  public:
  void clear_option_value();
  const std::string& option_value(int index) const;
  std::string* mutable_option_value(int index);
  void set_option_value(int index, const std::string& value);
  void set_option_value(int index, std::string&& value);
  void set_option_value(int index, const char* value);
  void set_option_value(int index, const char* value, size_t size);
  std::string* add_option_value();
  void add_option_value(const std::string& value);
  void add_option_value(std::string&& value);
  void add_option_value(const char* value);
  void add_option_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& option_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_option_value();
  private:
  const std::string& _internal_option_value(int index) const;
  std::string* _internal_add_option_value();
  public:

  // repeated string external_input = 1005;
  int external_input_size() const;
  private:
  int _internal_external_input_size() const;
  public:
  void clear_external_input();
  const std::string& external_input(int index) const;
  std::string* mutable_external_input(int index);
  void set_external_input(int index, const std::string& value);
  void set_external_input(int index, std::string&& value);
  void set_external_input(int index, const char* value);
  void set_external_input(int index, const char* value, size_t size);
  std::string* add_external_input();
  void add_external_input(const std::string& value);
  void add_external_input(std::string&& value);
  void add_external_input(const char* value);
  void add_external_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& external_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_external_input();
  private:
  const std::string& _internal_external_input(int index) const;
  std::string* _internal_add_external_input();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string calculator = 2;
  void clear_calculator();
  const std::string& calculator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calculator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calculator();
  PROTOBUF_NODISCARD std::string* release_calculator();
  void set_allocated_calculator(std::string* calculator);
  private:
  const std::string& _internal_calculator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_calculator(const std::string& value);
  std::string* _internal_mutable_calculator();
  public:

  // string executor = 14;
  void clear_executor();
  const std::string& executor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_executor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_executor();
  PROTOBUF_NODISCARD std::string* release_executor();
  void set_allocated_executor(std::string* executor);
  private:
  const std::string& _internal_executor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executor(const std::string& value);
  std::string* _internal_mutable_executor();
  public:

  // .mediapipe.CalculatorOptions options = 7;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::mediapipe::CalculatorOptions& options() const;
  PROTOBUF_NODISCARD ::mediapipe::CalculatorOptions* release_options();
  ::mediapipe::CalculatorOptions* mutable_options();
  void set_allocated_options(::mediapipe::CalculatorOptions* options);
  private:
  const ::mediapipe::CalculatorOptions& _internal_options() const;
  ::mediapipe::CalculatorOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::mediapipe::CalculatorOptions* options);
  ::mediapipe::CalculatorOptions* unsafe_arena_release_options();

  // .mediapipe.InputStreamHandlerConfig input_stream_handler = 11;
  bool has_input_stream_handler() const;
  private:
  bool _internal_has_input_stream_handler() const;
  public:
  void clear_input_stream_handler();
  const ::mediapipe::InputStreamHandlerConfig& input_stream_handler() const;
  PROTOBUF_NODISCARD ::mediapipe::InputStreamHandlerConfig* release_input_stream_handler();
  ::mediapipe::InputStreamHandlerConfig* mutable_input_stream_handler();
  void set_allocated_input_stream_handler(::mediapipe::InputStreamHandlerConfig* input_stream_handler);
  private:
  const ::mediapipe::InputStreamHandlerConfig& _internal_input_stream_handler() const;
  ::mediapipe::InputStreamHandlerConfig* _internal_mutable_input_stream_handler();
  public:
  void unsafe_arena_set_allocated_input_stream_handler(
      ::mediapipe::InputStreamHandlerConfig* input_stream_handler);
  ::mediapipe::InputStreamHandlerConfig* unsafe_arena_release_input_stream_handler();

  // .mediapipe.OutputStreamHandlerConfig output_stream_handler = 12;
  bool has_output_stream_handler() const;
  private:
  bool _internal_has_output_stream_handler() const;
  public:
  void clear_output_stream_handler();
  const ::mediapipe::OutputStreamHandlerConfig& output_stream_handler() const;
  PROTOBUF_NODISCARD ::mediapipe::OutputStreamHandlerConfig* release_output_stream_handler();
  ::mediapipe::OutputStreamHandlerConfig* mutable_output_stream_handler();
  void set_allocated_output_stream_handler(::mediapipe::OutputStreamHandlerConfig* output_stream_handler);
  private:
  const ::mediapipe::OutputStreamHandlerConfig& _internal_output_stream_handler() const;
  ::mediapipe::OutputStreamHandlerConfig* _internal_mutable_output_stream_handler();
  public:
  void unsafe_arena_set_allocated_output_stream_handler(
      ::mediapipe::OutputStreamHandlerConfig* output_stream_handler);
  ::mediapipe::OutputStreamHandlerConfig* unsafe_arena_release_output_stream_handler();

  // .mediapipe.ProfilerConfig profiler_config = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_profiler_config() const;
  private:
  bool _internal_has_profiler_config() const;
  public:
  PROTOBUF_DEPRECATED void clear_profiler_config();
  PROTOBUF_DEPRECATED const ::mediapipe::ProfilerConfig& profiler_config() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::mediapipe::ProfilerConfig* release_profiler_config();
  PROTOBUF_DEPRECATED ::mediapipe::ProfilerConfig* mutable_profiler_config();
  PROTOBUF_DEPRECATED void set_allocated_profiler_config(::mediapipe::ProfilerConfig* profiler_config);
  private:
  const ::mediapipe::ProfilerConfig& _internal_profiler_config() const;
  ::mediapipe::ProfilerConfig* _internal_mutable_profiler_config();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_profiler_config(
      ::mediapipe::ProfilerConfig* profiler_config);
  PROTOBUF_DEPRECATED ::mediapipe::ProfilerConfig* unsafe_arena_release_profiler_config();

  // int32 source_layer = 9;
  void clear_source_layer();
  int32_t source_layer() const;
  void set_source_layer(int32_t value);
  private:
  int32_t _internal_source_layer() const;
  void _internal_set_source_layer(int32_t value);
  public:

  // int32 buffer_size_hint = 10;
  void clear_buffer_size_hint();
  int32_t buffer_size_hint() const;
  void set_buffer_size_hint(int32_t value);
  private:
  int32_t _internal_buffer_size_hint() const;
  void _internal_set_buffer_size_hint(int32_t value);
  public:

  // int32 max_in_flight = 16;
  void clear_max_in_flight();
  int32_t max_in_flight() const;
  void set_max_in_flight(int32_t value);
  private:
  int32_t _internal_max_in_flight() const;
  void _internal_set_max_in_flight(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.CalculatorGraphConfig.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_stream_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_stream_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_side_packet_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_side_packet_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > node_options_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::InputStreamInfo > input_stream_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> option_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> external_input_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calculator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executor_;
  ::mediapipe::CalculatorOptions* options_;
  ::mediapipe::InputStreamHandlerConfig* input_stream_handler_;
  ::mediapipe::OutputStreamHandlerConfig* output_stream_handler_;
  ::mediapipe::ProfilerConfig* profiler_config_;
  int32_t source_layer_;
  int32_t buffer_size_hint_;
  int32_t max_in_flight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class CalculatorGraphConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.CalculatorGraphConfig) */ {
 public:
  inline CalculatorGraphConfig() : CalculatorGraphConfig(nullptr) {}
  ~CalculatorGraphConfig() override;
  explicit constexpr CalculatorGraphConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculatorGraphConfig(const CalculatorGraphConfig& from);
  CalculatorGraphConfig(CalculatorGraphConfig&& from) noexcept
    : CalculatorGraphConfig() {
    *this = ::std::move(from);
  }

  inline CalculatorGraphConfig& operator=(const CalculatorGraphConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculatorGraphConfig& operator=(CalculatorGraphConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculatorGraphConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculatorGraphConfig* internal_default_instance() {
    return reinterpret_cast<const CalculatorGraphConfig*>(
               &_CalculatorGraphConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CalculatorGraphConfig& a, CalculatorGraphConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculatorGraphConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculatorGraphConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculatorGraphConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculatorGraphConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculatorGraphConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CalculatorGraphConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculatorGraphConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.CalculatorGraphConfig";
  }
  protected:
  explicit CalculatorGraphConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CalculatorGraphConfig_Node Node;

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kPacketFactoryFieldNumber = 6,
    kPacketGeneratorFieldNumber = 7,
    kStatusHandlerFieldNumber = 9,
    kInputStreamFieldNumber = 10,
    kExecutorFieldNumber = 14,
    kOutputStreamFieldNumber = 15,
    kInputSidePacketFieldNumber = 16,
    kOutputSidePacketFieldNumber = 17,
    kGraphOptionsFieldNumber = 1002,
    kPackageFieldNumber = 19,
    kTypeFieldNumber = 20,
    kInputStreamHandlerFieldNumber = 12,
    kOutputStreamHandlerFieldNumber = 13,
    kProfilerConfigFieldNumber = 18,
    kOptionsFieldNumber = 1001,
    kNumThreadsFieldNumber = 8,
    kMaxQueueSizeFieldNumber = 11,
    kReportDeadlockFieldNumber = 21,
  };
  // repeated .mediapipe.CalculatorGraphConfig.Node node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::mediapipe::CalculatorGraphConfig_Node* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::CalculatorGraphConfig_Node >*
      mutable_node();
  private:
  const ::mediapipe::CalculatorGraphConfig_Node& _internal_node(int index) const;
  ::mediapipe::CalculatorGraphConfig_Node* _internal_add_node();
  public:
  const ::mediapipe::CalculatorGraphConfig_Node& node(int index) const;
  ::mediapipe::CalculatorGraphConfig_Node* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::CalculatorGraphConfig_Node >&
      node() const;

  // repeated .mediapipe.PacketFactoryConfig packet_factory = 6;
  int packet_factory_size() const;
  private:
  int _internal_packet_factory_size() const;
  public:
  void clear_packet_factory();
  ::mediapipe::PacketFactoryConfig* mutable_packet_factory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketFactoryConfig >*
      mutable_packet_factory();
  private:
  const ::mediapipe::PacketFactoryConfig& _internal_packet_factory(int index) const;
  ::mediapipe::PacketFactoryConfig* _internal_add_packet_factory();
  public:
  const ::mediapipe::PacketFactoryConfig& packet_factory(int index) const;
  ::mediapipe::PacketFactoryConfig* add_packet_factory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketFactoryConfig >&
      packet_factory() const;

  // repeated .mediapipe.PacketGeneratorConfig packet_generator = 7;
  int packet_generator_size() const;
  private:
  int _internal_packet_generator_size() const;
  public:
  void clear_packet_generator();
  ::mediapipe::PacketGeneratorConfig* mutable_packet_generator(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketGeneratorConfig >*
      mutable_packet_generator();
  private:
  const ::mediapipe::PacketGeneratorConfig& _internal_packet_generator(int index) const;
  ::mediapipe::PacketGeneratorConfig* _internal_add_packet_generator();
  public:
  const ::mediapipe::PacketGeneratorConfig& packet_generator(int index) const;
  ::mediapipe::PacketGeneratorConfig* add_packet_generator();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketGeneratorConfig >&
      packet_generator() const;

  // repeated .mediapipe.StatusHandlerConfig status_handler = 9;
  int status_handler_size() const;
  private:
  int _internal_status_handler_size() const;
  public:
  void clear_status_handler();
  ::mediapipe::StatusHandlerConfig* mutable_status_handler(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::StatusHandlerConfig >*
      mutable_status_handler();
  private:
  const ::mediapipe::StatusHandlerConfig& _internal_status_handler(int index) const;
  ::mediapipe::StatusHandlerConfig* _internal_add_status_handler();
  public:
  const ::mediapipe::StatusHandlerConfig& status_handler(int index) const;
  ::mediapipe::StatusHandlerConfig* add_status_handler();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::StatusHandlerConfig >&
      status_handler() const;

  // repeated string input_stream = 10;
  int input_stream_size() const;
  private:
  int _internal_input_stream_size() const;
  public:
  void clear_input_stream();
  const std::string& input_stream(int index) const;
  std::string* mutable_input_stream(int index);
  void set_input_stream(int index, const std::string& value);
  void set_input_stream(int index, std::string&& value);
  void set_input_stream(int index, const char* value);
  void set_input_stream(int index, const char* value, size_t size);
  std::string* add_input_stream();
  void add_input_stream(const std::string& value);
  void add_input_stream(std::string&& value);
  void add_input_stream(const char* value);
  void add_input_stream(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_stream() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_stream();
  private:
  const std::string& _internal_input_stream(int index) const;
  std::string* _internal_add_input_stream();
  public:

  // repeated .mediapipe.ExecutorConfig executor = 14;
  int executor_size() const;
  private:
  int _internal_executor_size() const;
  public:
  void clear_executor();
  ::mediapipe::ExecutorConfig* mutable_executor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ExecutorConfig >*
      mutable_executor();
  private:
  const ::mediapipe::ExecutorConfig& _internal_executor(int index) const;
  ::mediapipe::ExecutorConfig* _internal_add_executor();
  public:
  const ::mediapipe::ExecutorConfig& executor(int index) const;
  ::mediapipe::ExecutorConfig* add_executor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ExecutorConfig >&
      executor() const;

  // repeated string output_stream = 15;
  int output_stream_size() const;
  private:
  int _internal_output_stream_size() const;
  public:
  void clear_output_stream();
  const std::string& output_stream(int index) const;
  std::string* mutable_output_stream(int index);
  void set_output_stream(int index, const std::string& value);
  void set_output_stream(int index, std::string&& value);
  void set_output_stream(int index, const char* value);
  void set_output_stream(int index, const char* value, size_t size);
  std::string* add_output_stream();
  void add_output_stream(const std::string& value);
  void add_output_stream(std::string&& value);
  void add_output_stream(const char* value);
  void add_output_stream(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_stream() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_stream();
  private:
  const std::string& _internal_output_stream(int index) const;
  std::string* _internal_add_output_stream();
  public:

  // repeated string input_side_packet = 16;
  int input_side_packet_size() const;
  private:
  int _internal_input_side_packet_size() const;
  public:
  void clear_input_side_packet();
  const std::string& input_side_packet(int index) const;
  std::string* mutable_input_side_packet(int index);
  void set_input_side_packet(int index, const std::string& value);
  void set_input_side_packet(int index, std::string&& value);
  void set_input_side_packet(int index, const char* value);
  void set_input_side_packet(int index, const char* value, size_t size);
  std::string* add_input_side_packet();
  void add_input_side_packet(const std::string& value);
  void add_input_side_packet(std::string&& value);
  void add_input_side_packet(const char* value);
  void add_input_side_packet(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_side_packet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_side_packet();
  private:
  const std::string& _internal_input_side_packet(int index) const;
  std::string* _internal_add_input_side_packet();
  public:

  // repeated string output_side_packet = 17;
  int output_side_packet_size() const;
  private:
  int _internal_output_side_packet_size() const;
  public:
  void clear_output_side_packet();
  const std::string& output_side_packet(int index) const;
  std::string* mutable_output_side_packet(int index);
  void set_output_side_packet(int index, const std::string& value);
  void set_output_side_packet(int index, std::string&& value);
  void set_output_side_packet(int index, const char* value);
  void set_output_side_packet(int index, const char* value, size_t size);
  std::string* add_output_side_packet();
  void add_output_side_packet(const std::string& value);
  void add_output_side_packet(std::string&& value);
  void add_output_side_packet(const char* value);
  void add_output_side_packet(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_side_packet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_side_packet();
  private:
  const std::string& _internal_output_side_packet(int index) const;
  std::string* _internal_add_output_side_packet();
  public:

  // repeated .google.protobuf.Any graph_options = 1002;
  int graph_options_size() const;
  private:
  int _internal_graph_options_size() const;
  public:
  void clear_graph_options();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_graph_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_graph_options();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_graph_options(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_graph_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& graph_options(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_graph_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      graph_options() const;

  // string package = 19;
  void clear_package();
  const std::string& package() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_package(ArgT0&& arg0, ArgT... args);
  std::string* mutable_package();
  PROTOBUF_NODISCARD std::string* release_package();
  void set_allocated_package(std::string* package);
  private:
  const std::string& _internal_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package(const std::string& value);
  std::string* _internal_mutable_package();
  public:

  // string type = 20;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .mediapipe.InputStreamHandlerConfig input_stream_handler = 12;
  bool has_input_stream_handler() const;
  private:
  bool _internal_has_input_stream_handler() const;
  public:
  void clear_input_stream_handler();
  const ::mediapipe::InputStreamHandlerConfig& input_stream_handler() const;
  PROTOBUF_NODISCARD ::mediapipe::InputStreamHandlerConfig* release_input_stream_handler();
  ::mediapipe::InputStreamHandlerConfig* mutable_input_stream_handler();
  void set_allocated_input_stream_handler(::mediapipe::InputStreamHandlerConfig* input_stream_handler);
  private:
  const ::mediapipe::InputStreamHandlerConfig& _internal_input_stream_handler() const;
  ::mediapipe::InputStreamHandlerConfig* _internal_mutable_input_stream_handler();
  public:
  void unsafe_arena_set_allocated_input_stream_handler(
      ::mediapipe::InputStreamHandlerConfig* input_stream_handler);
  ::mediapipe::InputStreamHandlerConfig* unsafe_arena_release_input_stream_handler();

  // .mediapipe.OutputStreamHandlerConfig output_stream_handler = 13;
  bool has_output_stream_handler() const;
  private:
  bool _internal_has_output_stream_handler() const;
  public:
  void clear_output_stream_handler();
  const ::mediapipe::OutputStreamHandlerConfig& output_stream_handler() const;
  PROTOBUF_NODISCARD ::mediapipe::OutputStreamHandlerConfig* release_output_stream_handler();
  ::mediapipe::OutputStreamHandlerConfig* mutable_output_stream_handler();
  void set_allocated_output_stream_handler(::mediapipe::OutputStreamHandlerConfig* output_stream_handler);
  private:
  const ::mediapipe::OutputStreamHandlerConfig& _internal_output_stream_handler() const;
  ::mediapipe::OutputStreamHandlerConfig* _internal_mutable_output_stream_handler();
  public:
  void unsafe_arena_set_allocated_output_stream_handler(
      ::mediapipe::OutputStreamHandlerConfig* output_stream_handler);
  ::mediapipe::OutputStreamHandlerConfig* unsafe_arena_release_output_stream_handler();

  // .mediapipe.ProfilerConfig profiler_config = 18;
  bool has_profiler_config() const;
  private:
  bool _internal_has_profiler_config() const;
  public:
  void clear_profiler_config();
  const ::mediapipe::ProfilerConfig& profiler_config() const;
  PROTOBUF_NODISCARD ::mediapipe::ProfilerConfig* release_profiler_config();
  ::mediapipe::ProfilerConfig* mutable_profiler_config();
  void set_allocated_profiler_config(::mediapipe::ProfilerConfig* profiler_config);
  private:
  const ::mediapipe::ProfilerConfig& _internal_profiler_config() const;
  ::mediapipe::ProfilerConfig* _internal_mutable_profiler_config();
  public:
  void unsafe_arena_set_allocated_profiler_config(
      ::mediapipe::ProfilerConfig* profiler_config);
  ::mediapipe::ProfilerConfig* unsafe_arena_release_profiler_config();

  // .mediapipe.MediaPipeOptions options = 1001;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::mediapipe::MediaPipeOptions& options() const;
  PROTOBUF_NODISCARD ::mediapipe::MediaPipeOptions* release_options();
  ::mediapipe::MediaPipeOptions* mutable_options();
  void set_allocated_options(::mediapipe::MediaPipeOptions* options);
  private:
  const ::mediapipe::MediaPipeOptions& _internal_options() const;
  ::mediapipe::MediaPipeOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::mediapipe::MediaPipeOptions* options);
  ::mediapipe::MediaPipeOptions* unsafe_arena_release_options();

  // int32 num_threads = 8;
  void clear_num_threads();
  int32_t num_threads() const;
  void set_num_threads(int32_t value);
  private:
  int32_t _internal_num_threads() const;
  void _internal_set_num_threads(int32_t value);
  public:

  // int32 max_queue_size = 11;
  void clear_max_queue_size();
  int32_t max_queue_size() const;
  void set_max_queue_size(int32_t value);
  private:
  int32_t _internal_max_queue_size() const;
  void _internal_set_max_queue_size(int32_t value);
  public:

  // bool report_deadlock = 21;
  void clear_report_deadlock();
  bool report_deadlock() const;
  void set_report_deadlock(bool value);
  private:
  bool _internal_report_deadlock() const;
  void _internal_set_report_deadlock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.CalculatorGraphConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::CalculatorGraphConfig_Node > node_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketFactoryConfig > packet_factory_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketGeneratorConfig > packet_generator_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::StatusHandlerConfig > status_handler_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_stream_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ExecutorConfig > executor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_stream_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_side_packet_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_side_packet_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > graph_options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::mediapipe::InputStreamHandlerConfig* input_stream_handler_;
  ::mediapipe::OutputStreamHandlerConfig* output_stream_handler_;
  ::mediapipe::ProfilerConfig* profiler_config_;
  ::mediapipe::MediaPipeOptions* options_;
  int32_t num_threads_;
  int32_t max_queue_size_;
  bool report_deadlock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecutorConfig

// string name = 1;
inline void ExecutorConfig::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ExecutorConfig::name() const {
  // @@protoc_insertion_point(field_get:mediapipe.ExecutorConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutorConfig::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.ExecutorConfig.name)
}
inline std::string* ExecutorConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mediapipe.ExecutorConfig.name)
  return _s;
}
inline const std::string& ExecutorConfig::_internal_name() const {
  return name_.Get();
}
inline void ExecutorConfig::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutorConfig::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutorConfig::release_name() {
  // @@protoc_insertion_point(field_release:mediapipe.ExecutorConfig.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutorConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ExecutorConfig.name)
}

// string type = 2;
inline void ExecutorConfig::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ExecutorConfig::type() const {
  // @@protoc_insertion_point(field_get:mediapipe.ExecutorConfig.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutorConfig::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.ExecutorConfig.type)
}
inline std::string* ExecutorConfig::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:mediapipe.ExecutorConfig.type)
  return _s;
}
inline const std::string& ExecutorConfig::_internal_type() const {
  return type_.Get();
}
inline void ExecutorConfig::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutorConfig::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutorConfig::release_type() {
  // @@protoc_insertion_point(field_release:mediapipe.ExecutorConfig.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutorConfig::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ExecutorConfig.type)
}

// .mediapipe.MediaPipeOptions options = 3;
inline bool ExecutorConfig::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool ExecutorConfig::has_options() const {
  return _internal_has_options();
}
inline const ::mediapipe::MediaPipeOptions& ExecutorConfig::_internal_options() const {
  const ::mediapipe::MediaPipeOptions* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MediaPipeOptions&>(
      ::mediapipe::_MediaPipeOptions_default_instance_);
}
inline const ::mediapipe::MediaPipeOptions& ExecutorConfig::options() const {
  // @@protoc_insertion_point(field_get:mediapipe.ExecutorConfig.options)
  return _internal_options();
}
inline void ExecutorConfig::unsafe_arena_set_allocated_options(
    ::mediapipe::MediaPipeOptions* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ExecutorConfig.options)
}
inline ::mediapipe::MediaPipeOptions* ExecutorConfig::release_options() {
  
  ::mediapipe::MediaPipeOptions* temp = options_;
  options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::MediaPipeOptions* ExecutorConfig::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:mediapipe.ExecutorConfig.options)
  
  ::mediapipe::MediaPipeOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::mediapipe::MediaPipeOptions* ExecutorConfig::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MediaPipeOptions>(GetArenaForAllocation());
    options_ = p;
  }
  return options_;
}
inline ::mediapipe::MediaPipeOptions* ExecutorConfig::mutable_options() {
  ::mediapipe::MediaPipeOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:mediapipe.ExecutorConfig.options)
  return _msg;
}
inline void ExecutorConfig::set_allocated_options(::mediapipe::MediaPipeOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options));
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ExecutorConfig.options)
}

// -------------------------------------------------------------------

// InputCollection

// string name = 1;
inline void InputCollection::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InputCollection::name() const {
  // @@protoc_insertion_point(field_get:mediapipe.InputCollection.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InputCollection::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.InputCollection.name)
}
inline std::string* InputCollection::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mediapipe.InputCollection.name)
  return _s;
}
inline const std::string& InputCollection::_internal_name() const {
  return name_.Get();
}
inline void InputCollection::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InputCollection::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InputCollection::release_name() {
  // @@protoc_insertion_point(field_release:mediapipe.InputCollection.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InputCollection::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.InputCollection.name)
}

// repeated string side_packet_name = 2;
inline int InputCollection::_internal_side_packet_name_size() const {
  return side_packet_name_.size();
}
inline int InputCollection::side_packet_name_size() const {
  return _internal_side_packet_name_size();
}
inline void InputCollection::clear_side_packet_name() {
  side_packet_name_.Clear();
}
inline std::string* InputCollection::add_side_packet_name() {
  std::string* _s = _internal_add_side_packet_name();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.InputCollection.side_packet_name)
  return _s;
}
inline const std::string& InputCollection::_internal_side_packet_name(int index) const {
  return side_packet_name_.Get(index);
}
inline const std::string& InputCollection::side_packet_name(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.InputCollection.side_packet_name)
  return _internal_side_packet_name(index);
}
inline std::string* InputCollection::mutable_side_packet_name(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.InputCollection.side_packet_name)
  return side_packet_name_.Mutable(index);
}
inline void InputCollection::set_side_packet_name(int index, const std::string& value) {
  side_packet_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.InputCollection.side_packet_name)
}
inline void InputCollection::set_side_packet_name(int index, std::string&& value) {
  side_packet_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.InputCollection.side_packet_name)
}
inline void InputCollection::set_side_packet_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  side_packet_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.InputCollection.side_packet_name)
}
inline void InputCollection::set_side_packet_name(int index, const char* value, size_t size) {
  side_packet_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.InputCollection.side_packet_name)
}
inline std::string* InputCollection::_internal_add_side_packet_name() {
  return side_packet_name_.Add();
}
inline void InputCollection::add_side_packet_name(const std::string& value) {
  side_packet_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.InputCollection.side_packet_name)
}
inline void InputCollection::add_side_packet_name(std::string&& value) {
  side_packet_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.InputCollection.side_packet_name)
}
inline void InputCollection::add_side_packet_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  side_packet_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.InputCollection.side_packet_name)
}
inline void InputCollection::add_side_packet_name(const char* value, size_t size) {
  side_packet_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.InputCollection.side_packet_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InputCollection::side_packet_name() const {
  // @@protoc_insertion_point(field_list:mediapipe.InputCollection.side_packet_name)
  return side_packet_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InputCollection::mutable_side_packet_name() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.InputCollection.side_packet_name)
  return &side_packet_name_;
}

// repeated string external_input_name = 1002;
inline int InputCollection::_internal_external_input_name_size() const {
  return external_input_name_.size();
}
inline int InputCollection::external_input_name_size() const {
  return _internal_external_input_name_size();
}
inline void InputCollection::clear_external_input_name() {
  external_input_name_.Clear();
}
inline std::string* InputCollection::add_external_input_name() {
  std::string* _s = _internal_add_external_input_name();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.InputCollection.external_input_name)
  return _s;
}
inline const std::string& InputCollection::_internal_external_input_name(int index) const {
  return external_input_name_.Get(index);
}
inline const std::string& InputCollection::external_input_name(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.InputCollection.external_input_name)
  return _internal_external_input_name(index);
}
inline std::string* InputCollection::mutable_external_input_name(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.InputCollection.external_input_name)
  return external_input_name_.Mutable(index);
}
inline void InputCollection::set_external_input_name(int index, const std::string& value) {
  external_input_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.InputCollection.external_input_name)
}
inline void InputCollection::set_external_input_name(int index, std::string&& value) {
  external_input_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.InputCollection.external_input_name)
}
inline void InputCollection::set_external_input_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_input_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.InputCollection.external_input_name)
}
inline void InputCollection::set_external_input_name(int index, const char* value, size_t size) {
  external_input_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.InputCollection.external_input_name)
}
inline std::string* InputCollection::_internal_add_external_input_name() {
  return external_input_name_.Add();
}
inline void InputCollection::add_external_input_name(const std::string& value) {
  external_input_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.InputCollection.external_input_name)
}
inline void InputCollection::add_external_input_name(std::string&& value) {
  external_input_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.InputCollection.external_input_name)
}
inline void InputCollection::add_external_input_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_input_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.InputCollection.external_input_name)
}
inline void InputCollection::add_external_input_name(const char* value, size_t size) {
  external_input_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.InputCollection.external_input_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InputCollection::external_input_name() const {
  // @@protoc_insertion_point(field_list:mediapipe.InputCollection.external_input_name)
  return external_input_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InputCollection::mutable_external_input_name() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.InputCollection.external_input_name)
  return &external_input_name_;
}

// .mediapipe.InputCollection.InputType input_type = 3;
inline void InputCollection::clear_input_type() {
  input_type_ = 0;
}
inline ::mediapipe::InputCollection_InputType InputCollection::_internal_input_type() const {
  return static_cast< ::mediapipe::InputCollection_InputType >(input_type_);
}
inline ::mediapipe::InputCollection_InputType InputCollection::input_type() const {
  // @@protoc_insertion_point(field_get:mediapipe.InputCollection.input_type)
  return _internal_input_type();
}
inline void InputCollection::_internal_set_input_type(::mediapipe::InputCollection_InputType value) {
  
  input_type_ = value;
}
inline void InputCollection::set_input_type(::mediapipe::InputCollection_InputType value) {
  _internal_set_input_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.InputCollection.input_type)
}

// string file_name = 4;
inline void InputCollection::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& InputCollection::file_name() const {
  // @@protoc_insertion_point(field_get:mediapipe.InputCollection.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InputCollection::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.InputCollection.file_name)
}
inline std::string* InputCollection::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:mediapipe.InputCollection.file_name)
  return _s;
}
inline const std::string& InputCollection::_internal_file_name() const {
  return file_name_.Get();
}
inline void InputCollection::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InputCollection::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InputCollection::release_file_name() {
  // @@protoc_insertion_point(field_release:mediapipe.InputCollection.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InputCollection::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.InputCollection.file_name)
}

// -------------------------------------------------------------------

// InputCollectionSet

// repeated .mediapipe.InputCollection input_collection = 1;
inline int InputCollectionSet::_internal_input_collection_size() const {
  return input_collection_.size();
}
inline int InputCollectionSet::input_collection_size() const {
  return _internal_input_collection_size();
}
inline void InputCollectionSet::clear_input_collection() {
  input_collection_.Clear();
}
inline ::mediapipe::InputCollection* InputCollectionSet::mutable_input_collection(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.InputCollectionSet.input_collection)
  return input_collection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::InputCollection >*
InputCollectionSet::mutable_input_collection() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.InputCollectionSet.input_collection)
  return &input_collection_;
}
inline const ::mediapipe::InputCollection& InputCollectionSet::_internal_input_collection(int index) const {
  return input_collection_.Get(index);
}
inline const ::mediapipe::InputCollection& InputCollectionSet::input_collection(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.InputCollectionSet.input_collection)
  return _internal_input_collection(index);
}
inline ::mediapipe::InputCollection* InputCollectionSet::_internal_add_input_collection() {
  return input_collection_.Add();
}
inline ::mediapipe::InputCollection* InputCollectionSet::add_input_collection() {
  ::mediapipe::InputCollection* _add = _internal_add_input_collection();
  // @@protoc_insertion_point(field_add:mediapipe.InputCollectionSet.input_collection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::InputCollection >&
InputCollectionSet::input_collection() const {
  // @@protoc_insertion_point(field_list:mediapipe.InputCollectionSet.input_collection)
  return input_collection_;
}

// -------------------------------------------------------------------

// InputStreamInfo

// string tag_index = 1;
inline void InputStreamInfo::clear_tag_index() {
  tag_index_.ClearToEmpty();
}
inline const std::string& InputStreamInfo::tag_index() const {
  // @@protoc_insertion_point(field_get:mediapipe.InputStreamInfo.tag_index)
  return _internal_tag_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InputStreamInfo::set_tag_index(ArgT0&& arg0, ArgT... args) {
 
 tag_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.InputStreamInfo.tag_index)
}
inline std::string* InputStreamInfo::mutable_tag_index() {
  std::string* _s = _internal_mutable_tag_index();
  // @@protoc_insertion_point(field_mutable:mediapipe.InputStreamInfo.tag_index)
  return _s;
}
inline const std::string& InputStreamInfo::_internal_tag_index() const {
  return tag_index_.Get();
}
inline void InputStreamInfo::_internal_set_tag_index(const std::string& value) {
  
  tag_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InputStreamInfo::_internal_mutable_tag_index() {
  
  return tag_index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InputStreamInfo::release_tag_index() {
  // @@protoc_insertion_point(field_release:mediapipe.InputStreamInfo.tag_index)
  return tag_index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InputStreamInfo::set_allocated_tag_index(std::string* tag_index) {
  if (tag_index != nullptr) {
    
  } else {
    
  }
  tag_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag_index,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_index_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tag_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.InputStreamInfo.tag_index)
}

// bool back_edge = 2;
inline void InputStreamInfo::clear_back_edge() {
  back_edge_ = false;
}
inline bool InputStreamInfo::_internal_back_edge() const {
  return back_edge_;
}
inline bool InputStreamInfo::back_edge() const {
  // @@protoc_insertion_point(field_get:mediapipe.InputStreamInfo.back_edge)
  return _internal_back_edge();
}
inline void InputStreamInfo::_internal_set_back_edge(bool value) {
  
  back_edge_ = value;
}
inline void InputStreamInfo::set_back_edge(bool value) {
  _internal_set_back_edge(value);
  // @@protoc_insertion_point(field_set:mediapipe.InputStreamInfo.back_edge)
}

// -------------------------------------------------------------------

// ProfilerConfig

// int64 histogram_interval_size_usec = 1;
inline void ProfilerConfig::clear_histogram_interval_size_usec() {
  histogram_interval_size_usec_ = int64_t{0};
}
inline int64_t ProfilerConfig::_internal_histogram_interval_size_usec() const {
  return histogram_interval_size_usec_;
}
inline int64_t ProfilerConfig::histogram_interval_size_usec() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.histogram_interval_size_usec)
  return _internal_histogram_interval_size_usec();
}
inline void ProfilerConfig::_internal_set_histogram_interval_size_usec(int64_t value) {
  
  histogram_interval_size_usec_ = value;
}
inline void ProfilerConfig::set_histogram_interval_size_usec(int64_t value) {
  _internal_set_histogram_interval_size_usec(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.histogram_interval_size_usec)
}

// int64 num_histogram_intervals = 2;
inline void ProfilerConfig::clear_num_histogram_intervals() {
  num_histogram_intervals_ = int64_t{0};
}
inline int64_t ProfilerConfig::_internal_num_histogram_intervals() const {
  return num_histogram_intervals_;
}
inline int64_t ProfilerConfig::num_histogram_intervals() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.num_histogram_intervals)
  return _internal_num_histogram_intervals();
}
inline void ProfilerConfig::_internal_set_num_histogram_intervals(int64_t value) {
  
  num_histogram_intervals_ = value;
}
inline void ProfilerConfig::set_num_histogram_intervals(int64_t value) {
  _internal_set_num_histogram_intervals(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.num_histogram_intervals)
}

// bool enable_input_output_latency = 3 [deprecated = true];
inline void ProfilerConfig::clear_enable_input_output_latency() {
  enable_input_output_latency_ = false;
}
inline bool ProfilerConfig::_internal_enable_input_output_latency() const {
  return enable_input_output_latency_;
}
inline bool ProfilerConfig::enable_input_output_latency() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.enable_input_output_latency)
  return _internal_enable_input_output_latency();
}
inline void ProfilerConfig::_internal_set_enable_input_output_latency(bool value) {
  
  enable_input_output_latency_ = value;
}
inline void ProfilerConfig::set_enable_input_output_latency(bool value) {
  _internal_set_enable_input_output_latency(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.enable_input_output_latency)
}

// bool enable_profiler = 4;
inline void ProfilerConfig::clear_enable_profiler() {
  enable_profiler_ = false;
}
inline bool ProfilerConfig::_internal_enable_profiler() const {
  return enable_profiler_;
}
inline bool ProfilerConfig::enable_profiler() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.enable_profiler)
  return _internal_enable_profiler();
}
inline void ProfilerConfig::_internal_set_enable_profiler(bool value) {
  
  enable_profiler_ = value;
}
inline void ProfilerConfig::set_enable_profiler(bool value) {
  _internal_set_enable_profiler(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.enable_profiler)
}

// bool enable_stream_latency = 5;
inline void ProfilerConfig::clear_enable_stream_latency() {
  enable_stream_latency_ = false;
}
inline bool ProfilerConfig::_internal_enable_stream_latency() const {
  return enable_stream_latency_;
}
inline bool ProfilerConfig::enable_stream_latency() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.enable_stream_latency)
  return _internal_enable_stream_latency();
}
inline void ProfilerConfig::_internal_set_enable_stream_latency(bool value) {
  
  enable_stream_latency_ = value;
}
inline void ProfilerConfig::set_enable_stream_latency(bool value) {
  _internal_set_enable_stream_latency(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.enable_stream_latency)
}

// bool use_packet_timestamp_for_added_packet = 6;
inline void ProfilerConfig::clear_use_packet_timestamp_for_added_packet() {
  use_packet_timestamp_for_added_packet_ = false;
}
inline bool ProfilerConfig::_internal_use_packet_timestamp_for_added_packet() const {
  return use_packet_timestamp_for_added_packet_;
}
inline bool ProfilerConfig::use_packet_timestamp_for_added_packet() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.use_packet_timestamp_for_added_packet)
  return _internal_use_packet_timestamp_for_added_packet();
}
inline void ProfilerConfig::_internal_set_use_packet_timestamp_for_added_packet(bool value) {
  
  use_packet_timestamp_for_added_packet_ = value;
}
inline void ProfilerConfig::set_use_packet_timestamp_for_added_packet(bool value) {
  _internal_set_use_packet_timestamp_for_added_packet(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.use_packet_timestamp_for_added_packet)
}

// int64 trace_log_capacity = 7;
inline void ProfilerConfig::clear_trace_log_capacity() {
  trace_log_capacity_ = int64_t{0};
}
inline int64_t ProfilerConfig::_internal_trace_log_capacity() const {
  return trace_log_capacity_;
}
inline int64_t ProfilerConfig::trace_log_capacity() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.trace_log_capacity)
  return _internal_trace_log_capacity();
}
inline void ProfilerConfig::_internal_set_trace_log_capacity(int64_t value) {
  
  trace_log_capacity_ = value;
}
inline void ProfilerConfig::set_trace_log_capacity(int64_t value) {
  _internal_set_trace_log_capacity(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.trace_log_capacity)
}

// repeated int32 trace_event_types_disabled = 8;
inline int ProfilerConfig::_internal_trace_event_types_disabled_size() const {
  return trace_event_types_disabled_.size();
}
inline int ProfilerConfig::trace_event_types_disabled_size() const {
  return _internal_trace_event_types_disabled_size();
}
inline void ProfilerConfig::clear_trace_event_types_disabled() {
  trace_event_types_disabled_.Clear();
}
inline int32_t ProfilerConfig::_internal_trace_event_types_disabled(int index) const {
  return trace_event_types_disabled_.Get(index);
}
inline int32_t ProfilerConfig::trace_event_types_disabled(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.trace_event_types_disabled)
  return _internal_trace_event_types_disabled(index);
}
inline void ProfilerConfig::set_trace_event_types_disabled(int index, int32_t value) {
  trace_event_types_disabled_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.trace_event_types_disabled)
}
inline void ProfilerConfig::_internal_add_trace_event_types_disabled(int32_t value) {
  trace_event_types_disabled_.Add(value);
}
inline void ProfilerConfig::add_trace_event_types_disabled(int32_t value) {
  _internal_add_trace_event_types_disabled(value);
  // @@protoc_insertion_point(field_add:mediapipe.ProfilerConfig.trace_event_types_disabled)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ProfilerConfig::_internal_trace_event_types_disabled() const {
  return trace_event_types_disabled_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ProfilerConfig::trace_event_types_disabled() const {
  // @@protoc_insertion_point(field_list:mediapipe.ProfilerConfig.trace_event_types_disabled)
  return _internal_trace_event_types_disabled();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ProfilerConfig::_internal_mutable_trace_event_types_disabled() {
  return &trace_event_types_disabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ProfilerConfig::mutable_trace_event_types_disabled() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.ProfilerConfig.trace_event_types_disabled)
  return _internal_mutable_trace_event_types_disabled();
}

// string trace_log_path = 9;
inline void ProfilerConfig::clear_trace_log_path() {
  trace_log_path_.ClearToEmpty();
}
inline const std::string& ProfilerConfig::trace_log_path() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.trace_log_path)
  return _internal_trace_log_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfilerConfig::set_trace_log_path(ArgT0&& arg0, ArgT... args) {
 
 trace_log_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.trace_log_path)
}
inline std::string* ProfilerConfig::mutable_trace_log_path() {
  std::string* _s = _internal_mutable_trace_log_path();
  // @@protoc_insertion_point(field_mutable:mediapipe.ProfilerConfig.trace_log_path)
  return _s;
}
inline const std::string& ProfilerConfig::_internal_trace_log_path() const {
  return trace_log_path_.Get();
}
inline void ProfilerConfig::_internal_set_trace_log_path(const std::string& value) {
  
  trace_log_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfilerConfig::_internal_mutable_trace_log_path() {
  
  return trace_log_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfilerConfig::release_trace_log_path() {
  // @@protoc_insertion_point(field_release:mediapipe.ProfilerConfig.trace_log_path)
  return trace_log_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProfilerConfig::set_allocated_trace_log_path(std::string* trace_log_path) {
  if (trace_log_path != nullptr) {
    
  } else {
    
  }
  trace_log_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_log_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trace_log_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trace_log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ProfilerConfig.trace_log_path)
}

// int32 trace_log_count = 10;
inline void ProfilerConfig::clear_trace_log_count() {
  trace_log_count_ = 0;
}
inline int32_t ProfilerConfig::_internal_trace_log_count() const {
  return trace_log_count_;
}
inline int32_t ProfilerConfig::trace_log_count() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.trace_log_count)
  return _internal_trace_log_count();
}
inline void ProfilerConfig::_internal_set_trace_log_count(int32_t value) {
  
  trace_log_count_ = value;
}
inline void ProfilerConfig::set_trace_log_count(int32_t value) {
  _internal_set_trace_log_count(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.trace_log_count)
}

// int64 trace_log_interval_usec = 11;
inline void ProfilerConfig::clear_trace_log_interval_usec() {
  trace_log_interval_usec_ = int64_t{0};
}
inline int64_t ProfilerConfig::_internal_trace_log_interval_usec() const {
  return trace_log_interval_usec_;
}
inline int64_t ProfilerConfig::trace_log_interval_usec() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.trace_log_interval_usec)
  return _internal_trace_log_interval_usec();
}
inline void ProfilerConfig::_internal_set_trace_log_interval_usec(int64_t value) {
  
  trace_log_interval_usec_ = value;
}
inline void ProfilerConfig::set_trace_log_interval_usec(int64_t value) {
  _internal_set_trace_log_interval_usec(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.trace_log_interval_usec)
}

// int64 trace_log_margin_usec = 12;
inline void ProfilerConfig::clear_trace_log_margin_usec() {
  trace_log_margin_usec_ = int64_t{0};
}
inline int64_t ProfilerConfig::_internal_trace_log_margin_usec() const {
  return trace_log_margin_usec_;
}
inline int64_t ProfilerConfig::trace_log_margin_usec() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.trace_log_margin_usec)
  return _internal_trace_log_margin_usec();
}
inline void ProfilerConfig::_internal_set_trace_log_margin_usec(int64_t value) {
  
  trace_log_margin_usec_ = value;
}
inline void ProfilerConfig::set_trace_log_margin_usec(int64_t value) {
  _internal_set_trace_log_margin_usec(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.trace_log_margin_usec)
}

// bool trace_log_duration_events = 13 [deprecated = true];
inline void ProfilerConfig::clear_trace_log_duration_events() {
  trace_log_duration_events_ = false;
}
inline bool ProfilerConfig::_internal_trace_log_duration_events() const {
  return trace_log_duration_events_;
}
inline bool ProfilerConfig::trace_log_duration_events() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.trace_log_duration_events)
  return _internal_trace_log_duration_events();
}
inline void ProfilerConfig::_internal_set_trace_log_duration_events(bool value) {
  
  trace_log_duration_events_ = value;
}
inline void ProfilerConfig::set_trace_log_duration_events(bool value) {
  _internal_set_trace_log_duration_events(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.trace_log_duration_events)
}

// int32 trace_log_interval_count = 14;
inline void ProfilerConfig::clear_trace_log_interval_count() {
  trace_log_interval_count_ = 0;
}
inline int32_t ProfilerConfig::_internal_trace_log_interval_count() const {
  return trace_log_interval_count_;
}
inline int32_t ProfilerConfig::trace_log_interval_count() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.trace_log_interval_count)
  return _internal_trace_log_interval_count();
}
inline void ProfilerConfig::_internal_set_trace_log_interval_count(int32_t value) {
  
  trace_log_interval_count_ = value;
}
inline void ProfilerConfig::set_trace_log_interval_count(int32_t value) {
  _internal_set_trace_log_interval_count(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.trace_log_interval_count)
}

// bool trace_log_disabled = 15;
inline void ProfilerConfig::clear_trace_log_disabled() {
  trace_log_disabled_ = false;
}
inline bool ProfilerConfig::_internal_trace_log_disabled() const {
  return trace_log_disabled_;
}
inline bool ProfilerConfig::trace_log_disabled() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.trace_log_disabled)
  return _internal_trace_log_disabled();
}
inline void ProfilerConfig::_internal_set_trace_log_disabled(bool value) {
  
  trace_log_disabled_ = value;
}
inline void ProfilerConfig::set_trace_log_disabled(bool value) {
  _internal_set_trace_log_disabled(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.trace_log_disabled)
}

// bool trace_enabled = 16;
inline void ProfilerConfig::clear_trace_enabled() {
  trace_enabled_ = false;
}
inline bool ProfilerConfig::_internal_trace_enabled() const {
  return trace_enabled_;
}
inline bool ProfilerConfig::trace_enabled() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.trace_enabled)
  return _internal_trace_enabled();
}
inline void ProfilerConfig::_internal_set_trace_enabled(bool value) {
  
  trace_enabled_ = value;
}
inline void ProfilerConfig::set_trace_enabled(bool value) {
  _internal_set_trace_enabled(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.trace_enabled)
}

// bool trace_log_instant_events = 17;
inline void ProfilerConfig::clear_trace_log_instant_events() {
  trace_log_instant_events_ = false;
}
inline bool ProfilerConfig::_internal_trace_log_instant_events() const {
  return trace_log_instant_events_;
}
inline bool ProfilerConfig::trace_log_instant_events() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.trace_log_instant_events)
  return _internal_trace_log_instant_events();
}
inline void ProfilerConfig::_internal_set_trace_log_instant_events(bool value) {
  
  trace_log_instant_events_ = value;
}
inline void ProfilerConfig::set_trace_log_instant_events(bool value) {
  _internal_set_trace_log_instant_events(value);
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.trace_log_instant_events)
}

// string calculator_filter = 18;
inline void ProfilerConfig::clear_calculator_filter() {
  calculator_filter_.ClearToEmpty();
}
inline const std::string& ProfilerConfig::calculator_filter() const {
  // @@protoc_insertion_point(field_get:mediapipe.ProfilerConfig.calculator_filter)
  return _internal_calculator_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfilerConfig::set_calculator_filter(ArgT0&& arg0, ArgT... args) {
 
 calculator_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.ProfilerConfig.calculator_filter)
}
inline std::string* ProfilerConfig::mutable_calculator_filter() {
  std::string* _s = _internal_mutable_calculator_filter();
  // @@protoc_insertion_point(field_mutable:mediapipe.ProfilerConfig.calculator_filter)
  return _s;
}
inline const std::string& ProfilerConfig::_internal_calculator_filter() const {
  return calculator_filter_.Get();
}
inline void ProfilerConfig::_internal_set_calculator_filter(const std::string& value) {
  
  calculator_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfilerConfig::_internal_mutable_calculator_filter() {
  
  return calculator_filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfilerConfig::release_calculator_filter() {
  // @@protoc_insertion_point(field_release:mediapipe.ProfilerConfig.calculator_filter)
  return calculator_filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProfilerConfig::set_allocated_calculator_filter(std::string* calculator_filter) {
  if (calculator_filter != nullptr) {
    
  } else {
    
  }
  calculator_filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calculator_filter,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (calculator_filter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    calculator_filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ProfilerConfig.calculator_filter)
}

// -------------------------------------------------------------------

// CalculatorGraphConfig_Node

// string name = 1;
inline void CalculatorGraphConfig_Node::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CalculatorGraphConfig_Node::name() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CalculatorGraphConfig_Node::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.name)
}
inline std::string* CalculatorGraphConfig_Node::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.name)
  return _s;
}
inline const std::string& CalculatorGraphConfig_Node::_internal_name() const {
  return name_.Get();
}
inline void CalculatorGraphConfig_Node::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CalculatorGraphConfig_Node::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CalculatorGraphConfig_Node::release_name() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.Node.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CalculatorGraphConfig_Node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.Node.name)
}

// string calculator = 2;
inline void CalculatorGraphConfig_Node::clear_calculator() {
  calculator_.ClearToEmpty();
}
inline const std::string& CalculatorGraphConfig_Node::calculator() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.calculator)
  return _internal_calculator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CalculatorGraphConfig_Node::set_calculator(ArgT0&& arg0, ArgT... args) {
 
 calculator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.calculator)
}
inline std::string* CalculatorGraphConfig_Node::mutable_calculator() {
  std::string* _s = _internal_mutable_calculator();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.calculator)
  return _s;
}
inline const std::string& CalculatorGraphConfig_Node::_internal_calculator() const {
  return calculator_.Get();
}
inline void CalculatorGraphConfig_Node::_internal_set_calculator(const std::string& value) {
  
  calculator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CalculatorGraphConfig_Node::_internal_mutable_calculator() {
  
  return calculator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CalculatorGraphConfig_Node::release_calculator() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.Node.calculator)
  return calculator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CalculatorGraphConfig_Node::set_allocated_calculator(std::string* calculator) {
  if (calculator != nullptr) {
    
  } else {
    
  }
  calculator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calculator,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (calculator_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    calculator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.Node.calculator)
}

// repeated string input_stream = 3;
inline int CalculatorGraphConfig_Node::_internal_input_stream_size() const {
  return input_stream_.size();
}
inline int CalculatorGraphConfig_Node::input_stream_size() const {
  return _internal_input_stream_size();
}
inline void CalculatorGraphConfig_Node::clear_input_stream() {
  input_stream_.Clear();
}
inline std::string* CalculatorGraphConfig_Node::add_input_stream() {
  std::string* _s = _internal_add_input_stream();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.CalculatorGraphConfig.Node.input_stream)
  return _s;
}
inline const std::string& CalculatorGraphConfig_Node::_internal_input_stream(int index) const {
  return input_stream_.Get(index);
}
inline const std::string& CalculatorGraphConfig_Node::input_stream(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.input_stream)
  return _internal_input_stream(index);
}
inline std::string* CalculatorGraphConfig_Node::mutable_input_stream(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.input_stream)
  return input_stream_.Mutable(index);
}
inline void CalculatorGraphConfig_Node::set_input_stream(int index, const std::string& value) {
  input_stream_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.input_stream)
}
inline void CalculatorGraphConfig_Node::set_input_stream(int index, std::string&& value) {
  input_stream_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.input_stream)
}
inline void CalculatorGraphConfig_Node::set_input_stream(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_stream_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.CalculatorGraphConfig.Node.input_stream)
}
inline void CalculatorGraphConfig_Node::set_input_stream(int index, const char* value, size_t size) {
  input_stream_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.CalculatorGraphConfig.Node.input_stream)
}
inline std::string* CalculatorGraphConfig_Node::_internal_add_input_stream() {
  return input_stream_.Add();
}
inline void CalculatorGraphConfig_Node::add_input_stream(const std::string& value) {
  input_stream_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.input_stream)
}
inline void CalculatorGraphConfig_Node::add_input_stream(std::string&& value) {
  input_stream_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.input_stream)
}
inline void CalculatorGraphConfig_Node::add_input_stream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_stream_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.CalculatorGraphConfig.Node.input_stream)
}
inline void CalculatorGraphConfig_Node::add_input_stream(const char* value, size_t size) {
  input_stream_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.CalculatorGraphConfig.Node.input_stream)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CalculatorGraphConfig_Node::input_stream() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.Node.input_stream)
  return input_stream_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CalculatorGraphConfig_Node::mutable_input_stream() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.Node.input_stream)
  return &input_stream_;
}

// repeated string output_stream = 4;
inline int CalculatorGraphConfig_Node::_internal_output_stream_size() const {
  return output_stream_.size();
}
inline int CalculatorGraphConfig_Node::output_stream_size() const {
  return _internal_output_stream_size();
}
inline void CalculatorGraphConfig_Node::clear_output_stream() {
  output_stream_.Clear();
}
inline std::string* CalculatorGraphConfig_Node::add_output_stream() {
  std::string* _s = _internal_add_output_stream();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.CalculatorGraphConfig.Node.output_stream)
  return _s;
}
inline const std::string& CalculatorGraphConfig_Node::_internal_output_stream(int index) const {
  return output_stream_.Get(index);
}
inline const std::string& CalculatorGraphConfig_Node::output_stream(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.output_stream)
  return _internal_output_stream(index);
}
inline std::string* CalculatorGraphConfig_Node::mutable_output_stream(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.output_stream)
  return output_stream_.Mutable(index);
}
inline void CalculatorGraphConfig_Node::set_output_stream(int index, const std::string& value) {
  output_stream_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.output_stream)
}
inline void CalculatorGraphConfig_Node::set_output_stream(int index, std::string&& value) {
  output_stream_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.output_stream)
}
inline void CalculatorGraphConfig_Node::set_output_stream(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_stream_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.CalculatorGraphConfig.Node.output_stream)
}
inline void CalculatorGraphConfig_Node::set_output_stream(int index, const char* value, size_t size) {
  output_stream_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.CalculatorGraphConfig.Node.output_stream)
}
inline std::string* CalculatorGraphConfig_Node::_internal_add_output_stream() {
  return output_stream_.Add();
}
inline void CalculatorGraphConfig_Node::add_output_stream(const std::string& value) {
  output_stream_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.output_stream)
}
inline void CalculatorGraphConfig_Node::add_output_stream(std::string&& value) {
  output_stream_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.output_stream)
}
inline void CalculatorGraphConfig_Node::add_output_stream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_stream_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.CalculatorGraphConfig.Node.output_stream)
}
inline void CalculatorGraphConfig_Node::add_output_stream(const char* value, size_t size) {
  output_stream_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.CalculatorGraphConfig.Node.output_stream)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CalculatorGraphConfig_Node::output_stream() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.Node.output_stream)
  return output_stream_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CalculatorGraphConfig_Node::mutable_output_stream() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.Node.output_stream)
  return &output_stream_;
}

// repeated string input_side_packet = 5;
inline int CalculatorGraphConfig_Node::_internal_input_side_packet_size() const {
  return input_side_packet_.size();
}
inline int CalculatorGraphConfig_Node::input_side_packet_size() const {
  return _internal_input_side_packet_size();
}
inline void CalculatorGraphConfig_Node::clear_input_side_packet() {
  input_side_packet_.Clear();
}
inline std::string* CalculatorGraphConfig_Node::add_input_side_packet() {
  std::string* _s = _internal_add_input_side_packet();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
  return _s;
}
inline const std::string& CalculatorGraphConfig_Node::_internal_input_side_packet(int index) const {
  return input_side_packet_.Get(index);
}
inline const std::string& CalculatorGraphConfig_Node::input_side_packet(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
  return _internal_input_side_packet(index);
}
inline std::string* CalculatorGraphConfig_Node::mutable_input_side_packet(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
  return input_side_packet_.Mutable(index);
}
inline void CalculatorGraphConfig_Node::set_input_side_packet(int index, const std::string& value) {
  input_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
}
inline void CalculatorGraphConfig_Node::set_input_side_packet(int index, std::string&& value) {
  input_side_packet_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
}
inline void CalculatorGraphConfig_Node::set_input_side_packet(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
}
inline void CalculatorGraphConfig_Node::set_input_side_packet(int index, const char* value, size_t size) {
  input_side_packet_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
}
inline std::string* CalculatorGraphConfig_Node::_internal_add_input_side_packet() {
  return input_side_packet_.Add();
}
inline void CalculatorGraphConfig_Node::add_input_side_packet(const std::string& value) {
  input_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
}
inline void CalculatorGraphConfig_Node::add_input_side_packet(std::string&& value) {
  input_side_packet_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
}
inline void CalculatorGraphConfig_Node::add_input_side_packet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
}
inline void CalculatorGraphConfig_Node::add_input_side_packet(const char* value, size_t size) {
  input_side_packet_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CalculatorGraphConfig_Node::input_side_packet() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
  return input_side_packet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CalculatorGraphConfig_Node::mutable_input_side_packet() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.Node.input_side_packet)
  return &input_side_packet_;
}

// repeated string output_side_packet = 6;
inline int CalculatorGraphConfig_Node::_internal_output_side_packet_size() const {
  return output_side_packet_.size();
}
inline int CalculatorGraphConfig_Node::output_side_packet_size() const {
  return _internal_output_side_packet_size();
}
inline void CalculatorGraphConfig_Node::clear_output_side_packet() {
  output_side_packet_.Clear();
}
inline std::string* CalculatorGraphConfig_Node::add_output_side_packet() {
  std::string* _s = _internal_add_output_side_packet();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
  return _s;
}
inline const std::string& CalculatorGraphConfig_Node::_internal_output_side_packet(int index) const {
  return output_side_packet_.Get(index);
}
inline const std::string& CalculatorGraphConfig_Node::output_side_packet(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
  return _internal_output_side_packet(index);
}
inline std::string* CalculatorGraphConfig_Node::mutable_output_side_packet(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
  return output_side_packet_.Mutable(index);
}
inline void CalculatorGraphConfig_Node::set_output_side_packet(int index, const std::string& value) {
  output_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
}
inline void CalculatorGraphConfig_Node::set_output_side_packet(int index, std::string&& value) {
  output_side_packet_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
}
inline void CalculatorGraphConfig_Node::set_output_side_packet(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
}
inline void CalculatorGraphConfig_Node::set_output_side_packet(int index, const char* value, size_t size) {
  output_side_packet_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
}
inline std::string* CalculatorGraphConfig_Node::_internal_add_output_side_packet() {
  return output_side_packet_.Add();
}
inline void CalculatorGraphConfig_Node::add_output_side_packet(const std::string& value) {
  output_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
}
inline void CalculatorGraphConfig_Node::add_output_side_packet(std::string&& value) {
  output_side_packet_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
}
inline void CalculatorGraphConfig_Node::add_output_side_packet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
}
inline void CalculatorGraphConfig_Node::add_output_side_packet(const char* value, size_t size) {
  output_side_packet_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CalculatorGraphConfig_Node::output_side_packet() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
  return output_side_packet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CalculatorGraphConfig_Node::mutable_output_side_packet() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.Node.output_side_packet)
  return &output_side_packet_;
}

// .mediapipe.CalculatorOptions options = 7;
inline bool CalculatorGraphConfig_Node::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool CalculatorGraphConfig_Node::has_options() const {
  return _internal_has_options();
}
inline const ::mediapipe::CalculatorOptions& CalculatorGraphConfig_Node::_internal_options() const {
  const ::mediapipe::CalculatorOptions* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::CalculatorOptions&>(
      ::mediapipe::_CalculatorOptions_default_instance_);
}
inline const ::mediapipe::CalculatorOptions& CalculatorGraphConfig_Node::options() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.options)
  return _internal_options();
}
inline void CalculatorGraphConfig_Node::unsafe_arena_set_allocated_options(
    ::mediapipe::CalculatorOptions* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CalculatorGraphConfig.Node.options)
}
inline ::mediapipe::CalculatorOptions* CalculatorGraphConfig_Node::release_options() {
  
  ::mediapipe::CalculatorOptions* temp = options_;
  options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::CalculatorOptions* CalculatorGraphConfig_Node::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.Node.options)
  
  ::mediapipe::CalculatorOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::mediapipe::CalculatorOptions* CalculatorGraphConfig_Node::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::CalculatorOptions>(GetArenaForAllocation());
    options_ = p;
  }
  return options_;
}
inline ::mediapipe::CalculatorOptions* CalculatorGraphConfig_Node::mutable_options() {
  ::mediapipe::CalculatorOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.options)
  return _msg;
}
inline void CalculatorGraphConfig_Node::set_allocated_options(::mediapipe::CalculatorOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options));
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.Node.options)
}

// repeated .google.protobuf.Any node_options = 8;
inline int CalculatorGraphConfig_Node::_internal_node_options_size() const {
  return node_options_.size();
}
inline int CalculatorGraphConfig_Node::node_options_size() const {
  return _internal_node_options_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CalculatorGraphConfig_Node::mutable_node_options(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.node_options)
  return node_options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
CalculatorGraphConfig_Node::mutable_node_options() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.Node.node_options)
  return &node_options_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& CalculatorGraphConfig_Node::_internal_node_options(int index) const {
  return node_options_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& CalculatorGraphConfig_Node::node_options(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.node_options)
  return _internal_node_options(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CalculatorGraphConfig_Node::_internal_add_node_options() {
  return node_options_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CalculatorGraphConfig_Node::add_node_options() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_node_options();
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.node_options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
CalculatorGraphConfig_Node::node_options() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.Node.node_options)
  return node_options_;
}

// int32 source_layer = 9;
inline void CalculatorGraphConfig_Node::clear_source_layer() {
  source_layer_ = 0;
}
inline int32_t CalculatorGraphConfig_Node::_internal_source_layer() const {
  return source_layer_;
}
inline int32_t CalculatorGraphConfig_Node::source_layer() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.source_layer)
  return _internal_source_layer();
}
inline void CalculatorGraphConfig_Node::_internal_set_source_layer(int32_t value) {
  
  source_layer_ = value;
}
inline void CalculatorGraphConfig_Node::set_source_layer(int32_t value) {
  _internal_set_source_layer(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.source_layer)
}

// int32 buffer_size_hint = 10;
inline void CalculatorGraphConfig_Node::clear_buffer_size_hint() {
  buffer_size_hint_ = 0;
}
inline int32_t CalculatorGraphConfig_Node::_internal_buffer_size_hint() const {
  return buffer_size_hint_;
}
inline int32_t CalculatorGraphConfig_Node::buffer_size_hint() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.buffer_size_hint)
  return _internal_buffer_size_hint();
}
inline void CalculatorGraphConfig_Node::_internal_set_buffer_size_hint(int32_t value) {
  
  buffer_size_hint_ = value;
}
inline void CalculatorGraphConfig_Node::set_buffer_size_hint(int32_t value) {
  _internal_set_buffer_size_hint(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.buffer_size_hint)
}

// .mediapipe.InputStreamHandlerConfig input_stream_handler = 11;
inline bool CalculatorGraphConfig_Node::_internal_has_input_stream_handler() const {
  return this != internal_default_instance() && input_stream_handler_ != nullptr;
}
inline bool CalculatorGraphConfig_Node::has_input_stream_handler() const {
  return _internal_has_input_stream_handler();
}
inline const ::mediapipe::InputStreamHandlerConfig& CalculatorGraphConfig_Node::_internal_input_stream_handler() const {
  const ::mediapipe::InputStreamHandlerConfig* p = input_stream_handler_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::InputStreamHandlerConfig&>(
      ::mediapipe::_InputStreamHandlerConfig_default_instance_);
}
inline const ::mediapipe::InputStreamHandlerConfig& CalculatorGraphConfig_Node::input_stream_handler() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.input_stream_handler)
  return _internal_input_stream_handler();
}
inline void CalculatorGraphConfig_Node::unsafe_arena_set_allocated_input_stream_handler(
    ::mediapipe::InputStreamHandlerConfig* input_stream_handler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_stream_handler_);
  }
  input_stream_handler_ = input_stream_handler;
  if (input_stream_handler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CalculatorGraphConfig.Node.input_stream_handler)
}
inline ::mediapipe::InputStreamHandlerConfig* CalculatorGraphConfig_Node::release_input_stream_handler() {
  
  ::mediapipe::InputStreamHandlerConfig* temp = input_stream_handler_;
  input_stream_handler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::InputStreamHandlerConfig* CalculatorGraphConfig_Node::unsafe_arena_release_input_stream_handler() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.Node.input_stream_handler)
  
  ::mediapipe::InputStreamHandlerConfig* temp = input_stream_handler_;
  input_stream_handler_ = nullptr;
  return temp;
}
inline ::mediapipe::InputStreamHandlerConfig* CalculatorGraphConfig_Node::_internal_mutable_input_stream_handler() {
  
  if (input_stream_handler_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::InputStreamHandlerConfig>(GetArenaForAllocation());
    input_stream_handler_ = p;
  }
  return input_stream_handler_;
}
inline ::mediapipe::InputStreamHandlerConfig* CalculatorGraphConfig_Node::mutable_input_stream_handler() {
  ::mediapipe::InputStreamHandlerConfig* _msg = _internal_mutable_input_stream_handler();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.input_stream_handler)
  return _msg;
}
inline void CalculatorGraphConfig_Node::set_allocated_input_stream_handler(::mediapipe::InputStreamHandlerConfig* input_stream_handler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_stream_handler_);
  }
  if (input_stream_handler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_stream_handler));
    if (message_arena != submessage_arena) {
      input_stream_handler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_stream_handler, submessage_arena);
    }
    
  } else {
    
  }
  input_stream_handler_ = input_stream_handler;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.Node.input_stream_handler)
}

// .mediapipe.OutputStreamHandlerConfig output_stream_handler = 12;
inline bool CalculatorGraphConfig_Node::_internal_has_output_stream_handler() const {
  return this != internal_default_instance() && output_stream_handler_ != nullptr;
}
inline bool CalculatorGraphConfig_Node::has_output_stream_handler() const {
  return _internal_has_output_stream_handler();
}
inline const ::mediapipe::OutputStreamHandlerConfig& CalculatorGraphConfig_Node::_internal_output_stream_handler() const {
  const ::mediapipe::OutputStreamHandlerConfig* p = output_stream_handler_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::OutputStreamHandlerConfig&>(
      ::mediapipe::_OutputStreamHandlerConfig_default_instance_);
}
inline const ::mediapipe::OutputStreamHandlerConfig& CalculatorGraphConfig_Node::output_stream_handler() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.output_stream_handler)
  return _internal_output_stream_handler();
}
inline void CalculatorGraphConfig_Node::unsafe_arena_set_allocated_output_stream_handler(
    ::mediapipe::OutputStreamHandlerConfig* output_stream_handler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_stream_handler_);
  }
  output_stream_handler_ = output_stream_handler;
  if (output_stream_handler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CalculatorGraphConfig.Node.output_stream_handler)
}
inline ::mediapipe::OutputStreamHandlerConfig* CalculatorGraphConfig_Node::release_output_stream_handler() {
  
  ::mediapipe::OutputStreamHandlerConfig* temp = output_stream_handler_;
  output_stream_handler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::OutputStreamHandlerConfig* CalculatorGraphConfig_Node::unsafe_arena_release_output_stream_handler() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.Node.output_stream_handler)
  
  ::mediapipe::OutputStreamHandlerConfig* temp = output_stream_handler_;
  output_stream_handler_ = nullptr;
  return temp;
}
inline ::mediapipe::OutputStreamHandlerConfig* CalculatorGraphConfig_Node::_internal_mutable_output_stream_handler() {
  
  if (output_stream_handler_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::OutputStreamHandlerConfig>(GetArenaForAllocation());
    output_stream_handler_ = p;
  }
  return output_stream_handler_;
}
inline ::mediapipe::OutputStreamHandlerConfig* CalculatorGraphConfig_Node::mutable_output_stream_handler() {
  ::mediapipe::OutputStreamHandlerConfig* _msg = _internal_mutable_output_stream_handler();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.output_stream_handler)
  return _msg;
}
inline void CalculatorGraphConfig_Node::set_allocated_output_stream_handler(::mediapipe::OutputStreamHandlerConfig* output_stream_handler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_stream_handler_);
  }
  if (output_stream_handler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_stream_handler));
    if (message_arena != submessage_arena) {
      output_stream_handler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_stream_handler, submessage_arena);
    }
    
  } else {
    
  }
  output_stream_handler_ = output_stream_handler;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.Node.output_stream_handler)
}

// repeated .mediapipe.InputStreamInfo input_stream_info = 13;
inline int CalculatorGraphConfig_Node::_internal_input_stream_info_size() const {
  return input_stream_info_.size();
}
inline int CalculatorGraphConfig_Node::input_stream_info_size() const {
  return _internal_input_stream_info_size();
}
inline void CalculatorGraphConfig_Node::clear_input_stream_info() {
  input_stream_info_.Clear();
}
inline ::mediapipe::InputStreamInfo* CalculatorGraphConfig_Node::mutable_input_stream_info(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.input_stream_info)
  return input_stream_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::InputStreamInfo >*
CalculatorGraphConfig_Node::mutable_input_stream_info() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.Node.input_stream_info)
  return &input_stream_info_;
}
inline const ::mediapipe::InputStreamInfo& CalculatorGraphConfig_Node::_internal_input_stream_info(int index) const {
  return input_stream_info_.Get(index);
}
inline const ::mediapipe::InputStreamInfo& CalculatorGraphConfig_Node::input_stream_info(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.input_stream_info)
  return _internal_input_stream_info(index);
}
inline ::mediapipe::InputStreamInfo* CalculatorGraphConfig_Node::_internal_add_input_stream_info() {
  return input_stream_info_.Add();
}
inline ::mediapipe::InputStreamInfo* CalculatorGraphConfig_Node::add_input_stream_info() {
  ::mediapipe::InputStreamInfo* _add = _internal_add_input_stream_info();
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.input_stream_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::InputStreamInfo >&
CalculatorGraphConfig_Node::input_stream_info() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.Node.input_stream_info)
  return input_stream_info_;
}

// string executor = 14;
inline void CalculatorGraphConfig_Node::clear_executor() {
  executor_.ClearToEmpty();
}
inline const std::string& CalculatorGraphConfig_Node::executor() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.executor)
  return _internal_executor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CalculatorGraphConfig_Node::set_executor(ArgT0&& arg0, ArgT... args) {
 
 executor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.executor)
}
inline std::string* CalculatorGraphConfig_Node::mutable_executor() {
  std::string* _s = _internal_mutable_executor();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.executor)
  return _s;
}
inline const std::string& CalculatorGraphConfig_Node::_internal_executor() const {
  return executor_.Get();
}
inline void CalculatorGraphConfig_Node::_internal_set_executor(const std::string& value) {
  
  executor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CalculatorGraphConfig_Node::_internal_mutable_executor() {
  
  return executor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CalculatorGraphConfig_Node::release_executor() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.Node.executor)
  return executor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CalculatorGraphConfig_Node::set_allocated_executor(std::string* executor) {
  if (executor != nullptr) {
    
  } else {
    
  }
  executor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), executor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (executor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    executor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.Node.executor)
}

// .mediapipe.ProfilerConfig profiler_config = 15 [deprecated = true];
inline bool CalculatorGraphConfig_Node::_internal_has_profiler_config() const {
  return this != internal_default_instance() && profiler_config_ != nullptr;
}
inline bool CalculatorGraphConfig_Node::has_profiler_config() const {
  return _internal_has_profiler_config();
}
inline void CalculatorGraphConfig_Node::clear_profiler_config() {
  if (GetArenaForAllocation() == nullptr && profiler_config_ != nullptr) {
    delete profiler_config_;
  }
  profiler_config_ = nullptr;
}
inline const ::mediapipe::ProfilerConfig& CalculatorGraphConfig_Node::_internal_profiler_config() const {
  const ::mediapipe::ProfilerConfig* p = profiler_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::ProfilerConfig&>(
      ::mediapipe::_ProfilerConfig_default_instance_);
}
inline const ::mediapipe::ProfilerConfig& CalculatorGraphConfig_Node::profiler_config() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.profiler_config)
  return _internal_profiler_config();
}
inline void CalculatorGraphConfig_Node::unsafe_arena_set_allocated_profiler_config(
    ::mediapipe::ProfilerConfig* profiler_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profiler_config_);
  }
  profiler_config_ = profiler_config;
  if (profiler_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CalculatorGraphConfig.Node.profiler_config)
}
inline ::mediapipe::ProfilerConfig* CalculatorGraphConfig_Node::release_profiler_config() {
  
  ::mediapipe::ProfilerConfig* temp = profiler_config_;
  profiler_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::ProfilerConfig* CalculatorGraphConfig_Node::unsafe_arena_release_profiler_config() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.Node.profiler_config)
  
  ::mediapipe::ProfilerConfig* temp = profiler_config_;
  profiler_config_ = nullptr;
  return temp;
}
inline ::mediapipe::ProfilerConfig* CalculatorGraphConfig_Node::_internal_mutable_profiler_config() {
  
  if (profiler_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::ProfilerConfig>(GetArenaForAllocation());
    profiler_config_ = p;
  }
  return profiler_config_;
}
inline ::mediapipe::ProfilerConfig* CalculatorGraphConfig_Node::mutable_profiler_config() {
  ::mediapipe::ProfilerConfig* _msg = _internal_mutable_profiler_config();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.profiler_config)
  return _msg;
}
inline void CalculatorGraphConfig_Node::set_allocated_profiler_config(::mediapipe::ProfilerConfig* profiler_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profiler_config_;
  }
  if (profiler_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mediapipe::ProfilerConfig>::GetOwningArena(profiler_config);
    if (message_arena != submessage_arena) {
      profiler_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profiler_config, submessage_arena);
    }
    
  } else {
    
  }
  profiler_config_ = profiler_config;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.Node.profiler_config)
}

// int32 max_in_flight = 16;
inline void CalculatorGraphConfig_Node::clear_max_in_flight() {
  max_in_flight_ = 0;
}
inline int32_t CalculatorGraphConfig_Node::_internal_max_in_flight() const {
  return max_in_flight_;
}
inline int32_t CalculatorGraphConfig_Node::max_in_flight() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.max_in_flight)
  return _internal_max_in_flight();
}
inline void CalculatorGraphConfig_Node::_internal_set_max_in_flight(int32_t value) {
  
  max_in_flight_ = value;
}
inline void CalculatorGraphConfig_Node::set_max_in_flight(int32_t value) {
  _internal_set_max_in_flight(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.max_in_flight)
}

// repeated string option_value = 17;
inline int CalculatorGraphConfig_Node::_internal_option_value_size() const {
  return option_value_.size();
}
inline int CalculatorGraphConfig_Node::option_value_size() const {
  return _internal_option_value_size();
}
inline void CalculatorGraphConfig_Node::clear_option_value() {
  option_value_.Clear();
}
inline std::string* CalculatorGraphConfig_Node::add_option_value() {
  std::string* _s = _internal_add_option_value();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.CalculatorGraphConfig.Node.option_value)
  return _s;
}
inline const std::string& CalculatorGraphConfig_Node::_internal_option_value(int index) const {
  return option_value_.Get(index);
}
inline const std::string& CalculatorGraphConfig_Node::option_value(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.option_value)
  return _internal_option_value(index);
}
inline std::string* CalculatorGraphConfig_Node::mutable_option_value(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.option_value)
  return option_value_.Mutable(index);
}
inline void CalculatorGraphConfig_Node::set_option_value(int index, const std::string& value) {
  option_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.option_value)
}
inline void CalculatorGraphConfig_Node::set_option_value(int index, std::string&& value) {
  option_value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.option_value)
}
inline void CalculatorGraphConfig_Node::set_option_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  option_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.CalculatorGraphConfig.Node.option_value)
}
inline void CalculatorGraphConfig_Node::set_option_value(int index, const char* value, size_t size) {
  option_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.CalculatorGraphConfig.Node.option_value)
}
inline std::string* CalculatorGraphConfig_Node::_internal_add_option_value() {
  return option_value_.Add();
}
inline void CalculatorGraphConfig_Node::add_option_value(const std::string& value) {
  option_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.option_value)
}
inline void CalculatorGraphConfig_Node::add_option_value(std::string&& value) {
  option_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.option_value)
}
inline void CalculatorGraphConfig_Node::add_option_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  option_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.CalculatorGraphConfig.Node.option_value)
}
inline void CalculatorGraphConfig_Node::add_option_value(const char* value, size_t size) {
  option_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.CalculatorGraphConfig.Node.option_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CalculatorGraphConfig_Node::option_value() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.Node.option_value)
  return option_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CalculatorGraphConfig_Node::mutable_option_value() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.Node.option_value)
  return &option_value_;
}

// repeated string external_input = 1005;
inline int CalculatorGraphConfig_Node::_internal_external_input_size() const {
  return external_input_.size();
}
inline int CalculatorGraphConfig_Node::external_input_size() const {
  return _internal_external_input_size();
}
inline void CalculatorGraphConfig_Node::clear_external_input() {
  external_input_.Clear();
}
inline std::string* CalculatorGraphConfig_Node::add_external_input() {
  std::string* _s = _internal_add_external_input();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.CalculatorGraphConfig.Node.external_input)
  return _s;
}
inline const std::string& CalculatorGraphConfig_Node::_internal_external_input(int index) const {
  return external_input_.Get(index);
}
inline const std::string& CalculatorGraphConfig_Node::external_input(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.Node.external_input)
  return _internal_external_input(index);
}
inline std::string* CalculatorGraphConfig_Node::mutable_external_input(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.Node.external_input)
  return external_input_.Mutable(index);
}
inline void CalculatorGraphConfig_Node::set_external_input(int index, const std::string& value) {
  external_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.external_input)
}
inline void CalculatorGraphConfig_Node::set_external_input(int index, std::string&& value) {
  external_input_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.Node.external_input)
}
inline void CalculatorGraphConfig_Node::set_external_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.CalculatorGraphConfig.Node.external_input)
}
inline void CalculatorGraphConfig_Node::set_external_input(int index, const char* value, size_t size) {
  external_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.CalculatorGraphConfig.Node.external_input)
}
inline std::string* CalculatorGraphConfig_Node::_internal_add_external_input() {
  return external_input_.Add();
}
inline void CalculatorGraphConfig_Node::add_external_input(const std::string& value) {
  external_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.external_input)
}
inline void CalculatorGraphConfig_Node::add_external_input(std::string&& value) {
  external_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.Node.external_input)
}
inline void CalculatorGraphConfig_Node::add_external_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.CalculatorGraphConfig.Node.external_input)
}
inline void CalculatorGraphConfig_Node::add_external_input(const char* value, size_t size) {
  external_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.CalculatorGraphConfig.Node.external_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CalculatorGraphConfig_Node::external_input() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.Node.external_input)
  return external_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CalculatorGraphConfig_Node::mutable_external_input() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.Node.external_input)
  return &external_input_;
}

// -------------------------------------------------------------------

// CalculatorGraphConfig

// repeated .mediapipe.CalculatorGraphConfig.Node node = 1;
inline int CalculatorGraphConfig::_internal_node_size() const {
  return node_.size();
}
inline int CalculatorGraphConfig::node_size() const {
  return _internal_node_size();
}
inline void CalculatorGraphConfig::clear_node() {
  node_.Clear();
}
inline ::mediapipe::CalculatorGraphConfig_Node* CalculatorGraphConfig::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.node)
  return node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::CalculatorGraphConfig_Node >*
CalculatorGraphConfig::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.node)
  return &node_;
}
inline const ::mediapipe::CalculatorGraphConfig_Node& CalculatorGraphConfig::_internal_node(int index) const {
  return node_.Get(index);
}
inline const ::mediapipe::CalculatorGraphConfig_Node& CalculatorGraphConfig::node(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.node)
  return _internal_node(index);
}
inline ::mediapipe::CalculatorGraphConfig_Node* CalculatorGraphConfig::_internal_add_node() {
  return node_.Add();
}
inline ::mediapipe::CalculatorGraphConfig_Node* CalculatorGraphConfig::add_node() {
  ::mediapipe::CalculatorGraphConfig_Node* _add = _internal_add_node();
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.node)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::CalculatorGraphConfig_Node >&
CalculatorGraphConfig::node() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.node)
  return node_;
}

// repeated .mediapipe.PacketFactoryConfig packet_factory = 6;
inline int CalculatorGraphConfig::_internal_packet_factory_size() const {
  return packet_factory_.size();
}
inline int CalculatorGraphConfig::packet_factory_size() const {
  return _internal_packet_factory_size();
}
inline ::mediapipe::PacketFactoryConfig* CalculatorGraphConfig::mutable_packet_factory(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.packet_factory)
  return packet_factory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketFactoryConfig >*
CalculatorGraphConfig::mutable_packet_factory() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.packet_factory)
  return &packet_factory_;
}
inline const ::mediapipe::PacketFactoryConfig& CalculatorGraphConfig::_internal_packet_factory(int index) const {
  return packet_factory_.Get(index);
}
inline const ::mediapipe::PacketFactoryConfig& CalculatorGraphConfig::packet_factory(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.packet_factory)
  return _internal_packet_factory(index);
}
inline ::mediapipe::PacketFactoryConfig* CalculatorGraphConfig::_internal_add_packet_factory() {
  return packet_factory_.Add();
}
inline ::mediapipe::PacketFactoryConfig* CalculatorGraphConfig::add_packet_factory() {
  ::mediapipe::PacketFactoryConfig* _add = _internal_add_packet_factory();
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.packet_factory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketFactoryConfig >&
CalculatorGraphConfig::packet_factory() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.packet_factory)
  return packet_factory_;
}

// repeated .mediapipe.PacketGeneratorConfig packet_generator = 7;
inline int CalculatorGraphConfig::_internal_packet_generator_size() const {
  return packet_generator_.size();
}
inline int CalculatorGraphConfig::packet_generator_size() const {
  return _internal_packet_generator_size();
}
inline ::mediapipe::PacketGeneratorConfig* CalculatorGraphConfig::mutable_packet_generator(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.packet_generator)
  return packet_generator_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketGeneratorConfig >*
CalculatorGraphConfig::mutable_packet_generator() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.packet_generator)
  return &packet_generator_;
}
inline const ::mediapipe::PacketGeneratorConfig& CalculatorGraphConfig::_internal_packet_generator(int index) const {
  return packet_generator_.Get(index);
}
inline const ::mediapipe::PacketGeneratorConfig& CalculatorGraphConfig::packet_generator(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.packet_generator)
  return _internal_packet_generator(index);
}
inline ::mediapipe::PacketGeneratorConfig* CalculatorGraphConfig::_internal_add_packet_generator() {
  return packet_generator_.Add();
}
inline ::mediapipe::PacketGeneratorConfig* CalculatorGraphConfig::add_packet_generator() {
  ::mediapipe::PacketGeneratorConfig* _add = _internal_add_packet_generator();
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.packet_generator)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketGeneratorConfig >&
CalculatorGraphConfig::packet_generator() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.packet_generator)
  return packet_generator_;
}

// int32 num_threads = 8;
inline void CalculatorGraphConfig::clear_num_threads() {
  num_threads_ = 0;
}
inline int32_t CalculatorGraphConfig::_internal_num_threads() const {
  return num_threads_;
}
inline int32_t CalculatorGraphConfig::num_threads() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.num_threads)
  return _internal_num_threads();
}
inline void CalculatorGraphConfig::_internal_set_num_threads(int32_t value) {
  
  num_threads_ = value;
}
inline void CalculatorGraphConfig::set_num_threads(int32_t value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.num_threads)
}

// repeated .mediapipe.StatusHandlerConfig status_handler = 9;
inline int CalculatorGraphConfig::_internal_status_handler_size() const {
  return status_handler_.size();
}
inline int CalculatorGraphConfig::status_handler_size() const {
  return _internal_status_handler_size();
}
inline ::mediapipe::StatusHandlerConfig* CalculatorGraphConfig::mutable_status_handler(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.status_handler)
  return status_handler_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::StatusHandlerConfig >*
CalculatorGraphConfig::mutable_status_handler() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.status_handler)
  return &status_handler_;
}
inline const ::mediapipe::StatusHandlerConfig& CalculatorGraphConfig::_internal_status_handler(int index) const {
  return status_handler_.Get(index);
}
inline const ::mediapipe::StatusHandlerConfig& CalculatorGraphConfig::status_handler(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.status_handler)
  return _internal_status_handler(index);
}
inline ::mediapipe::StatusHandlerConfig* CalculatorGraphConfig::_internal_add_status_handler() {
  return status_handler_.Add();
}
inline ::mediapipe::StatusHandlerConfig* CalculatorGraphConfig::add_status_handler() {
  ::mediapipe::StatusHandlerConfig* _add = _internal_add_status_handler();
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.status_handler)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::StatusHandlerConfig >&
CalculatorGraphConfig::status_handler() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.status_handler)
  return status_handler_;
}

// repeated string input_stream = 10;
inline int CalculatorGraphConfig::_internal_input_stream_size() const {
  return input_stream_.size();
}
inline int CalculatorGraphConfig::input_stream_size() const {
  return _internal_input_stream_size();
}
inline void CalculatorGraphConfig::clear_input_stream() {
  input_stream_.Clear();
}
inline std::string* CalculatorGraphConfig::add_input_stream() {
  std::string* _s = _internal_add_input_stream();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.CalculatorGraphConfig.input_stream)
  return _s;
}
inline const std::string& CalculatorGraphConfig::_internal_input_stream(int index) const {
  return input_stream_.Get(index);
}
inline const std::string& CalculatorGraphConfig::input_stream(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.input_stream)
  return _internal_input_stream(index);
}
inline std::string* CalculatorGraphConfig::mutable_input_stream(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.input_stream)
  return input_stream_.Mutable(index);
}
inline void CalculatorGraphConfig::set_input_stream(int index, const std::string& value) {
  input_stream_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.input_stream)
}
inline void CalculatorGraphConfig::set_input_stream(int index, std::string&& value) {
  input_stream_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.input_stream)
}
inline void CalculatorGraphConfig::set_input_stream(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_stream_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.CalculatorGraphConfig.input_stream)
}
inline void CalculatorGraphConfig::set_input_stream(int index, const char* value, size_t size) {
  input_stream_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.CalculatorGraphConfig.input_stream)
}
inline std::string* CalculatorGraphConfig::_internal_add_input_stream() {
  return input_stream_.Add();
}
inline void CalculatorGraphConfig::add_input_stream(const std::string& value) {
  input_stream_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.input_stream)
}
inline void CalculatorGraphConfig::add_input_stream(std::string&& value) {
  input_stream_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.input_stream)
}
inline void CalculatorGraphConfig::add_input_stream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_stream_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.CalculatorGraphConfig.input_stream)
}
inline void CalculatorGraphConfig::add_input_stream(const char* value, size_t size) {
  input_stream_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.CalculatorGraphConfig.input_stream)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CalculatorGraphConfig::input_stream() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.input_stream)
  return input_stream_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CalculatorGraphConfig::mutable_input_stream() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.input_stream)
  return &input_stream_;
}

// repeated string output_stream = 15;
inline int CalculatorGraphConfig::_internal_output_stream_size() const {
  return output_stream_.size();
}
inline int CalculatorGraphConfig::output_stream_size() const {
  return _internal_output_stream_size();
}
inline void CalculatorGraphConfig::clear_output_stream() {
  output_stream_.Clear();
}
inline std::string* CalculatorGraphConfig::add_output_stream() {
  std::string* _s = _internal_add_output_stream();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.CalculatorGraphConfig.output_stream)
  return _s;
}
inline const std::string& CalculatorGraphConfig::_internal_output_stream(int index) const {
  return output_stream_.Get(index);
}
inline const std::string& CalculatorGraphConfig::output_stream(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.output_stream)
  return _internal_output_stream(index);
}
inline std::string* CalculatorGraphConfig::mutable_output_stream(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.output_stream)
  return output_stream_.Mutable(index);
}
inline void CalculatorGraphConfig::set_output_stream(int index, const std::string& value) {
  output_stream_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.output_stream)
}
inline void CalculatorGraphConfig::set_output_stream(int index, std::string&& value) {
  output_stream_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.output_stream)
}
inline void CalculatorGraphConfig::set_output_stream(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_stream_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.CalculatorGraphConfig.output_stream)
}
inline void CalculatorGraphConfig::set_output_stream(int index, const char* value, size_t size) {
  output_stream_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.CalculatorGraphConfig.output_stream)
}
inline std::string* CalculatorGraphConfig::_internal_add_output_stream() {
  return output_stream_.Add();
}
inline void CalculatorGraphConfig::add_output_stream(const std::string& value) {
  output_stream_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.output_stream)
}
inline void CalculatorGraphConfig::add_output_stream(std::string&& value) {
  output_stream_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.output_stream)
}
inline void CalculatorGraphConfig::add_output_stream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_stream_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.CalculatorGraphConfig.output_stream)
}
inline void CalculatorGraphConfig::add_output_stream(const char* value, size_t size) {
  output_stream_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.CalculatorGraphConfig.output_stream)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CalculatorGraphConfig::output_stream() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.output_stream)
  return output_stream_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CalculatorGraphConfig::mutable_output_stream() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.output_stream)
  return &output_stream_;
}

// repeated string input_side_packet = 16;
inline int CalculatorGraphConfig::_internal_input_side_packet_size() const {
  return input_side_packet_.size();
}
inline int CalculatorGraphConfig::input_side_packet_size() const {
  return _internal_input_side_packet_size();
}
inline void CalculatorGraphConfig::clear_input_side_packet() {
  input_side_packet_.Clear();
}
inline std::string* CalculatorGraphConfig::add_input_side_packet() {
  std::string* _s = _internal_add_input_side_packet();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.CalculatorGraphConfig.input_side_packet)
  return _s;
}
inline const std::string& CalculatorGraphConfig::_internal_input_side_packet(int index) const {
  return input_side_packet_.Get(index);
}
inline const std::string& CalculatorGraphConfig::input_side_packet(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.input_side_packet)
  return _internal_input_side_packet(index);
}
inline std::string* CalculatorGraphConfig::mutable_input_side_packet(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.input_side_packet)
  return input_side_packet_.Mutable(index);
}
inline void CalculatorGraphConfig::set_input_side_packet(int index, const std::string& value) {
  input_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.input_side_packet)
}
inline void CalculatorGraphConfig::set_input_side_packet(int index, std::string&& value) {
  input_side_packet_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.input_side_packet)
}
inline void CalculatorGraphConfig::set_input_side_packet(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.CalculatorGraphConfig.input_side_packet)
}
inline void CalculatorGraphConfig::set_input_side_packet(int index, const char* value, size_t size) {
  input_side_packet_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.CalculatorGraphConfig.input_side_packet)
}
inline std::string* CalculatorGraphConfig::_internal_add_input_side_packet() {
  return input_side_packet_.Add();
}
inline void CalculatorGraphConfig::add_input_side_packet(const std::string& value) {
  input_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.input_side_packet)
}
inline void CalculatorGraphConfig::add_input_side_packet(std::string&& value) {
  input_side_packet_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.input_side_packet)
}
inline void CalculatorGraphConfig::add_input_side_packet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.CalculatorGraphConfig.input_side_packet)
}
inline void CalculatorGraphConfig::add_input_side_packet(const char* value, size_t size) {
  input_side_packet_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.CalculatorGraphConfig.input_side_packet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CalculatorGraphConfig::input_side_packet() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.input_side_packet)
  return input_side_packet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CalculatorGraphConfig::mutable_input_side_packet() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.input_side_packet)
  return &input_side_packet_;
}

// repeated string output_side_packet = 17;
inline int CalculatorGraphConfig::_internal_output_side_packet_size() const {
  return output_side_packet_.size();
}
inline int CalculatorGraphConfig::output_side_packet_size() const {
  return _internal_output_side_packet_size();
}
inline void CalculatorGraphConfig::clear_output_side_packet() {
  output_side_packet_.Clear();
}
inline std::string* CalculatorGraphConfig::add_output_side_packet() {
  std::string* _s = _internal_add_output_side_packet();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.CalculatorGraphConfig.output_side_packet)
  return _s;
}
inline const std::string& CalculatorGraphConfig::_internal_output_side_packet(int index) const {
  return output_side_packet_.Get(index);
}
inline const std::string& CalculatorGraphConfig::output_side_packet(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.output_side_packet)
  return _internal_output_side_packet(index);
}
inline std::string* CalculatorGraphConfig::mutable_output_side_packet(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.output_side_packet)
  return output_side_packet_.Mutable(index);
}
inline void CalculatorGraphConfig::set_output_side_packet(int index, const std::string& value) {
  output_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.output_side_packet)
}
inline void CalculatorGraphConfig::set_output_side_packet(int index, std::string&& value) {
  output_side_packet_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.output_side_packet)
}
inline void CalculatorGraphConfig::set_output_side_packet(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.CalculatorGraphConfig.output_side_packet)
}
inline void CalculatorGraphConfig::set_output_side_packet(int index, const char* value, size_t size) {
  output_side_packet_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.CalculatorGraphConfig.output_side_packet)
}
inline std::string* CalculatorGraphConfig::_internal_add_output_side_packet() {
  return output_side_packet_.Add();
}
inline void CalculatorGraphConfig::add_output_side_packet(const std::string& value) {
  output_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.output_side_packet)
}
inline void CalculatorGraphConfig::add_output_side_packet(std::string&& value) {
  output_side_packet_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.output_side_packet)
}
inline void CalculatorGraphConfig::add_output_side_packet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.CalculatorGraphConfig.output_side_packet)
}
inline void CalculatorGraphConfig::add_output_side_packet(const char* value, size_t size) {
  output_side_packet_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.CalculatorGraphConfig.output_side_packet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CalculatorGraphConfig::output_side_packet() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.output_side_packet)
  return output_side_packet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CalculatorGraphConfig::mutable_output_side_packet() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.output_side_packet)
  return &output_side_packet_;
}

// int32 max_queue_size = 11;
inline void CalculatorGraphConfig::clear_max_queue_size() {
  max_queue_size_ = 0;
}
inline int32_t CalculatorGraphConfig::_internal_max_queue_size() const {
  return max_queue_size_;
}
inline int32_t CalculatorGraphConfig::max_queue_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.max_queue_size)
  return _internal_max_queue_size();
}
inline void CalculatorGraphConfig::_internal_set_max_queue_size(int32_t value) {
  
  max_queue_size_ = value;
}
inline void CalculatorGraphConfig::set_max_queue_size(int32_t value) {
  _internal_set_max_queue_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.max_queue_size)
}

// bool report_deadlock = 21;
inline void CalculatorGraphConfig::clear_report_deadlock() {
  report_deadlock_ = false;
}
inline bool CalculatorGraphConfig::_internal_report_deadlock() const {
  return report_deadlock_;
}
inline bool CalculatorGraphConfig::report_deadlock() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.report_deadlock)
  return _internal_report_deadlock();
}
inline void CalculatorGraphConfig::_internal_set_report_deadlock(bool value) {
  
  report_deadlock_ = value;
}
inline void CalculatorGraphConfig::set_report_deadlock(bool value) {
  _internal_set_report_deadlock(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.report_deadlock)
}

// .mediapipe.InputStreamHandlerConfig input_stream_handler = 12;
inline bool CalculatorGraphConfig::_internal_has_input_stream_handler() const {
  return this != internal_default_instance() && input_stream_handler_ != nullptr;
}
inline bool CalculatorGraphConfig::has_input_stream_handler() const {
  return _internal_has_input_stream_handler();
}
inline const ::mediapipe::InputStreamHandlerConfig& CalculatorGraphConfig::_internal_input_stream_handler() const {
  const ::mediapipe::InputStreamHandlerConfig* p = input_stream_handler_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::InputStreamHandlerConfig&>(
      ::mediapipe::_InputStreamHandlerConfig_default_instance_);
}
inline const ::mediapipe::InputStreamHandlerConfig& CalculatorGraphConfig::input_stream_handler() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.input_stream_handler)
  return _internal_input_stream_handler();
}
inline void CalculatorGraphConfig::unsafe_arena_set_allocated_input_stream_handler(
    ::mediapipe::InputStreamHandlerConfig* input_stream_handler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_stream_handler_);
  }
  input_stream_handler_ = input_stream_handler;
  if (input_stream_handler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CalculatorGraphConfig.input_stream_handler)
}
inline ::mediapipe::InputStreamHandlerConfig* CalculatorGraphConfig::release_input_stream_handler() {
  
  ::mediapipe::InputStreamHandlerConfig* temp = input_stream_handler_;
  input_stream_handler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::InputStreamHandlerConfig* CalculatorGraphConfig::unsafe_arena_release_input_stream_handler() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.input_stream_handler)
  
  ::mediapipe::InputStreamHandlerConfig* temp = input_stream_handler_;
  input_stream_handler_ = nullptr;
  return temp;
}
inline ::mediapipe::InputStreamHandlerConfig* CalculatorGraphConfig::_internal_mutable_input_stream_handler() {
  
  if (input_stream_handler_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::InputStreamHandlerConfig>(GetArenaForAllocation());
    input_stream_handler_ = p;
  }
  return input_stream_handler_;
}
inline ::mediapipe::InputStreamHandlerConfig* CalculatorGraphConfig::mutable_input_stream_handler() {
  ::mediapipe::InputStreamHandlerConfig* _msg = _internal_mutable_input_stream_handler();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.input_stream_handler)
  return _msg;
}
inline void CalculatorGraphConfig::set_allocated_input_stream_handler(::mediapipe::InputStreamHandlerConfig* input_stream_handler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_stream_handler_);
  }
  if (input_stream_handler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_stream_handler));
    if (message_arena != submessage_arena) {
      input_stream_handler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_stream_handler, submessage_arena);
    }
    
  } else {
    
  }
  input_stream_handler_ = input_stream_handler;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.input_stream_handler)
}

// .mediapipe.OutputStreamHandlerConfig output_stream_handler = 13;
inline bool CalculatorGraphConfig::_internal_has_output_stream_handler() const {
  return this != internal_default_instance() && output_stream_handler_ != nullptr;
}
inline bool CalculatorGraphConfig::has_output_stream_handler() const {
  return _internal_has_output_stream_handler();
}
inline const ::mediapipe::OutputStreamHandlerConfig& CalculatorGraphConfig::_internal_output_stream_handler() const {
  const ::mediapipe::OutputStreamHandlerConfig* p = output_stream_handler_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::OutputStreamHandlerConfig&>(
      ::mediapipe::_OutputStreamHandlerConfig_default_instance_);
}
inline const ::mediapipe::OutputStreamHandlerConfig& CalculatorGraphConfig::output_stream_handler() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.output_stream_handler)
  return _internal_output_stream_handler();
}
inline void CalculatorGraphConfig::unsafe_arena_set_allocated_output_stream_handler(
    ::mediapipe::OutputStreamHandlerConfig* output_stream_handler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_stream_handler_);
  }
  output_stream_handler_ = output_stream_handler;
  if (output_stream_handler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CalculatorGraphConfig.output_stream_handler)
}
inline ::mediapipe::OutputStreamHandlerConfig* CalculatorGraphConfig::release_output_stream_handler() {
  
  ::mediapipe::OutputStreamHandlerConfig* temp = output_stream_handler_;
  output_stream_handler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::OutputStreamHandlerConfig* CalculatorGraphConfig::unsafe_arena_release_output_stream_handler() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.output_stream_handler)
  
  ::mediapipe::OutputStreamHandlerConfig* temp = output_stream_handler_;
  output_stream_handler_ = nullptr;
  return temp;
}
inline ::mediapipe::OutputStreamHandlerConfig* CalculatorGraphConfig::_internal_mutable_output_stream_handler() {
  
  if (output_stream_handler_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::OutputStreamHandlerConfig>(GetArenaForAllocation());
    output_stream_handler_ = p;
  }
  return output_stream_handler_;
}
inline ::mediapipe::OutputStreamHandlerConfig* CalculatorGraphConfig::mutable_output_stream_handler() {
  ::mediapipe::OutputStreamHandlerConfig* _msg = _internal_mutable_output_stream_handler();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.output_stream_handler)
  return _msg;
}
inline void CalculatorGraphConfig::set_allocated_output_stream_handler(::mediapipe::OutputStreamHandlerConfig* output_stream_handler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_stream_handler_);
  }
  if (output_stream_handler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_stream_handler));
    if (message_arena != submessage_arena) {
      output_stream_handler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_stream_handler, submessage_arena);
    }
    
  } else {
    
  }
  output_stream_handler_ = output_stream_handler;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.output_stream_handler)
}

// repeated .mediapipe.ExecutorConfig executor = 14;
inline int CalculatorGraphConfig::_internal_executor_size() const {
  return executor_.size();
}
inline int CalculatorGraphConfig::executor_size() const {
  return _internal_executor_size();
}
inline void CalculatorGraphConfig::clear_executor() {
  executor_.Clear();
}
inline ::mediapipe::ExecutorConfig* CalculatorGraphConfig::mutable_executor(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.executor)
  return executor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ExecutorConfig >*
CalculatorGraphConfig::mutable_executor() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.executor)
  return &executor_;
}
inline const ::mediapipe::ExecutorConfig& CalculatorGraphConfig::_internal_executor(int index) const {
  return executor_.Get(index);
}
inline const ::mediapipe::ExecutorConfig& CalculatorGraphConfig::executor(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.executor)
  return _internal_executor(index);
}
inline ::mediapipe::ExecutorConfig* CalculatorGraphConfig::_internal_add_executor() {
  return executor_.Add();
}
inline ::mediapipe::ExecutorConfig* CalculatorGraphConfig::add_executor() {
  ::mediapipe::ExecutorConfig* _add = _internal_add_executor();
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.executor)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ExecutorConfig >&
CalculatorGraphConfig::executor() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.executor)
  return executor_;
}

// .mediapipe.ProfilerConfig profiler_config = 18;
inline bool CalculatorGraphConfig::_internal_has_profiler_config() const {
  return this != internal_default_instance() && profiler_config_ != nullptr;
}
inline bool CalculatorGraphConfig::has_profiler_config() const {
  return _internal_has_profiler_config();
}
inline void CalculatorGraphConfig::clear_profiler_config() {
  if (GetArenaForAllocation() == nullptr && profiler_config_ != nullptr) {
    delete profiler_config_;
  }
  profiler_config_ = nullptr;
}
inline const ::mediapipe::ProfilerConfig& CalculatorGraphConfig::_internal_profiler_config() const {
  const ::mediapipe::ProfilerConfig* p = profiler_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::ProfilerConfig&>(
      ::mediapipe::_ProfilerConfig_default_instance_);
}
inline const ::mediapipe::ProfilerConfig& CalculatorGraphConfig::profiler_config() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.profiler_config)
  return _internal_profiler_config();
}
inline void CalculatorGraphConfig::unsafe_arena_set_allocated_profiler_config(
    ::mediapipe::ProfilerConfig* profiler_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profiler_config_);
  }
  profiler_config_ = profiler_config;
  if (profiler_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CalculatorGraphConfig.profiler_config)
}
inline ::mediapipe::ProfilerConfig* CalculatorGraphConfig::release_profiler_config() {
  
  ::mediapipe::ProfilerConfig* temp = profiler_config_;
  profiler_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::ProfilerConfig* CalculatorGraphConfig::unsafe_arena_release_profiler_config() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.profiler_config)
  
  ::mediapipe::ProfilerConfig* temp = profiler_config_;
  profiler_config_ = nullptr;
  return temp;
}
inline ::mediapipe::ProfilerConfig* CalculatorGraphConfig::_internal_mutable_profiler_config() {
  
  if (profiler_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::ProfilerConfig>(GetArenaForAllocation());
    profiler_config_ = p;
  }
  return profiler_config_;
}
inline ::mediapipe::ProfilerConfig* CalculatorGraphConfig::mutable_profiler_config() {
  ::mediapipe::ProfilerConfig* _msg = _internal_mutable_profiler_config();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.profiler_config)
  return _msg;
}
inline void CalculatorGraphConfig::set_allocated_profiler_config(::mediapipe::ProfilerConfig* profiler_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profiler_config_;
  }
  if (profiler_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mediapipe::ProfilerConfig>::GetOwningArena(profiler_config);
    if (message_arena != submessage_arena) {
      profiler_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profiler_config, submessage_arena);
    }
    
  } else {
    
  }
  profiler_config_ = profiler_config;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.profiler_config)
}

// string package = 19;
inline void CalculatorGraphConfig::clear_package() {
  package_.ClearToEmpty();
}
inline const std::string& CalculatorGraphConfig::package() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.package)
  return _internal_package();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CalculatorGraphConfig::set_package(ArgT0&& arg0, ArgT... args) {
 
 package_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.package)
}
inline std::string* CalculatorGraphConfig::mutable_package() {
  std::string* _s = _internal_mutable_package();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.package)
  return _s;
}
inline const std::string& CalculatorGraphConfig::_internal_package() const {
  return package_.Get();
}
inline void CalculatorGraphConfig::_internal_set_package(const std::string& value) {
  
  package_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CalculatorGraphConfig::_internal_mutable_package() {
  
  return package_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CalculatorGraphConfig::release_package() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.package)
  return package_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CalculatorGraphConfig::set_allocated_package(std::string* package) {
  if (package != nullptr) {
    
  } else {
    
  }
  package_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    package_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.package)
}

// string type = 20;
inline void CalculatorGraphConfig::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& CalculatorGraphConfig::type() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CalculatorGraphConfig::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorGraphConfig.type)
}
inline std::string* CalculatorGraphConfig::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.type)
  return _s;
}
inline const std::string& CalculatorGraphConfig::_internal_type() const {
  return type_.Get();
}
inline void CalculatorGraphConfig::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CalculatorGraphConfig::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CalculatorGraphConfig::release_type() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CalculatorGraphConfig::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.type)
}

// .mediapipe.MediaPipeOptions options = 1001;
inline bool CalculatorGraphConfig::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool CalculatorGraphConfig::has_options() const {
  return _internal_has_options();
}
inline const ::mediapipe::MediaPipeOptions& CalculatorGraphConfig::_internal_options() const {
  const ::mediapipe::MediaPipeOptions* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MediaPipeOptions&>(
      ::mediapipe::_MediaPipeOptions_default_instance_);
}
inline const ::mediapipe::MediaPipeOptions& CalculatorGraphConfig::options() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.options)
  return _internal_options();
}
inline void CalculatorGraphConfig::unsafe_arena_set_allocated_options(
    ::mediapipe::MediaPipeOptions* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CalculatorGraphConfig.options)
}
inline ::mediapipe::MediaPipeOptions* CalculatorGraphConfig::release_options() {
  
  ::mediapipe::MediaPipeOptions* temp = options_;
  options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::MediaPipeOptions* CalculatorGraphConfig::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorGraphConfig.options)
  
  ::mediapipe::MediaPipeOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::mediapipe::MediaPipeOptions* CalculatorGraphConfig::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MediaPipeOptions>(GetArenaForAllocation());
    options_ = p;
  }
  return options_;
}
inline ::mediapipe::MediaPipeOptions* CalculatorGraphConfig::mutable_options() {
  ::mediapipe::MediaPipeOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.options)
  return _msg;
}
inline void CalculatorGraphConfig::set_allocated_options(::mediapipe::MediaPipeOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options));
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorGraphConfig.options)
}

// repeated .google.protobuf.Any graph_options = 1002;
inline int CalculatorGraphConfig::_internal_graph_options_size() const {
  return graph_options_.size();
}
inline int CalculatorGraphConfig::graph_options_size() const {
  return _internal_graph_options_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CalculatorGraphConfig::mutable_graph_options(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorGraphConfig.graph_options)
  return graph_options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
CalculatorGraphConfig::mutable_graph_options() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorGraphConfig.graph_options)
  return &graph_options_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& CalculatorGraphConfig::_internal_graph_options(int index) const {
  return graph_options_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& CalculatorGraphConfig::graph_options(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorGraphConfig.graph_options)
  return _internal_graph_options(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CalculatorGraphConfig::_internal_add_graph_options() {
  return graph_options_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CalculatorGraphConfig::add_graph_options() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_graph_options();
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorGraphConfig.graph_options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
CalculatorGraphConfig::graph_options() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorGraphConfig.graph_options)
  return graph_options_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::InputCollection_InputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::InputCollection_InputType>() {
  return ::mediapipe::InputCollection_InputType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fcalculator_2eproto
