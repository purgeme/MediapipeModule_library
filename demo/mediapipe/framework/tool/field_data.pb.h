// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/tool/field_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2ftool_2ffield_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2ftool_2ffield_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2ftool_2ffield_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2ftool_2ffield_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2ftool_2ffield_5fdata_2eproto;
namespace mediapipe {
class FieldData;
struct FieldDataDefaultTypeInternal;
extern FieldDataDefaultTypeInternal _FieldData_default_instance_;
class MessageData;
struct MessageDataDefaultTypeInternal;
extern MessageDataDefaultTypeInternal _MessageData_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::FieldData* Arena::CreateMaybeMessage<::mediapipe::FieldData>(Arena*);
template<> ::mediapipe::MessageData* Arena::CreateMaybeMessage<::mediapipe::MessageData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class MessageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MessageData) */ {
 public:
  inline MessageData() : MessageData(nullptr) {}
  ~MessageData() override;
  explicit constexpr MessageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageData(const MessageData& from);
  MessageData(MessageData&& from) noexcept
    : MessageData() {
    *this = ::std::move(from);
  }

  inline MessageData& operator=(const MessageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageData& operator=(MessageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageData* internal_default_instance() {
    return reinterpret_cast<const MessageData*>(
               &_MessageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageData& a, MessageData& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MessageData";
  }
  protected:
  explicit MessageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeUrlFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string type_url = 1;
  bool has_type_url() const;
  private:
  bool _internal_has_type_url() const;
  public:
  void clear_type_url();
  const std::string& type_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_url();
  PROTOBUF_NODISCARD std::string* release_type_url();
  void set_allocated_type_url(std::string* type_url);
  private:
  const std::string& _internal_type_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_url(const std::string& value);
  std::string* _internal_mutable_type_url();
  public:

  // optional bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.MessageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_mediapipe_2fframework_2ftool_2ffield_5fdata_2eproto;
};
// -------------------------------------------------------------------

class FieldData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.FieldData) */ {
 public:
  inline FieldData() : FieldData(nullptr) {}
  ~FieldData() override;
  explicit constexpr FieldData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldData(const FieldData& from);
  FieldData(FieldData&& from) noexcept
    : FieldData() {
    *this = ::std::move(from);
  }

  inline FieldData& operator=(const FieldData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldData& operator=(FieldData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldData& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kInt32Value = 1,
    kInt64Value = 2,
    kUint32Value = 3,
    kUint64Value = 4,
    kDoubleValue = 5,
    kFloatValue = 6,
    kBoolValue = 7,
    kEnumValue = 8,
    kStringValue = 9,
    kMessageValue = 10,
    VALUE_NOT_SET = 0,
  };

  static inline const FieldData* internal_default_instance() {
    return reinterpret_cast<const FieldData*>(
               &_FieldData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FieldData& a, FieldData& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.FieldData";
  }
  protected:
  explicit FieldData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt32ValueFieldNumber = 1,
    kInt64ValueFieldNumber = 2,
    kUint32ValueFieldNumber = 3,
    kUint64ValueFieldNumber = 4,
    kDoubleValueFieldNumber = 5,
    kFloatValueFieldNumber = 6,
    kBoolValueFieldNumber = 7,
    kEnumValueFieldNumber = 8,
    kStringValueFieldNumber = 9,
    kMessageValueFieldNumber = 10,
  };
  // sint32 int32_value = 1;
  bool has_int32_value() const;
  private:
  bool _internal_has_int32_value() const;
  public:
  void clear_int32_value();
  int32_t int32_value() const;
  void set_int32_value(int32_t value);
  private:
  int32_t _internal_int32_value() const;
  void _internal_set_int32_value(int32_t value);
  public:

  // sint64 int64_value = 2;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  int64_t int64_value() const;
  void set_int64_value(int64_t value);
  private:
  int64_t _internal_int64_value() const;
  void _internal_set_int64_value(int64_t value);
  public:

  // uint32 uint32_value = 3;
  bool has_uint32_value() const;
  private:
  bool _internal_has_uint32_value() const;
  public:
  void clear_uint32_value();
  uint32_t uint32_value() const;
  void set_uint32_value(uint32_t value);
  private:
  uint32_t _internal_uint32_value() const;
  void _internal_set_uint32_value(uint32_t value);
  public:

  // uint64 uint64_value = 4;
  bool has_uint64_value() const;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  uint64_t uint64_value() const;
  void set_uint64_value(uint64_t value);
  private:
  uint64_t _internal_uint64_value() const;
  void _internal_set_uint64_value(uint64_t value);
  public:

  // double double_value = 5;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // float float_value = 6;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // bool bool_value = 7;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // sint32 enum_value = 8;
  bool has_enum_value() const;
  private:
  bool _internal_has_enum_value() const;
  public:
  void clear_enum_value();
  int32_t enum_value() const;
  void set_enum_value(int32_t value);
  private:
  int32_t _internal_enum_value() const;
  void _internal_set_enum_value(int32_t value);
  public:

  // string string_value = 9;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // .mediapipe.MessageData message_value = 10;
  bool has_message_value() const;
  private:
  bool _internal_has_message_value() const;
  public:
  void clear_message_value();
  const ::mediapipe::MessageData& message_value() const;
  PROTOBUF_NODISCARD ::mediapipe::MessageData* release_message_value();
  ::mediapipe::MessageData* mutable_message_value();
  void set_allocated_message_value(::mediapipe::MessageData* message_value);
  private:
  const ::mediapipe::MessageData& _internal_message_value() const;
  ::mediapipe::MessageData* _internal_mutable_message_value();
  public:
  void unsafe_arena_set_allocated_message_value(
      ::mediapipe::MessageData* message_value);
  ::mediapipe::MessageData* unsafe_arena_release_message_value();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:mediapipe.FieldData)
 private:
  class _Internal;
  void set_has_int32_value();
  void set_has_int64_value();
  void set_has_uint32_value();
  void set_has_uint64_value();
  void set_has_double_value();
  void set_has_float_value();
  void set_has_bool_value();
  void set_has_enum_value();
  void set_has_string_value();
  void set_has_message_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int32_t int32_value_;
    int64_t int64_value_;
    uint32_t uint32_value_;
    uint64_t uint64_value_;
    double double_value_;
    float float_value_;
    bool bool_value_;
    int32_t enum_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::mediapipe::MessageData* message_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_mediapipe_2fframework_2ftool_2ffield_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageData

// optional string type_url = 1;
inline bool MessageData::_internal_has_type_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageData::has_type_url() const {
  return _internal_has_type_url();
}
inline void MessageData::clear_type_url() {
  type_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessageData::type_url() const {
  // @@protoc_insertion_point(field_get:mediapipe.MessageData.type_url)
  return _internal_type_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageData::set_type_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 type_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.MessageData.type_url)
}
inline std::string* MessageData::mutable_type_url() {
  std::string* _s = _internal_mutable_type_url();
  // @@protoc_insertion_point(field_mutable:mediapipe.MessageData.type_url)
  return _s;
}
inline const std::string& MessageData::_internal_type_url() const {
  return type_url_.Get();
}
inline void MessageData::_internal_set_type_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageData::_internal_mutable_type_url() {
  _has_bits_[0] |= 0x00000001u;
  return type_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageData::release_type_url() {
  // @@protoc_insertion_point(field_release:mediapipe.MessageData.type_url)
  if (!_internal_has_type_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = type_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MessageData::set_allocated_type_url(std::string* type_url) {
  if (type_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MessageData.type_url)
}

// optional bytes value = 2;
inline bool MessageData::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MessageData::has_value() const {
  return _internal_has_value();
}
inline void MessageData::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MessageData::value() const {
  // @@protoc_insertion_point(field_get:mediapipe.MessageData.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageData::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.MessageData.value)
}
inline std::string* MessageData::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:mediapipe.MessageData.value)
  return _s;
}
inline const std::string& MessageData::_internal_value() const {
  return value_.Get();
}
inline void MessageData::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageData::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageData::release_value() {
  // @@protoc_insertion_point(field_release:mediapipe.MessageData.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MessageData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MessageData.value)
}

// -------------------------------------------------------------------

// FieldData

// sint32 int32_value = 1;
inline bool FieldData::_internal_has_int32_value() const {
  return value_case() == kInt32Value;
}
inline bool FieldData::has_int32_value() const {
  return _internal_has_int32_value();
}
inline void FieldData::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
inline void FieldData::clear_int32_value() {
  if (_internal_has_int32_value()) {
    value_.int32_value_ = 0;
    clear_has_value();
  }
}
inline int32_t FieldData::_internal_int32_value() const {
  if (_internal_has_int32_value()) {
    return value_.int32_value_;
  }
  return 0;
}
inline void FieldData::_internal_set_int32_value(int32_t value) {
  if (!_internal_has_int32_value()) {
    clear_value();
    set_has_int32_value();
  }
  value_.int32_value_ = value;
}
inline int32_t FieldData::int32_value() const {
  // @@protoc_insertion_point(field_get:mediapipe.FieldData.int32_value)
  return _internal_int32_value();
}
inline void FieldData::set_int32_value(int32_t value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:mediapipe.FieldData.int32_value)
}

// sint64 int64_value = 2;
inline bool FieldData::_internal_has_int64_value() const {
  return value_case() == kInt64Value;
}
inline bool FieldData::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void FieldData::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void FieldData::clear_int64_value() {
  if (_internal_has_int64_value()) {
    value_.int64_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t FieldData::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return value_.int64_value_;
  }
  return int64_t{0};
}
inline void FieldData::_internal_set_int64_value(int64_t value) {
  if (!_internal_has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  value_.int64_value_ = value;
}
inline int64_t FieldData::int64_value() const {
  // @@protoc_insertion_point(field_get:mediapipe.FieldData.int64_value)
  return _internal_int64_value();
}
inline void FieldData::set_int64_value(int64_t value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:mediapipe.FieldData.int64_value)
}

// uint32 uint32_value = 3;
inline bool FieldData::_internal_has_uint32_value() const {
  return value_case() == kUint32Value;
}
inline bool FieldData::has_uint32_value() const {
  return _internal_has_uint32_value();
}
inline void FieldData::set_has_uint32_value() {
  _oneof_case_[0] = kUint32Value;
}
inline void FieldData::clear_uint32_value() {
  if (_internal_has_uint32_value()) {
    value_.uint32_value_ = 0u;
    clear_has_value();
  }
}
inline uint32_t FieldData::_internal_uint32_value() const {
  if (_internal_has_uint32_value()) {
    return value_.uint32_value_;
  }
  return 0u;
}
inline void FieldData::_internal_set_uint32_value(uint32_t value) {
  if (!_internal_has_uint32_value()) {
    clear_value();
    set_has_uint32_value();
  }
  value_.uint32_value_ = value;
}
inline uint32_t FieldData::uint32_value() const {
  // @@protoc_insertion_point(field_get:mediapipe.FieldData.uint32_value)
  return _internal_uint32_value();
}
inline void FieldData::set_uint32_value(uint32_t value) {
  _internal_set_uint32_value(value);
  // @@protoc_insertion_point(field_set:mediapipe.FieldData.uint32_value)
}

// uint64 uint64_value = 4;
inline bool FieldData::_internal_has_uint64_value() const {
  return value_case() == kUint64Value;
}
inline bool FieldData::has_uint64_value() const {
  return _internal_has_uint64_value();
}
inline void FieldData::set_has_uint64_value() {
  _oneof_case_[0] = kUint64Value;
}
inline void FieldData::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    value_.uint64_value_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t FieldData::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return value_.uint64_value_;
  }
  return uint64_t{0u};
}
inline void FieldData::_internal_set_uint64_value(uint64_t value) {
  if (!_internal_has_uint64_value()) {
    clear_value();
    set_has_uint64_value();
  }
  value_.uint64_value_ = value;
}
inline uint64_t FieldData::uint64_value() const {
  // @@protoc_insertion_point(field_get:mediapipe.FieldData.uint64_value)
  return _internal_uint64_value();
}
inline void FieldData::set_uint64_value(uint64_t value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:mediapipe.FieldData.uint64_value)
}

// double double_value = 5;
inline bool FieldData::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool FieldData::has_double_value() const {
  return _internal_has_double_value();
}
inline void FieldData::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void FieldData::clear_double_value() {
  if (_internal_has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double FieldData::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void FieldData::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
}
inline double FieldData::double_value() const {
  // @@protoc_insertion_point(field_get:mediapipe.FieldData.double_value)
  return _internal_double_value();
}
inline void FieldData::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:mediapipe.FieldData.double_value)
}

// float float_value = 6;
inline bool FieldData::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline bool FieldData::has_float_value() const {
  return _internal_has_float_value();
}
inline void FieldData::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void FieldData::clear_float_value() {
  if (_internal_has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float FieldData::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void FieldData::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
}
inline float FieldData::float_value() const {
  // @@protoc_insertion_point(field_get:mediapipe.FieldData.float_value)
  return _internal_float_value();
}
inline void FieldData::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:mediapipe.FieldData.float_value)
}

// bool bool_value = 7;
inline bool FieldData::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool FieldData::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void FieldData::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void FieldData::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool FieldData::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void FieldData::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
}
inline bool FieldData::bool_value() const {
  // @@protoc_insertion_point(field_get:mediapipe.FieldData.bool_value)
  return _internal_bool_value();
}
inline void FieldData::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:mediapipe.FieldData.bool_value)
}

// sint32 enum_value = 8;
inline bool FieldData::_internal_has_enum_value() const {
  return value_case() == kEnumValue;
}
inline bool FieldData::has_enum_value() const {
  return _internal_has_enum_value();
}
inline void FieldData::set_has_enum_value() {
  _oneof_case_[0] = kEnumValue;
}
inline void FieldData::clear_enum_value() {
  if (_internal_has_enum_value()) {
    value_.enum_value_ = 0;
    clear_has_value();
  }
}
inline int32_t FieldData::_internal_enum_value() const {
  if (_internal_has_enum_value()) {
    return value_.enum_value_;
  }
  return 0;
}
inline void FieldData::_internal_set_enum_value(int32_t value) {
  if (!_internal_has_enum_value()) {
    clear_value();
    set_has_enum_value();
  }
  value_.enum_value_ = value;
}
inline int32_t FieldData::enum_value() const {
  // @@protoc_insertion_point(field_get:mediapipe.FieldData.enum_value)
  return _internal_enum_value();
}
inline void FieldData::set_enum_value(int32_t value) {
  _internal_set_enum_value(value);
  // @@protoc_insertion_point(field_set:mediapipe.FieldData.enum_value)
}

// string string_value = 9;
inline bool FieldData::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool FieldData::has_string_value() const {
  return _internal_has_string_value();
}
inline void FieldData::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void FieldData::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& FieldData::string_value() const {
  // @@protoc_insertion_point(field_get:mediapipe.FieldData.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void FieldData::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.FieldData.string_value)
}
inline std::string* FieldData::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:mediapipe.FieldData.string_value)
  return _s;
}
inline const std::string& FieldData::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FieldData::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldData::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldData::release_string_value() {
  // @@protoc_insertion_point(field_release:mediapipe.FieldData.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void FieldData::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:mediapipe.FieldData.string_value)
}

// .mediapipe.MessageData message_value = 10;
inline bool FieldData::_internal_has_message_value() const {
  return value_case() == kMessageValue;
}
inline bool FieldData::has_message_value() const {
  return _internal_has_message_value();
}
inline void FieldData::set_has_message_value() {
  _oneof_case_[0] = kMessageValue;
}
inline void FieldData::clear_message_value() {
  if (_internal_has_message_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.message_value_;
    }
    clear_has_value();
  }
}
inline ::mediapipe::MessageData* FieldData::release_message_value() {
  // @@protoc_insertion_point(field_release:mediapipe.FieldData.message_value)
  if (_internal_has_message_value()) {
    clear_has_value();
      ::mediapipe::MessageData* temp = value_.message_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.message_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::MessageData& FieldData::_internal_message_value() const {
  return _internal_has_message_value()
      ? *value_.message_value_
      : reinterpret_cast< ::mediapipe::MessageData&>(::mediapipe::_MessageData_default_instance_);
}
inline const ::mediapipe::MessageData& FieldData::message_value() const {
  // @@protoc_insertion_point(field_get:mediapipe.FieldData.message_value)
  return _internal_message_value();
}
inline ::mediapipe::MessageData* FieldData::unsafe_arena_release_message_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.FieldData.message_value)
  if (_internal_has_message_value()) {
    clear_has_value();
    ::mediapipe::MessageData* temp = value_.message_value_;
    value_.message_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldData::unsafe_arena_set_allocated_message_value(::mediapipe::MessageData* message_value) {
  clear_value();
  if (message_value) {
    set_has_message_value();
    value_.message_value_ = message_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.FieldData.message_value)
}
inline ::mediapipe::MessageData* FieldData::_internal_mutable_message_value() {
  if (!_internal_has_message_value()) {
    clear_value();
    set_has_message_value();
    value_.message_value_ = CreateMaybeMessage< ::mediapipe::MessageData >(GetArenaForAllocation());
  }
  return value_.message_value_;
}
inline ::mediapipe::MessageData* FieldData::mutable_message_value() {
  ::mediapipe::MessageData* _msg = _internal_mutable_message_value();
  // @@protoc_insertion_point(field_mutable:mediapipe.FieldData.message_value)
  return _msg;
}

inline bool FieldData::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void FieldData::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline FieldData::ValueCase FieldData::value_case() const {
  return FieldData::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2ftool_2ffield_5fdata_2eproto
