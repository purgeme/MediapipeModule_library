// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/thread_pool_executor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fthread_5fpool_5fexecutor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fthread_5fpool_5fexecutor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/mediapipe_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fthread_5fpool_5fexecutor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fthread_5fpool_5fexecutor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fthread_5fpool_5fexecutor_2eproto;
namespace mediapipe {
class ThreadPoolExecutorOptions;
struct ThreadPoolExecutorOptionsDefaultTypeInternal;
extern ThreadPoolExecutorOptionsDefaultTypeInternal _ThreadPoolExecutorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::ThreadPoolExecutorOptions* Arena::CreateMaybeMessage<::mediapipe::ThreadPoolExecutorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum ThreadPoolExecutorOptions_ProcessorPerformance : int {
  ThreadPoolExecutorOptions_ProcessorPerformance_NORMAL = 0,
  ThreadPoolExecutorOptions_ProcessorPerformance_LOW = 1,
  ThreadPoolExecutorOptions_ProcessorPerformance_HIGH = 2
};
bool ThreadPoolExecutorOptions_ProcessorPerformance_IsValid(int value);
constexpr ThreadPoolExecutorOptions_ProcessorPerformance ThreadPoolExecutorOptions_ProcessorPerformance_ProcessorPerformance_MIN = ThreadPoolExecutorOptions_ProcessorPerformance_NORMAL;
constexpr ThreadPoolExecutorOptions_ProcessorPerformance ThreadPoolExecutorOptions_ProcessorPerformance_ProcessorPerformance_MAX = ThreadPoolExecutorOptions_ProcessorPerformance_HIGH;
constexpr int ThreadPoolExecutorOptions_ProcessorPerformance_ProcessorPerformance_ARRAYSIZE = ThreadPoolExecutorOptions_ProcessorPerformance_ProcessorPerformance_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThreadPoolExecutorOptions_ProcessorPerformance_descriptor();
template<typename T>
inline const std::string& ThreadPoolExecutorOptions_ProcessorPerformance_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ThreadPoolExecutorOptions_ProcessorPerformance>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ThreadPoolExecutorOptions_ProcessorPerformance_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ThreadPoolExecutorOptions_ProcessorPerformance_descriptor(), enum_t_value);
}
inline bool ThreadPoolExecutorOptions_ProcessorPerformance_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ThreadPoolExecutorOptions_ProcessorPerformance* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ThreadPoolExecutorOptions_ProcessorPerformance>(
    ThreadPoolExecutorOptions_ProcessorPerformance_descriptor(), name, value);
}
// ===================================================================

class ThreadPoolExecutorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ThreadPoolExecutorOptions) */ {
 public:
  inline ThreadPoolExecutorOptions() : ThreadPoolExecutorOptions(nullptr) {}
  ~ThreadPoolExecutorOptions() override;
  explicit constexpr ThreadPoolExecutorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThreadPoolExecutorOptions(const ThreadPoolExecutorOptions& from);
  ThreadPoolExecutorOptions(ThreadPoolExecutorOptions&& from) noexcept
    : ThreadPoolExecutorOptions() {
    *this = ::std::move(from);
  }

  inline ThreadPoolExecutorOptions& operator=(const ThreadPoolExecutorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadPoolExecutorOptions& operator=(ThreadPoolExecutorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreadPoolExecutorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreadPoolExecutorOptions* internal_default_instance() {
    return reinterpret_cast<const ThreadPoolExecutorOptions*>(
               &_ThreadPoolExecutorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ThreadPoolExecutorOptions& a, ThreadPoolExecutorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreadPoolExecutorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreadPoolExecutorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThreadPoolExecutorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThreadPoolExecutorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThreadPoolExecutorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThreadPoolExecutorOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadPoolExecutorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ThreadPoolExecutorOptions";
  }
  protected:
  explicit ThreadPoolExecutorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ThreadPoolExecutorOptions_ProcessorPerformance ProcessorPerformance;
  static constexpr ProcessorPerformance NORMAL =
    ThreadPoolExecutorOptions_ProcessorPerformance_NORMAL;
  static constexpr ProcessorPerformance LOW =
    ThreadPoolExecutorOptions_ProcessorPerformance_LOW;
  static constexpr ProcessorPerformance HIGH =
    ThreadPoolExecutorOptions_ProcessorPerformance_HIGH;
  static inline bool ProcessorPerformance_IsValid(int value) {
    return ThreadPoolExecutorOptions_ProcessorPerformance_IsValid(value);
  }
  static constexpr ProcessorPerformance ProcessorPerformance_MIN =
    ThreadPoolExecutorOptions_ProcessorPerformance_ProcessorPerformance_MIN;
  static constexpr ProcessorPerformance ProcessorPerformance_MAX =
    ThreadPoolExecutorOptions_ProcessorPerformance_ProcessorPerformance_MAX;
  static constexpr int ProcessorPerformance_ARRAYSIZE =
    ThreadPoolExecutorOptions_ProcessorPerformance_ProcessorPerformance_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProcessorPerformance_descriptor() {
    return ThreadPoolExecutorOptions_ProcessorPerformance_descriptor();
  }
  template<typename T>
  static inline const std::string& ProcessorPerformance_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProcessorPerformance>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProcessorPerformance_Name.");
    return ThreadPoolExecutorOptions_ProcessorPerformance_Name(enum_t_value);
  }
  static inline bool ProcessorPerformance_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProcessorPerformance* value) {
    return ThreadPoolExecutorOptions_ProcessorPerformance_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kThreadNamePrefixFieldNumber = 5,
    kNumThreadsFieldNumber = 1,
    kStackSizeFieldNumber = 2,
    kNicePriorityLevelFieldNumber = 3,
    kRequireProcessorPerformanceFieldNumber = 4,
  };
  // optional string thread_name_prefix = 5;
  bool has_thread_name_prefix() const;
  private:
  bool _internal_has_thread_name_prefix() const;
  public:
  void clear_thread_name_prefix();
  const std::string& thread_name_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thread_name_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thread_name_prefix();
  PROTOBUF_NODISCARD std::string* release_thread_name_prefix();
  void set_allocated_thread_name_prefix(std::string* thread_name_prefix);
  private:
  const std::string& _internal_thread_name_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thread_name_prefix(const std::string& value);
  std::string* _internal_mutable_thread_name_prefix();
  public:

  // optional int32 num_threads = 1;
  bool has_num_threads() const;
  private:
  bool _internal_has_num_threads() const;
  public:
  void clear_num_threads();
  int32_t num_threads() const;
  void set_num_threads(int32_t value);
  private:
  int32_t _internal_num_threads() const;
  void _internal_set_num_threads(int32_t value);
  public:

  // optional int32 stack_size = 2;
  bool has_stack_size() const;
  private:
  bool _internal_has_stack_size() const;
  public:
  void clear_stack_size();
  int32_t stack_size() const;
  void set_stack_size(int32_t value);
  private:
  int32_t _internal_stack_size() const;
  void _internal_set_stack_size(int32_t value);
  public:

  // optional int32 nice_priority_level = 3;
  bool has_nice_priority_level() const;
  private:
  bool _internal_has_nice_priority_level() const;
  public:
  void clear_nice_priority_level();
  int32_t nice_priority_level() const;
  void set_nice_priority_level(int32_t value);
  private:
  int32_t _internal_nice_priority_level() const;
  void _internal_set_nice_priority_level(int32_t value);
  public:

  // optional .mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance require_processor_performance = 4;
  bool has_require_processor_performance() const;
  private:
  bool _internal_has_require_processor_performance() const;
  public:
  void clear_require_processor_performance();
  ::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance require_processor_performance() const;
  void set_require_processor_performance(::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance value);
  private:
  ::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance _internal_require_processor_performance() const;
  void _internal_set_require_processor_performance(::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance value);
  public:

  static const int kExtFieldNumber = 157116819;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::MediaPipeOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::ThreadPoolExecutorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.ThreadPoolExecutorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thread_name_prefix_;
  int32_t num_threads_;
  int32_t stack_size_;
  int32_t nice_priority_level_;
  int require_processor_performance_;
  friend struct ::TableStruct_mediapipe_2fframework_2fthread_5fpool_5fexecutor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThreadPoolExecutorOptions

// optional int32 num_threads = 1;
inline bool ThreadPoolExecutorOptions::_internal_has_num_threads() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThreadPoolExecutorOptions::has_num_threads() const {
  return _internal_has_num_threads();
}
inline void ThreadPoolExecutorOptions::clear_num_threads() {
  num_threads_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ThreadPoolExecutorOptions::_internal_num_threads() const {
  return num_threads_;
}
inline int32_t ThreadPoolExecutorOptions::num_threads() const {
  // @@protoc_insertion_point(field_get:mediapipe.ThreadPoolExecutorOptions.num_threads)
  return _internal_num_threads();
}
inline void ThreadPoolExecutorOptions::_internal_set_num_threads(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_threads_ = value;
}
inline void ThreadPoolExecutorOptions::set_num_threads(int32_t value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:mediapipe.ThreadPoolExecutorOptions.num_threads)
}

// optional int32 stack_size = 2;
inline bool ThreadPoolExecutorOptions::_internal_has_stack_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ThreadPoolExecutorOptions::has_stack_size() const {
  return _internal_has_stack_size();
}
inline void ThreadPoolExecutorOptions::clear_stack_size() {
  stack_size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ThreadPoolExecutorOptions::_internal_stack_size() const {
  return stack_size_;
}
inline int32_t ThreadPoolExecutorOptions::stack_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.ThreadPoolExecutorOptions.stack_size)
  return _internal_stack_size();
}
inline void ThreadPoolExecutorOptions::_internal_set_stack_size(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  stack_size_ = value;
}
inline void ThreadPoolExecutorOptions::set_stack_size(int32_t value) {
  _internal_set_stack_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.ThreadPoolExecutorOptions.stack_size)
}

// optional int32 nice_priority_level = 3;
inline bool ThreadPoolExecutorOptions::_internal_has_nice_priority_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ThreadPoolExecutorOptions::has_nice_priority_level() const {
  return _internal_has_nice_priority_level();
}
inline void ThreadPoolExecutorOptions::clear_nice_priority_level() {
  nice_priority_level_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t ThreadPoolExecutorOptions::_internal_nice_priority_level() const {
  return nice_priority_level_;
}
inline int32_t ThreadPoolExecutorOptions::nice_priority_level() const {
  // @@protoc_insertion_point(field_get:mediapipe.ThreadPoolExecutorOptions.nice_priority_level)
  return _internal_nice_priority_level();
}
inline void ThreadPoolExecutorOptions::_internal_set_nice_priority_level(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  nice_priority_level_ = value;
}
inline void ThreadPoolExecutorOptions::set_nice_priority_level(int32_t value) {
  _internal_set_nice_priority_level(value);
  // @@protoc_insertion_point(field_set:mediapipe.ThreadPoolExecutorOptions.nice_priority_level)
}

// optional .mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance require_processor_performance = 4;
inline bool ThreadPoolExecutorOptions::_internal_has_require_processor_performance() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ThreadPoolExecutorOptions::has_require_processor_performance() const {
  return _internal_has_require_processor_performance();
}
inline void ThreadPoolExecutorOptions::clear_require_processor_performance() {
  require_processor_performance_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance ThreadPoolExecutorOptions::_internal_require_processor_performance() const {
  return static_cast< ::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance >(require_processor_performance_);
}
inline ::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance ThreadPoolExecutorOptions::require_processor_performance() const {
  // @@protoc_insertion_point(field_get:mediapipe.ThreadPoolExecutorOptions.require_processor_performance)
  return _internal_require_processor_performance();
}
inline void ThreadPoolExecutorOptions::_internal_set_require_processor_performance(::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance value) {
  assert(::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  require_processor_performance_ = value;
}
inline void ThreadPoolExecutorOptions::set_require_processor_performance(::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance value) {
  _internal_set_require_processor_performance(value);
  // @@protoc_insertion_point(field_set:mediapipe.ThreadPoolExecutorOptions.require_processor_performance)
}

// optional string thread_name_prefix = 5;
inline bool ThreadPoolExecutorOptions::_internal_has_thread_name_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThreadPoolExecutorOptions::has_thread_name_prefix() const {
  return _internal_has_thread_name_prefix();
}
inline void ThreadPoolExecutorOptions::clear_thread_name_prefix() {
  thread_name_prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThreadPoolExecutorOptions::thread_name_prefix() const {
  // @@protoc_insertion_point(field_get:mediapipe.ThreadPoolExecutorOptions.thread_name_prefix)
  return _internal_thread_name_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThreadPoolExecutorOptions::set_thread_name_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 thread_name_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.ThreadPoolExecutorOptions.thread_name_prefix)
}
inline std::string* ThreadPoolExecutorOptions::mutable_thread_name_prefix() {
  std::string* _s = _internal_mutable_thread_name_prefix();
  // @@protoc_insertion_point(field_mutable:mediapipe.ThreadPoolExecutorOptions.thread_name_prefix)
  return _s;
}
inline const std::string& ThreadPoolExecutorOptions::_internal_thread_name_prefix() const {
  return thread_name_prefix_.Get();
}
inline void ThreadPoolExecutorOptions::_internal_set_thread_name_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thread_name_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ThreadPoolExecutorOptions::_internal_mutable_thread_name_prefix() {
  _has_bits_[0] |= 0x00000001u;
  return thread_name_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ThreadPoolExecutorOptions::release_thread_name_prefix() {
  // @@protoc_insertion_point(field_release:mediapipe.ThreadPoolExecutorOptions.thread_name_prefix)
  if (!_internal_has_thread_name_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = thread_name_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thread_name_prefix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thread_name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ThreadPoolExecutorOptions::set_allocated_thread_name_prefix(std::string* thread_name_prefix) {
  if (thread_name_prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thread_name_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thread_name_prefix,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thread_name_prefix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thread_name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ThreadPoolExecutorOptions.thread_name_prefix)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance>() {
  return ::mediapipe::ThreadPoolExecutorOptions_ProcessorPerformance_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fthread_5fpool_5fexecutor_2eproto
