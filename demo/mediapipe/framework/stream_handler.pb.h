// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/stream_handler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fstream_5fhandler_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fstream_5fhandler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/mediapipe_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fstream_5fhandler_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fstream_5fhandler_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fstream_5fhandler_2eproto;
namespace mediapipe {
class InputStreamHandlerConfig;
struct InputStreamHandlerConfigDefaultTypeInternal;
extern InputStreamHandlerConfigDefaultTypeInternal _InputStreamHandlerConfig_default_instance_;
class OutputStreamHandlerConfig;
struct OutputStreamHandlerConfigDefaultTypeInternal;
extern OutputStreamHandlerConfigDefaultTypeInternal _OutputStreamHandlerConfig_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::InputStreamHandlerConfig* Arena::CreateMaybeMessage<::mediapipe::InputStreamHandlerConfig>(Arena*);
template<> ::mediapipe::OutputStreamHandlerConfig* Arena::CreateMaybeMessage<::mediapipe::OutputStreamHandlerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class InputStreamHandlerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.InputStreamHandlerConfig) */ {
 public:
  inline InputStreamHandlerConfig() : InputStreamHandlerConfig(nullptr) {}
  ~InputStreamHandlerConfig() override;
  explicit constexpr InputStreamHandlerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputStreamHandlerConfig(const InputStreamHandlerConfig& from);
  InputStreamHandlerConfig(InputStreamHandlerConfig&& from) noexcept
    : InputStreamHandlerConfig() {
    *this = ::std::move(from);
  }

  inline InputStreamHandlerConfig& operator=(const InputStreamHandlerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputStreamHandlerConfig& operator=(InputStreamHandlerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputStreamHandlerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputStreamHandlerConfig* internal_default_instance() {
    return reinterpret_cast<const InputStreamHandlerConfig*>(
               &_InputStreamHandlerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputStreamHandlerConfig& a, InputStreamHandlerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InputStreamHandlerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputStreamHandlerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputStreamHandlerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputStreamHandlerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputStreamHandlerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputStreamHandlerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputStreamHandlerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.InputStreamHandlerConfig";
  }
  protected:
  explicit InputStreamHandlerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputStreamHandlerFieldNumber = 1,
    kOptionsFieldNumber = 3,
  };
  // optional string input_stream_handler = 1 [default = "DefaultInputStreamHandler"];
  bool has_input_stream_handler() const;
  private:
  bool _internal_has_input_stream_handler() const;
  public:
  void clear_input_stream_handler();
  const std::string& input_stream_handler() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_stream_handler(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_stream_handler();
  PROTOBUF_NODISCARD std::string* release_input_stream_handler();
  void set_allocated_input_stream_handler(std::string* input_stream_handler);
  private:
  const std::string& _internal_input_stream_handler() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_stream_handler(const std::string& value);
  std::string* _internal_mutable_input_stream_handler();
  public:

  // optional .mediapipe.MediaPipeOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::mediapipe::MediaPipeOptions& options() const;
  PROTOBUF_NODISCARD ::mediapipe::MediaPipeOptions* release_options();
  ::mediapipe::MediaPipeOptions* mutable_options();
  void set_allocated_options(::mediapipe::MediaPipeOptions* options);
  private:
  const ::mediapipe::MediaPipeOptions& _internal_options() const;
  ::mediapipe::MediaPipeOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::mediapipe::MediaPipeOptions* options);
  ::mediapipe::MediaPipeOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:mediapipe.InputStreamHandlerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_input_stream_handler_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_stream_handler_;
  ::mediapipe::MediaPipeOptions* options_;
  friend struct ::TableStruct_mediapipe_2fframework_2fstream_5fhandler_2eproto;
};
// -------------------------------------------------------------------

class OutputStreamHandlerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.OutputStreamHandlerConfig) */ {
 public:
  inline OutputStreamHandlerConfig() : OutputStreamHandlerConfig(nullptr) {}
  ~OutputStreamHandlerConfig() override;
  explicit constexpr OutputStreamHandlerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputStreamHandlerConfig(const OutputStreamHandlerConfig& from);
  OutputStreamHandlerConfig(OutputStreamHandlerConfig&& from) noexcept
    : OutputStreamHandlerConfig() {
    *this = ::std::move(from);
  }

  inline OutputStreamHandlerConfig& operator=(const OutputStreamHandlerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputStreamHandlerConfig& operator=(OutputStreamHandlerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputStreamHandlerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputStreamHandlerConfig* internal_default_instance() {
    return reinterpret_cast<const OutputStreamHandlerConfig*>(
               &_OutputStreamHandlerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OutputStreamHandlerConfig& a, OutputStreamHandlerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputStreamHandlerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputStreamHandlerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputStreamHandlerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputStreamHandlerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputStreamHandlerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutputStreamHandlerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputStreamHandlerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.OutputStreamHandlerConfig";
  }
  protected:
  explicit OutputStreamHandlerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputSidePacketFieldNumber = 2,
    kOutputStreamHandlerFieldNumber = 1,
    kOptionsFieldNumber = 3,
  };
  // repeated string input_side_packet = 2;
  int input_side_packet_size() const;
  private:
  int _internal_input_side_packet_size() const;
  public:
  void clear_input_side_packet();
  const std::string& input_side_packet(int index) const;
  std::string* mutable_input_side_packet(int index);
  void set_input_side_packet(int index, const std::string& value);
  void set_input_side_packet(int index, std::string&& value);
  void set_input_side_packet(int index, const char* value);
  void set_input_side_packet(int index, const char* value, size_t size);
  std::string* add_input_side_packet();
  void add_input_side_packet(const std::string& value);
  void add_input_side_packet(std::string&& value);
  void add_input_side_packet(const char* value);
  void add_input_side_packet(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_side_packet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_side_packet();
  private:
  const std::string& _internal_input_side_packet(int index) const;
  std::string* _internal_add_input_side_packet();
  public:

  // optional string output_stream_handler = 1 [default = "InOrderOutputStreamHandler"];
  bool has_output_stream_handler() const;
  private:
  bool _internal_has_output_stream_handler() const;
  public:
  void clear_output_stream_handler();
  const std::string& output_stream_handler() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_stream_handler(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_stream_handler();
  PROTOBUF_NODISCARD std::string* release_output_stream_handler();
  void set_allocated_output_stream_handler(std::string* output_stream_handler);
  private:
  const std::string& _internal_output_stream_handler() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_stream_handler(const std::string& value);
  std::string* _internal_mutable_output_stream_handler();
  public:

  // optional .mediapipe.MediaPipeOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::mediapipe::MediaPipeOptions& options() const;
  PROTOBUF_NODISCARD ::mediapipe::MediaPipeOptions* release_options();
  ::mediapipe::MediaPipeOptions* mutable_options();
  void set_allocated_options(::mediapipe::MediaPipeOptions* options);
  private:
  const ::mediapipe::MediaPipeOptions& _internal_options() const;
  ::mediapipe::MediaPipeOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::mediapipe::MediaPipeOptions* options);
  ::mediapipe::MediaPipeOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:mediapipe.OutputStreamHandlerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_side_packet_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_output_stream_handler_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_stream_handler_;
  ::mediapipe::MediaPipeOptions* options_;
  friend struct ::TableStruct_mediapipe_2fframework_2fstream_5fhandler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputStreamHandlerConfig

// optional string input_stream_handler = 1 [default = "DefaultInputStreamHandler"];
inline bool InputStreamHandlerConfig::_internal_has_input_stream_handler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InputStreamHandlerConfig::has_input_stream_handler() const {
  return _internal_has_input_stream_handler();
}
inline void InputStreamHandlerConfig::clear_input_stream_handler() {
  input_stream_handler_.ClearToDefault(::mediapipe::InputStreamHandlerConfig::_i_give_permission_to_break_this_code_default_input_stream_handler_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputStreamHandlerConfig::input_stream_handler() const {
  // @@protoc_insertion_point(field_get:mediapipe.InputStreamHandlerConfig.input_stream_handler)
  if (input_stream_handler_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_input_stream_handler_.get();
  return _internal_input_stream_handler();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InputStreamHandlerConfig::set_input_stream_handler(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 input_stream_handler_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.InputStreamHandlerConfig.input_stream_handler)
}
inline std::string* InputStreamHandlerConfig::mutable_input_stream_handler() {
  std::string* _s = _internal_mutable_input_stream_handler();
  // @@protoc_insertion_point(field_mutable:mediapipe.InputStreamHandlerConfig.input_stream_handler)
  return _s;
}
inline const std::string& InputStreamHandlerConfig::_internal_input_stream_handler() const {
  return input_stream_handler_.Get();
}
inline void InputStreamHandlerConfig::_internal_set_input_stream_handler(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  input_stream_handler_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InputStreamHandlerConfig::_internal_mutable_input_stream_handler() {
  _has_bits_[0] |= 0x00000001u;
  return input_stream_handler_.Mutable(::mediapipe::InputStreamHandlerConfig::_i_give_permission_to_break_this_code_default_input_stream_handler_, GetArenaForAllocation());
}
inline std::string* InputStreamHandlerConfig::release_input_stream_handler() {
  // @@protoc_insertion_point(field_release:mediapipe.InputStreamHandlerConfig.input_stream_handler)
  if (!_internal_has_input_stream_handler()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = input_stream_handler_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
  return p;
}
inline void InputStreamHandlerConfig::set_allocated_input_stream_handler(std::string* input_stream_handler) {
  if (input_stream_handler != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  input_stream_handler_.SetAllocated(nullptr, input_stream_handler,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.InputStreamHandlerConfig.input_stream_handler)
}

// optional .mediapipe.MediaPipeOptions options = 3;
inline bool InputStreamHandlerConfig::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool InputStreamHandlerConfig::has_options() const {
  return _internal_has_options();
}
inline const ::mediapipe::MediaPipeOptions& InputStreamHandlerConfig::_internal_options() const {
  const ::mediapipe::MediaPipeOptions* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MediaPipeOptions&>(
      ::mediapipe::_MediaPipeOptions_default_instance_);
}
inline const ::mediapipe::MediaPipeOptions& InputStreamHandlerConfig::options() const {
  // @@protoc_insertion_point(field_get:mediapipe.InputStreamHandlerConfig.options)
  return _internal_options();
}
inline void InputStreamHandlerConfig::unsafe_arena_set_allocated_options(
    ::mediapipe::MediaPipeOptions* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.InputStreamHandlerConfig.options)
}
inline ::mediapipe::MediaPipeOptions* InputStreamHandlerConfig::release_options() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MediaPipeOptions* temp = options_;
  options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::MediaPipeOptions* InputStreamHandlerConfig::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:mediapipe.InputStreamHandlerConfig.options)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MediaPipeOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::mediapipe::MediaPipeOptions* InputStreamHandlerConfig::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MediaPipeOptions>(GetArenaForAllocation());
    options_ = p;
  }
  return options_;
}
inline ::mediapipe::MediaPipeOptions* InputStreamHandlerConfig::mutable_options() {
  ::mediapipe::MediaPipeOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:mediapipe.InputStreamHandlerConfig.options)
  return _msg;
}
inline void InputStreamHandlerConfig::set_allocated_options(::mediapipe::MediaPipeOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options));
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.InputStreamHandlerConfig.options)
}

// -------------------------------------------------------------------

// OutputStreamHandlerConfig

// optional string output_stream_handler = 1 [default = "InOrderOutputStreamHandler"];
inline bool OutputStreamHandlerConfig::_internal_has_output_stream_handler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OutputStreamHandlerConfig::has_output_stream_handler() const {
  return _internal_has_output_stream_handler();
}
inline void OutputStreamHandlerConfig::clear_output_stream_handler() {
  output_stream_handler_.ClearToDefault(::mediapipe::OutputStreamHandlerConfig::_i_give_permission_to_break_this_code_default_output_stream_handler_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OutputStreamHandlerConfig::output_stream_handler() const {
  // @@protoc_insertion_point(field_get:mediapipe.OutputStreamHandlerConfig.output_stream_handler)
  if (output_stream_handler_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_output_stream_handler_.get();
  return _internal_output_stream_handler();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutputStreamHandlerConfig::set_output_stream_handler(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 output_stream_handler_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediapipe.OutputStreamHandlerConfig.output_stream_handler)
}
inline std::string* OutputStreamHandlerConfig::mutable_output_stream_handler() {
  std::string* _s = _internal_mutable_output_stream_handler();
  // @@protoc_insertion_point(field_mutable:mediapipe.OutputStreamHandlerConfig.output_stream_handler)
  return _s;
}
inline const std::string& OutputStreamHandlerConfig::_internal_output_stream_handler() const {
  return output_stream_handler_.Get();
}
inline void OutputStreamHandlerConfig::_internal_set_output_stream_handler(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  output_stream_handler_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OutputStreamHandlerConfig::_internal_mutable_output_stream_handler() {
  _has_bits_[0] |= 0x00000001u;
  return output_stream_handler_.Mutable(::mediapipe::OutputStreamHandlerConfig::_i_give_permission_to_break_this_code_default_output_stream_handler_, GetArenaForAllocation());
}
inline std::string* OutputStreamHandlerConfig::release_output_stream_handler() {
  // @@protoc_insertion_point(field_release:mediapipe.OutputStreamHandlerConfig.output_stream_handler)
  if (!_internal_has_output_stream_handler()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = output_stream_handler_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
  return p;
}
inline void OutputStreamHandlerConfig::set_allocated_output_stream_handler(std::string* output_stream_handler) {
  if (output_stream_handler != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_stream_handler_.SetAllocated(nullptr, output_stream_handler,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.OutputStreamHandlerConfig.output_stream_handler)
}

// repeated string input_side_packet = 2;
inline int OutputStreamHandlerConfig::_internal_input_side_packet_size() const {
  return input_side_packet_.size();
}
inline int OutputStreamHandlerConfig::input_side_packet_size() const {
  return _internal_input_side_packet_size();
}
inline void OutputStreamHandlerConfig::clear_input_side_packet() {
  input_side_packet_.Clear();
}
inline std::string* OutputStreamHandlerConfig::add_input_side_packet() {
  std::string* _s = _internal_add_input_side_packet();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.OutputStreamHandlerConfig.input_side_packet)
  return _s;
}
inline const std::string& OutputStreamHandlerConfig::_internal_input_side_packet(int index) const {
  return input_side_packet_.Get(index);
}
inline const std::string& OutputStreamHandlerConfig::input_side_packet(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.OutputStreamHandlerConfig.input_side_packet)
  return _internal_input_side_packet(index);
}
inline std::string* OutputStreamHandlerConfig::mutable_input_side_packet(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.OutputStreamHandlerConfig.input_side_packet)
  return input_side_packet_.Mutable(index);
}
inline void OutputStreamHandlerConfig::set_input_side_packet(int index, const std::string& value) {
  input_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mediapipe.OutputStreamHandlerConfig.input_side_packet)
}
inline void OutputStreamHandlerConfig::set_input_side_packet(int index, std::string&& value) {
  input_side_packet_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mediapipe.OutputStreamHandlerConfig.input_side_packet)
}
inline void OutputStreamHandlerConfig::set_input_side_packet(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_side_packet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.OutputStreamHandlerConfig.input_side_packet)
}
inline void OutputStreamHandlerConfig::set_input_side_packet(int index, const char* value, size_t size) {
  input_side_packet_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.OutputStreamHandlerConfig.input_side_packet)
}
inline std::string* OutputStreamHandlerConfig::_internal_add_input_side_packet() {
  return input_side_packet_.Add();
}
inline void OutputStreamHandlerConfig::add_input_side_packet(const std::string& value) {
  input_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.OutputStreamHandlerConfig.input_side_packet)
}
inline void OutputStreamHandlerConfig::add_input_side_packet(std::string&& value) {
  input_side_packet_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.OutputStreamHandlerConfig.input_side_packet)
}
inline void OutputStreamHandlerConfig::add_input_side_packet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_side_packet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.OutputStreamHandlerConfig.input_side_packet)
}
inline void OutputStreamHandlerConfig::add_input_side_packet(const char* value, size_t size) {
  input_side_packet_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.OutputStreamHandlerConfig.input_side_packet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OutputStreamHandlerConfig::input_side_packet() const {
  // @@protoc_insertion_point(field_list:mediapipe.OutputStreamHandlerConfig.input_side_packet)
  return input_side_packet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OutputStreamHandlerConfig::mutable_input_side_packet() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.OutputStreamHandlerConfig.input_side_packet)
  return &input_side_packet_;
}

// optional .mediapipe.MediaPipeOptions options = 3;
inline bool OutputStreamHandlerConfig::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool OutputStreamHandlerConfig::has_options() const {
  return _internal_has_options();
}
inline const ::mediapipe::MediaPipeOptions& OutputStreamHandlerConfig::_internal_options() const {
  const ::mediapipe::MediaPipeOptions* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MediaPipeOptions&>(
      ::mediapipe::_MediaPipeOptions_default_instance_);
}
inline const ::mediapipe::MediaPipeOptions& OutputStreamHandlerConfig::options() const {
  // @@protoc_insertion_point(field_get:mediapipe.OutputStreamHandlerConfig.options)
  return _internal_options();
}
inline void OutputStreamHandlerConfig::unsafe_arena_set_allocated_options(
    ::mediapipe::MediaPipeOptions* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.OutputStreamHandlerConfig.options)
}
inline ::mediapipe::MediaPipeOptions* OutputStreamHandlerConfig::release_options() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MediaPipeOptions* temp = options_;
  options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::MediaPipeOptions* OutputStreamHandlerConfig::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:mediapipe.OutputStreamHandlerConfig.options)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MediaPipeOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::mediapipe::MediaPipeOptions* OutputStreamHandlerConfig::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MediaPipeOptions>(GetArenaForAllocation());
    options_ = p;
  }
  return options_;
}
inline ::mediapipe::MediaPipeOptions* OutputStreamHandlerConfig::mutable_options() {
  ::mediapipe::MediaPipeOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:mediapipe.OutputStreamHandlerConfig.options)
  return _msg;
}
inline void OutputStreamHandlerConfig::set_allocated_options(::mediapipe::MediaPipeOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options));
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.OutputStreamHandlerConfig.options)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fstream_5fhandler_2eproto
